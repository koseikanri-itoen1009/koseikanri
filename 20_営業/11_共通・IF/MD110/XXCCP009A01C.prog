#!/bin/ksh
##################################################################################
## Copyright(c)Sumisho Computer Systems Corporation, 2008. All rights reserved. ##
##                                                                              ##
## Program Name     : XXCCP009A01C                                              ##
## Description      : 画面起動ジョブネット対応                                  ##
## MD.050           : 画面起動ジョブネット対応 <MD050_CCP_009_A01>              ##
## Version          : 3.6                                                       ##
##                                                                              ##
## Parameter List                                                               ##
## -------- ----------------------------------------------------------          ##
##  No.     Description                                                         ##
## -------- ----------------------------------------------------------          ##
## $1       Oracle username/password                                            ##
## $2       User_id                                                             ##
## $3       Oracle Applications username                                        ##
## $4       Concurrent request id                                               ##
## 以下、本コンカレントのパラメータ                                             ##
## $5       起動対象アプリケーション短縮名                                      ##
## $6       起動対象コンカレント短縮名                                          ##
## $7       連携区分                                                            ##
## $8       IF連携先システム名                                                  ##
## $9       データ種コード                                                      ##
## $10      バックアップ世代数                                                  ##
## $11      SVFサーバNo                                                         ##
## $12      EBS側業務系列コード                                                 ##
## $13      対向システム側業務系列コード                                        ##
## $14      ユーザ名                                                            ##
## $15      職責アプリケーション短縮名                                          ##
## $16      職責名                                                              ##
## $17-$46  引数1-30(起動対象コンカレントのパラメータ)                          ##
##                                                                              ##
## Change Record                                                                ##
## ------------- ----- ---------------- ----------------------------------------##
##  Date          Ver.  Editor           Description                            ##
## ------------- ----- ---------------- ----------------------------------------##
##  2008/12/24    1.0   Koji.Oomata      新規作成                               ##
##  2009/02/04    1.1   Koji.Oomata      [障害COS_014]                          ##
##                                         起動対象コンカレントが警告時は、     ##
##                                         後続処理(JPQJOBSUBなど)を行う。      ##
##  2009/02/25    1.2   Koji.Oomata      [障害COS_138]                          ##
##                                         退避ファイルの削除処理を追加。       ##
##                                         →  プロファイル値取得SQL修正箇所は  ##
##                                             修正コメントなし。               ##
##                                         A02_対向システムジョブ状況更新処理   ##
##                                         起動シェル名を変更。                 ##
##                                         CONCSUB要求待ち時間変更              ##
##                                           (デフォルト60秒→15秒)             ##
##                                       [障害COS_139]                          ##
##                                         ajsentryコマンドのオプション値に     ##
##                                         -cを追加  →  単体未実施箇所の為、   ##
##                                                       修正コメントなし。     ##
##  2009/03/19    1.3   Koji.Oomata      [障害COS_157]                          ##
##                                         SQL実行結果の文字列を"から'に変更。  ##
##                                         fnd_concurrent_requestsのrequest_id  ##
##                                         と変数をWHERE条件とする時にTO_NUMBER ##
##                                         を追加。                             ##
##                                         APP-XXCCP1-10008のメッセージを二重に ##
##                                         取得していたので不要分を削除。       ##
##                                         →  修正履歴なし                     ##
##  2009/04/02    1.4   Masayuki.Sano    [障害T1-0521]*多重制御対応*"           ##
##                                         監視最大時間、監視間隔時間、ジョブネ ##
##                                         ット名(末尾)の取得処理変更。         ##
##                                         ステータス監視処理を一度にすべての   ##
##                                         ファイルを監視するように変更         ##
##                                         apps/apps⇒$1に変更。                ##
##                                         他で同一ファイルの処理が実行中か     ##
##                                         確認する方法を変更。                 ##
##                                         ステータステーブル作成位置変更。     ##
##                                         ステータステーブル更新処理追加。     ##
##  2009/05/11    1.5   Masayuki.Sano    [障害T1_0784]                          ##
##                                       ・ジョブ状況ステータス更新処理で       ##
##                                         whoカラムを更新しない                ##
##                                       ・ジョブ状況ステータス更新処理で       ##
##                                         ステータスが"0","i"時のみ更新する    ##
##  2009/06/03    1.6   Masayuki.Sano    [障害T1_0642]                          ##
##                                       ・エラーメッセージ内のパスを表示しない ##
##  2009/08/19    1.7   Masayuki.Sano    [障害0000835]                          ##
##                                       ・一時ファイル名変更                   ##
##  2009/08/27    1.8   Masayuki.Sano    [障害0000643]                          ##
##                                       ・エラーステータスの追加(10,11)        ##
##                                       ・コピー、削除、ファイルチェックの削除 ##
##                                       ・ステータステーブルの作成項目変更     ##
##  2009/10/09    1.9   Shigeto.Niki     [障害0001516]                          ##
##                                       ・一時ファイルパス変更                 ##
##  2009/10/26    1.10  Masayuki.Sano    [障害I_E_583]                          ##
##                                       ・多重制御チェックをエラーから監視へ   ##
##                                         変更。                               ##
##                                       ・FND_CONCURRENT_REQUESTSテーブルを    ##
##                                         参照し、完了のデータのみを監視対象   ##
##                                         とする。                             ##
##  2009/11/23    1.11  Shigeto.Niki     ・一時ファイルパス修正                 ##
##  2010/01/25    1.12  Koji.Oomata      [E_本稼動_01223]                       ##
##                                       起動対象コンカレントが警告の場合(データ##
##                                       部が0件の場合)、EDI/帳票システムへ連携 ##
##                                       を行わない。                           ##
##  2014/11/06    1.13  Koji.Oomata      [リプレース_00197]                     ##
##                                       jpqjobsubコマンドのパス修正。          ##
##  2014/11/17    1.14  Koji.Oomata      [リプレース_00197]                     ##
##                                       EDI/帳票でjpqjobsubコマンドのパス分岐。##
##  2014/11/19    1.15  Kazuyuki.Kiriu   [リプレース_00199]                     ##
##                                       EDI/帳票のjpqjobsubコマンドパス修正。  ##
##  2022/01/20    3.0   Shun.Takenami    [E_本稼動_17774]                       ##
##                                       CONCSUBの呼び出しをSUBMIT_REQUESTへ変更##
##  2022/08/05    3.1   Nobuo.Koyama     [E_本稼動_18570]                       ##
##                                       バックアップ前に「ls」追加             ##
##  2022/09/01    3.2   Nobuo.Koyama     [E_本稼動_18570]                       ##
##                                       リトライ対応                           ##
##  2023/01/12    3.3   Nobuo.Koyama     [E_本稼動_19015]                       ##
##                                       バックアップエラー無視対応             ##
##  2023/02/28    3.4   Nobuo.Koyama     [E_本稼動_19079]                       ##
##                                       リトライ時間60秒→1秒                  ##
##  2023/08/01    3.5   Hirokazu.Iitsuka [E_本稼動_19079]                       ##
##                                       シンボリックリンク対応                 ##
##  2023/09/11    3.6   Hirokazu.Iitsuka [E_本稼動_19468]                       ##
##                                       EDIサーバリプレース対応                ##
##                                                                              ##
##################################################################################

################################################################################
##                                 変数定義                                   ##
################################################################################
# 2009/04/02 Ver.1.4 Masayuki.Sano mod START
#L_tmppath="/var/tmp"                            #一時ファイルパス[環境依存値] #2009/08/19 Ver1.7 Add
# 2009/11/23 Ver.1.11 Shigeto.Niki mod START
#L_tmppath="$COMMON_TOP/tmp"                      #一時ファイルパス
# 2022/01/20 Ver.3.0 Shun.Takenami mod START
#L_tmppath="$COMMON_TOP/temp"         #一時ファイルパス
L_tmppath="/ebs/BEBSITO/BEBSITOcomn/temp"    #一時ファイルパス
# 2022/01/20 Ver.3.0 Shun.Takenami mod END
# 2009/11/23 Ver.1.11 Shigeto.Niki mod END
# 2009/04/02 Ver.1.4 Masayuki.Sano mod END

C_appl_name="XXCCP"                  #共通：アプリケーション短縮目
C_program_id="XXCCP009A01C"          #プログラムID
C_request_id=${4}                    #本コンカレントの要求ID
C_collon="  :  "
C_paracount=${#}

# 2009/08/19 Ver1.7 Del START
#C_cmdname="/var/tmp"                           #テンポラリファイル出力先
#C_fname="${C_program_id}_${C_request_id}"      #テンポラリファイル名 [SQL結果格納]
#C_std_out="${C_cmdname}/${C_fname}.env"        #テンポラリファイル名(パス付き)
#C_fname2="${C_program_id}_${C_request_id}_2"   #テンポラリファイル名2 [COCSUB結果ログ]
#C_std_out2="${C_cmdname}/${C_fname2}.stdout"   #テンポラリファイル名2(パス付き)
# 2009/08/19 Ver1.7 Del End

C_field_name='$SRS$.'
C_prof_request_id="XXCCP1_REQUEST_ID"                   #プロファイル|XXCCP:出力用_要求ID
C_prof_concurrent_name="XXCCP1_CONCURRENT_NAME"         #プロファイル|XXCCP:出力用_コンカレント名
C_prof_user_name="XXCCP1_USER_NAME"                     #プロファイル|XXCCP:出力用_ユーザー名
C_prof_resp_name="XXCCP1_RESP_NAME"                     #プロファイル|XXCCP:出力用_職責名
C_prof_actual_start_date="XXCCP1_ACTUAL_START_DATE"     #プロファイル|XXCCP:出力用_起動時間
C_prof_nas_main_dir="XXCCP1_NAS_MAIN_DIR"               #プロファイル|XXCCP:NASメインディレクトリ
C_prof_san_main_dir="XXCCP1_SAN_MAIN_DIR"               #プロファイル|XXCCP:SANメインディレクトリ
C_prof_edi_que="XXCCP1_EDI_QUE"                         #プロファイル|XXCCP:EDIキュー名
C_prof_edi_host="XXCCP1_EDI_HOST"                       #プロファイル|XXCCP:EDI実行先ホスト名
C_prof_report_que1="XXCCP1_REPORT_QUE1"                 #プロファイル|XXCCP:帳票キュー名1
C_prof_report_que2="XXCCP1_REPORT_QUE2"                 #プロファイル|XXCCP:帳票キュー名2
C_prof_report_que3="XXCCP1_REPORT_QUE3"                 #プロファイル|XXCCP:帳票キュー名3
C_prof_report_host1="XXCCP1_REPORT_HOST1"               #プロファイル|XXCCP:帳票実行先ホスト名1
C_prof_report_host2="XXCCP1_REPORT_HOST2"               #プロファイル|XXCCP:帳票実行先ホスト名2
C_prof_report_host3="XXCCP1_REPORT_HOST3"               #プロファイル|XXCCP:帳票実行先ホスト名3
# 2009/04/02 Ver.1.4 Masayuki.Sano delete START
#C_prof_status_max="XXCCP1_STATUS_MAX"                   #プロファイル|XXCCP:監視最大時間
#C_prof_status_interval="XXCCP1_STATUS_INTERVAL"         #プロファイル|XXCCP:監視間隔時間
# 2009/04/02 Ver.1.4 Masayuki.Sano delete END
C_prof_if_file_1place="XXCCP1_IF_FILE_1PLACE"           #プロファイル|XXCCP:環境値
C_prof_if_file_6place="XXCCP1_IF_FILE_6PLACE"           #プロファイル|XXCCP:区分値
C_prof_edi_job_gr_comm="XXCCP1_EDI_JOB_GR_COMM"         #プロファイル|XXCCP:EDIジョブグループ名(共通)
C_prof_edi_job_gr_21="XXCCP1_EDI_JOB_GR_21"             #プロファイル|XXCCP:EDIジョブグループ名(21)
C_prof_edi_job_gr_22="XXCCP1_EDI_JOB_GR_22"             #プロファイル|XXCCP:EDIジョブグループ名(22)
C_prof_report_job_gr_comm="XXCCP1_REPORT_JOB_GR_COMM"   #プロファイル|XXCCP:帳票ジョブグループ名(共通)
C_prof_report_job_gr_last="XXCCP1_REPORT_JOB_GR_LAST"   #プロファイル|XXCCP:帳票ジョブグループ名(末尾)
# 2009/04/02 Ver.1.4 Masayuki.Sano delete START
#C_prof_jobnet_last="XXCCP1_JOBNET_LAST"                 #プロファイル|XXCCP:ジョブネット名(末尾)
# 2009/04/02 Ver.1.4 Masayuki.Sano delete END
C_prof_request_char="XXCCP1_REQUEST_CHAR"               #プロファイル|XXCCP:要求ID取得用
C_prof_edi_serv="XXCCP1_EDI_SERV"                       #プロファイル|XXCCP:EDIスケジューラサービス名
C_prof_report_serv="XXCCP1_REPORT_SERV"                 #プロファイル|XXCCP:帳票スケジューラサービス名
C_prof_sts_updt_path="XXCCP1_STS_UPDT_PATH"             #プロファイル|XXCCP:ステータス更新シェル格納場所
# 2009/02/25 Ver.1.2 Koji.Oomata add START
C_prof_edi_esc_bk_num="XXCCP1_EDI_ESC_BK_NUM"           #プロファイル|XXCCP:画面起動ジョブネット用EDI退避世代数
C_prof_report_esc_bk_num="XXCCP1_REPORT_ESC_BK_NUM"     #プロファイル|XXCCP:画面起動ジョブネット用帳票退避世代数
# 2009/02/25 Ver.1.2 Koji.Oomata add END
# 2009/04/02 Ver.1.4 Masayuki.Sano add START
C_prof_edi_status_max="XXCCP1_EDI_STATUS_MAX"               #プロファイル|XXCCP:EDI監視最大時間
C_prof_edi_status_interval="XXCCP1_EDI_STATUS_INTERVAL"     #プロファイル|XXCCP:EDI監視間隔時間
C_prof_edi_jobnet_last="XXCCP1_EDI_JOBNET_LAST"             #プロファイル|XXCCP:EDIジョブネット名(末尾)
C_prof_rep_status_max="XXCCP1_REPORT_STATUS_MAX"            #プロファイル|XXCCP:帳票監視最大時間
C_prof_rep_status_interval="XXCCP1_REPORT_STATUS_INTERVAL"  #プロファイル|XXCCP:帳票監視間隔時間
C_prof_rep_jobnet_last="XXCCP1_REPORT_JOBNET_LAST"          #プロファイル|XXCCP:帳票ジョブネット名(末尾)
# 2009/04/02 Ver.1.4 Masayuki.Sano add END
# 2009/08/27 Ver1.8 Masayuki.Sano add START
C_prof_copyshell_path="XXCCP1_ZBZZCOPYFILE_PATH"             #プロファイル|XXCCP:IFファイルコピーシェルパス
C_prof_delshell_path="XXCCP1_ZBZZDELETEFILE_PATH"            #プロファイル|XXCCP:IFファイル削除シェルパス
# 2009/08/27 Ver1.8 Masayuki.Sano add END
# 2009/10/26 Ver.1.10 Masayuki.Sano add START
C_prof_iffile_chk_max_wait="XXCCP1_IFFILE_CHK_MAX_WAIT"     #プロファイル|XXCCP:起動中IFファイル監視最大時間
C_prof_iffile_chk_interval="XXCCP1_IFFILE_CHK_INTERVAL"     #プロファイル|XXCCP:起動中IFファイル監視間隔時間

# 2023/09/07 Ver.3.6 H.Iitsuka ADD Start
C_prof_edi_host_replace="XXCCP1_EDI_HOST_REPLACE"                       #プロファイル|XXCCP:EDI実行先ホスト名リプレース
# 2023/09/07 Ver.3.6 H.Iitsuka ADD End

C_yes='Y'                                                   #フラグ：有
C_no='N'                                                    #フラグ：無

C_insert_wait=1           #ジョブ状況テーブルへのレコード作成後に待機する時間
# 2009/10/26 Ver.1.10 Masayuki.Sano add END

C_ofil=$APPLCSF/$APPLOUT/o$4.out   #レポート出力ファイル名(パス付き)

C_date=`date +"%Y/%m/%d %H:%M:%S"`  #起動時間
C_date2=`date +"%Y%m%d%H%M%S"`      #起動時間(詰め)
C_date3=`date +"%Y/%m/%d"`          #起動日付
# 2009/04/02 Ver.1.4 Masayuki.Sano add START
C_ora_login=$1   #ORACLEへのユーザ/パスワード
# 2009/04/02 Ver.1.4 Masayuki.Sano add End
# 2009/08/19 Ver1.7 Add START
C_fname="${C_program_id}_${C_date2}_${C_request_id}"      #テンポラリファイルベース名
C_std_out="${L_tmppath}/${C_fname}.env.tmp"               #テンポラリファイル名 (パス付き)[SQL結果格納]
C_std_out2="${L_tmppath}/${C_fname}_2.stdout.tmp"         #テンポラリファイル名2(パス付き)[COCSUB結果ログ]
# 2022/01/20 Ver.3.0 Shun.Takenami add START
C_std_out3="${L_tmppath}/${C_fname}_3.stdout.tmp"         #テンポラリファイル名3(パス付き)[SUBMIT_REQUEST関連]
# 2022/01/20 Ver.3.0 Shun.Takenami add END
# 2009/08/19 Ver1.7 Add End

L_target_cnt=0
L_success_cnt=0
L_error_cnt=0

################################################################################
##                                 関数定義                                   ##
################################################################################
# 2009/04/02 Ver.1.4 Masayuki.Sano add START
##*****************************************************************************
## Function Name   : update_job_process
## Description     : 対向システムジョブ状況テーブルのジョブ状況ステータスを
##                 : 更新する。(共通)
## Parameter List
## -------- ----------------------------------------------------------
##  No.      Description
## -------- ----------------------------------------------------------
##  $1～     処理対象の対向システムジョブ状況テーブルID
##*****************************************************************************
update_job_process()
{
  # ** 変数定義 **
  L_return=0
  L_if_job_status_id=""  # 対向システムジョブ状況テーブルID
  L_update_date=`date +"%Y%m%d%H%M%S"`  # 2009/05/11 Ver.1.5 Masayuki.Sano Add
  # ** 処理定義 **
  for L_if_job_status_id in "${@}"
  do
    # ■ 対向システム状況テーブルのジョブ状況ステータスの更新を行います
    sqlplus -s ${C_ora_login} <<EOF >${C_std_out2}
      WHENEVER OSERROR EXIT FAILURE ROLLBACK
      WHENEVER SQLERROR EXIT FAILURE ROLLBACK
      UPDATE xxccp_if_job_status xijs
      SET    xijs.job_process            = 'E'   -- ジョブ状況ステータス
            ,xijs.last_updated_by        = TO_NUMBER('${C_requested_by}')
-- 2009/05/11 Ver.1.5 Masayuki.Sano Update Start
--            ,xijs.last_update_date       = TO_DATE('${C_date2}','YYYYMMDDHH24MISS')
            ,xijs.last_update_date       = TO_DATE('${L_update_date}','YYYYMMDDHH24MISS')
-- 2009/05/11 Ver.1.5 Masayuki.Sano Update End
            ,xijs.last_update_login      = TO_NUMBER('${C_last_update_login}')
            ,xijs.request_id             = TO_NUMBER('${C_request_id}')
            ,xijs.program_application_id = TO_NUMBER('${C_program_application_id}')
            ,xijs.program_id             = TO_NUMBER('${C_concurrent_program_id}')
-- 2009/05/11 Ver.1.5 Masayuki.Sano Update Start
--            ,xijs.program_update_date    = TO_DATE('${C_date2}','YYYYMMDDHH24MISS')
            ,xijs.program_update_date    = TO_DATE('${L_update_date}','YYYYMMDDHH24MISS')
-- 2009/05/11 Ver.1.5 Masayuki.Sano Update End
      WHERE  xijs.if_job_status_id = $L_if_job_status_id
-- 2009/08/27 Ver1.8 Masayuki.Sano mod Start
--      AND    xijs.status_code NOT IN ('1','8','9')  -- 2009/04/02 Ver.1.5 Masayuki.Sano Add
      AND    xijs.status_code IN ('0','i')
-- 2009/08/27 Ver1.8 Masayuki.Sano mod End
      ;
      EXIT SUCCESS COMMIT
EOF
    L_return=${?}
    # ■ エラーチェック
    if [ ${L_return} -ne 0 ]
    then
      #(SQLを実行し、メッセージを取得する。)
      sqlplus -s ${C_ora_login} <<EOF >>${C_std_out}
      SET HEADING OFF
      SET LINES 240
      SELECT 'C_10061_msg=''' || xxccp_common_pkg.get_msg('${C_appl_name}'
                                                         ,'APP-XXCCP1-10061'
                                                         ,'SYSTEM_NAME'
                                                         ,xijs.if_system_name
                                                         ,'FILE_NAME'
                                                         ,xijs.if_file_name) || ''''
      FROM   xxccp_if_job_status xijs
      WHERE  xijs.if_job_status_id = ${L_if_job_status_id}
      ;
      EXIT
EOF
      . $C_std_out
      #(エラーメッセージをセット)
      if [ -z "${L_status_err}" ]
      then
        L_status_err="${C_10061_msg}"
      else
        L_status_err="${L_status_err}\n${C_10061_msg}"
      fi
      #(更新処理:異常終了)
      shell_end ${L_status_err}
    fi
  done
}
# 2009/04/02 Ver.1.4 Masayuki.Sano add END
#ステータスエラー時のファイル削除処理(A-12)
file_delete()
{
  if [ -f ${1} ]
  then
    rm ${1}
    echo "Error if_file Delete"
    echo ""                      #空行
  fi
}

#変動必須メッセージ・終了ステータス値取得(A-13)
shell_end()
{
# 2009/03/19 Ver.1.3 Koji.Oomata mod START
  sqlplus -s ${C_ora_login} <<EOF >${C_std_out}  # 2009/04/02 Ver.1.4 Masayuki.Sano update
  SET HEADING OFF
  SET LINES 240
  SELECT 'L_00006_msg='''||xxccp_common_pkg.get_msg('${C_appl_name}','APP-XXCCP1-00006','REQ_ID','${L_exec_req_id}')||''''
        ,'L_00007_msg='''||xxccp_common_pkg.get_msg('${C_appl_name}','APP-XXCCP1-00007','REQ_ID','${L_succes_req_id}')||''''
        ,'L_00009_msg='''||xxccp_common_pkg.get_msg('${C_appl_name}','APP-XXCCP1-00009','REQ_ID','${L_error_req_id}')||''''
        ,'L_00020_msg='''||xxccp_common_pkg.get_msg('${C_appl_name}','APP-XXCCP1-00020','FILE_NAME','${L_file_nam_all}')||''''
        ,'L_90000_msg='''||xxccp_common_pkg.get_msg('${C_appl_name}','APP-XXCCP1-90000','COUNT','${L_target_cnt}')||''''
        ,'L_90001_msg='''||xxccp_common_pkg.get_msg('${C_appl_name}','APP-XXCCP1-90001','COUNT','${L_success_cnt}')||''''
        ,'L_90002_msg='''||xxccp_common_pkg.get_msg('${C_appl_name}','APP-XXCCP1-90002','COUNT','${L_error_cnt}')||''''
        ,'L_90004_msg='''||xxccp_common_pkg.get_msg('${C_appl_name}','APP-XXCCP1-90004')||''''
        ,'L_10008_msg='''||xxccp_common_pkg.get_msg('${C_appl_name}','APP-XXCCP1-10008')||''''
        ,'C_exit_norm='''||xxccp_common_pkg.set_status_normal||''''
        ,'C_exit_error='''||xxccp_common_pkg.set_status_error||''''
  FROM DUAL
  ;
  EXIT
EOF
# 2009/03/19 Ver.1.3 Koji.Oomata mod End
  . $C_std_out
  #必須項目レポート出力
  echo "${L_00006_msg}" >>`echo ${C_ofil}`     #起動対象要求IDメッセージ
  echo "${L_00007_msg}" >>`echo ${C_ofil}`     #正常終了要求IDメッセージ
  echo "${L_00009_msg}" >>`echo ${C_ofil}`     #エラー終了要求IDメッセージ
  echo "${L_00020_msg}" >>`echo ${C_ofil}`     #IFファイル名メッセージ
  echo ""  >>`echo ${C_ofil}`                  #空行
  #エラーメッセージ出力
  if [ -n "$1" ]
  then
    #レポート出力
    echo "${@}" >>`echo ${C_ofil}`             #エラーメッセージ
    echo ""  >>`echo ${C_ofil}`                #空行
    #ログ出力
    echo "${@}"                                #エラーメッセージ
    echo ""                                    #空行
  fi
  echo "${L_90000_msg}" >>`echo ${C_ofil}`     #対象件数メッセージ
  echo "${L_90001_msg}" >>`echo ${C_ofil}`     #成功件数メッセージ
  echo "${L_90002_msg}" >>`echo ${C_ofil}`     #エラー件数メッセージ
  echo ""  >>`echo ${C_ofil}`                  #空行
  #テンポラリファイルが存在したら削除する
  if [ -f ${C_std_out} ]
  then
    rm ${C_std_out}
    echo "Temporay file1 Delete"
  fi
  if [ -f ${C_std_out2} ]
  then
    rm ${C_std_out2}
    echo "Temporay file2 Delete"
  fi
# 2022/01/20 Ver.3.0 Shun.Takenami add START
  if [ -f ${C_std_out3} ]
  then
    rm ${C_std_out3}
    echo "Temporay file3 Delete"
  fi
  echo ""                      #空行
# 2022/01/20 Ver.3.0 Shun.Takenami add END
  #終了メッセージ
  if [ -z "$1" ]
  then
    echo "${L_90004_msg}" >>`echo ${C_ofil}`   #正常終了メッセージ
    exit ${C_exit_norm}
  else
    echo "${L_10008_msg}" >>`echo ${C_ofil}`   #エラー終了メッセージ
    exit ${C_exit_error}
  fi
}

################################################################################
##                                   Main                                     ##
################################################################################
#固定メッセージ・プロファイル値・コンカレントパラメータ数取得(A-1)
# 2009/03/19 Ver.1.3 Koji.Oomata mod START
sqlplus -s ${C_ora_login} <<EOF >>${C_std_out}  # 2009/04/02 Ver.1.4 Masayuki.Sano update
SET HEADING OFF
SET LINES 240
SELECT --固定出力メッセージ
       'C_00002_msg='''||xxccp_common_pkg.get_msg('${C_appl_name}','APP-XXCCP1-00002','AP_SHORT_NAME','${5}')||''''
      ,'C_00003_msg='''||xxccp_common_pkg.get_msg('${C_appl_name}','APP-XXCCP1-00003','CONC_SHORT_NAME','${6}')||''''
      ,'C_00010_msg='''||xxccp_common_pkg.get_msg('${C_appl_name}','APP-XXCCP1-00010','COOPE_DIV','${7}')||''''
      ,'C_00011_msg='''||xxccp_common_pkg.get_msg('${C_appl_name}','APP-XXCCP1-00011','SYSTEM_NAME','${8}')||''''
      ,'C_00012_msg='''||xxccp_common_pkg.get_msg('${C_appl_name}','APP-XXCCP1-00012','DATA_TYPE','${9}')||''''
      ,'C_00013_msg='''||xxccp_common_pkg.get_msg('${C_appl_name}','APP-XXCCP1-00013','GEN_NUM','${10}')||''''
      ,'C_00014_msg='''||xxccp_common_pkg.get_msg('${C_appl_name}','APP-XXCCP1-00014','SVF_NUM','${11}')||''''
      ,'C_00015_msg='''||xxccp_common_pkg.get_msg('${C_appl_name}','APP-XXCCP1-00015','EBS_BUSI_CODE','${12}')||''''
      ,'C_00016_msg='''||xxccp_common_pkg.get_msg('${C_appl_name}','APP-XXCCP1-00016','IF_BUSI_CODE','${13}')||''''
      ,'C_00017_msg='''||xxccp_common_pkg.get_msg('${C_appl_name}','APP-XXCCP1-00017','USER_NAME','${14}')||''''
      ,'C_00018_msg='''||xxccp_common_pkg.get_msg('${C_appl_name}','APP-XXCCP1-00018','RESP_APPL_NAME','${15}')||''''
      ,'C_00019_msg='''||xxccp_common_pkg.get_msg('${C_appl_name}','APP-XXCCP1-00019','RESP_NAME','${16}')||''''
      ,'C_10016_msg='''||xxccp_common_pkg.get_msg('${C_appl_name}','APP-XXCCP1-10016')||''''
      ,'C_10020_msg='''||xxccp_common_pkg.get_msg('${C_appl_name}','APP-XXCCP1-10020')||''''
      ,'C_10021_msg='''||xxccp_common_pkg.get_msg('${C_appl_name}','APP-XXCCP1-10021')||''''
      ,'C_10041_msg='''||xxccp_common_pkg.get_msg('${C_appl_name}','APP-XXCCP1-10041')||''''
      ,'C_10042_msg='''||xxccp_common_pkg.get_msg('${C_appl_name}','APP-XXCCP1-10042')||''''
      ,'C_10043_msg='''||xxccp_common_pkg.get_msg('${C_appl_name}','APP-XXCCP1-10043')||''''
      ,'C_10044_msg='''||xxccp_common_pkg.get_msg('${C_appl_name}','APP-XXCCP1-10044')||''''
      ,'C_10045_msg='''||xxccp_common_pkg.get_msg('${C_appl_name}','APP-XXCCP1-10045')||''''
      ,'C_10046_msg='''||xxccp_common_pkg.get_msg('${C_appl_name}','APP-XXCCP1-10046')||''''
      ,'C_10047_msg='''||xxccp_common_pkg.get_msg('${C_appl_name}','APP-XXCCP1-10047')||''''
      ,'C_10048_msg='''||xxccp_common_pkg.get_msg('${C_appl_name}','APP-XXCCP1-10048')||''''
      ,'C_10049_msg='''||xxccp_common_pkg.get_msg('${C_appl_name}','APP-XXCCP1-10049')||''''
      ,'C_00005_1_msg='''||xxccp_common_pkg.get_msg('${C_appl_name}','APP-XXCCP1-00005','NUMBER','1','PARAM_VALUE','${17}')||''''
      ,'C_00005_2_msg='''||xxccp_common_pkg.get_msg('${C_appl_name}','APP-XXCCP1-00005','NUMBER','2','PARAM_VALUE','${18}')||''''
      ,'C_00005_3_msg='''||xxccp_common_pkg.get_msg('${C_appl_name}','APP-XXCCP1-00005','NUMBER','3','PARAM_VALUE','${19}')||''''
      ,'C_00005_4_msg='''||xxccp_common_pkg.get_msg('${C_appl_name}','APP-XXCCP1-00005','NUMBER','4','PARAM_VALUE','${20}')||''''
      ,'C_00005_5_msg='''||xxccp_common_pkg.get_msg('${C_appl_name}','APP-XXCCP1-00005','NUMBER','5','PARAM_VALUE','${21}')||''''
      ,'C_00005_6_msg='''||xxccp_common_pkg.get_msg('${C_appl_name}','APP-XXCCP1-00005','NUMBER','6','PARAM_VALUE','${22}')||''''
      ,'C_00005_7_msg='''||xxccp_common_pkg.get_msg('${C_appl_name}','APP-XXCCP1-00005','NUMBER','7','PARAM_VALUE','${23}')||''''
      ,'C_00005_8_msg='''||xxccp_common_pkg.get_msg('${C_appl_name}','APP-XXCCP1-00005','NUMBER','8','PARAM_VALUE','${24}')||''''
      ,'C_00005_9_msg='''||xxccp_common_pkg.get_msg('${C_appl_name}','APP-XXCCP1-00005','NUMBER','9','PARAM_VALUE','${25}')||''''
      ,'C_00005_10_msg='''||xxccp_common_pkg.get_msg('${C_appl_name}','APP-XXCCP1-00005','NUMBER','10','PARAM_VALUE','${26}')||''''
      ,'C_00005_11_msg='''||xxccp_common_pkg.get_msg('${C_appl_name}','APP-XXCCP1-00005','NUMBER','11','PARAM_VALUE','${27}')||''''
      ,'C_00005_12_msg='''||xxccp_common_pkg.get_msg('${C_appl_name}','APP-XXCCP1-00005','NUMBER','12','PARAM_VALUE','${28}')||''''
      ,'C_00005_13_msg='''||xxccp_common_pkg.get_msg('${C_appl_name}','APP-XXCCP1-00005','NUMBER','13','PARAM_VALUE','${29}')||''''
      ,'C_00005_14_msg='''||xxccp_common_pkg.get_msg('${C_appl_name}','APP-XXCCP1-00005','NUMBER','14','PARAM_VALUE','${30}')||''''
      ,'C_00005_15_msg='''||xxccp_common_pkg.get_msg('${C_appl_name}','APP-XXCCP1-00005','NUMBER','15','PARAM_VALUE','${31}')||''''
      ,'C_00005_16_msg='''||xxccp_common_pkg.get_msg('${C_appl_name}','APP-XXCCP1-00005','NUMBER','16','PARAM_VALUE','${32}')||''''
      ,'C_00005_17_msg='''||xxccp_common_pkg.get_msg('${C_appl_name}','APP-XXCCP1-00005','NUMBER','17','PARAM_VALUE','${33}')||''''
      ,'C_00005_18_msg='''||xxccp_common_pkg.get_msg('${C_appl_name}','APP-XXCCP1-00005','NUMBER','18','PARAM_VALUE','${34}')||''''
      ,'C_00005_19_msg='''||xxccp_common_pkg.get_msg('${C_appl_name}','APP-XXCCP1-00005','NUMBER','19','PARAM_VALUE','${35}')||''''
      ,'C_00005_20_msg='''||xxccp_common_pkg.get_msg('${C_appl_name}','APP-XXCCP1-00005','NUMBER','20','PARAM_VALUE','${36}')||''''
      ,'C_00005_21_msg='''||xxccp_common_pkg.get_msg('${C_appl_name}','APP-XXCCP1-00005','NUMBER','21','PARAM_VALUE','${37}')||''''
      ,'C_00005_22_msg='''||xxccp_common_pkg.get_msg('${C_appl_name}','APP-XXCCP1-00005','NUMBER','22','PARAM_VALUE','${38}')||''''
      ,'C_00005_23_msg='''||xxccp_common_pkg.get_msg('${C_appl_name}','APP-XXCCP1-00005','NUMBER','23','PARAM_VALUE','${39}')||''''
      ,'C_00005_24_msg='''||xxccp_common_pkg.get_msg('${C_appl_name}','APP-XXCCP1-00005','NUMBER','24','PARAM_VALUE','${40}')||''''
      ,'C_00005_25_msg='''||xxccp_common_pkg.get_msg('${C_appl_name}','APP-XXCCP1-00005','NUMBER','25','PARAM_VALUE','${41}')||''''
      ,'C_00005_26_msg='''||xxccp_common_pkg.get_msg('${C_appl_name}','APP-XXCCP1-00005','NUMBER','26','PARAM_VALUE','${42}')||''''
      ,'C_00005_27_msg='''||xxccp_common_pkg.get_msg('${C_appl_name}','APP-XXCCP1-00005','NUMBER','27','PARAM_VALUE','${43}')||''''
      ,'C_00005_28_msg='''||xxccp_common_pkg.get_msg('${C_appl_name}','APP-XXCCP1-00005','NUMBER','28','PARAM_VALUE','${44}')||''''
      ,'C_00005_29_msg='''||xxccp_common_pkg.get_msg('${C_appl_name}','APP-XXCCP1-00005','NUMBER','29','PARAM_VALUE','${45}')||''''
      ,'C_00005_30_msg='''||xxccp_common_pkg.get_msg('${C_appl_name}','APP-XXCCP1-00005','NUMBER','30','PARAM_VALUE','${46}')||''''
      --プロファイル
      ,'C_ouput_request_id='''||FND_PROFILE.VALUE('${C_prof_request_id}')||''''
      ,'C_concurrent_name='''||FND_PROFILE.VALUE('${C_prof_concurrent_name}')||''''
      ,'C_user_name='''||FND_PROFILE.VALUE('${C_prof_user_name}')||''''
      ,'C_resp_name='''||FND_PROFILE.VALUE('${C_prof_resp_name}')||''''
      ,'C_actual_start_date='''||FND_PROFILE.VALUE('${C_prof_actual_start_date}')||''''
      ,'C_nas_main_dir='''||FND_PROFILE.VALUE('${C_prof_nas_main_dir}')||''''
      ,'C_san_main_dir='''||FND_PROFILE.VALUE('${C_prof_san_main_dir}')||''''
      ,'C_edi_que='''||FND_PROFILE.VALUE('${C_prof_edi_que}')||''''
      ,'C_edi_host='''||FND_PROFILE.VALUE('${C_prof_edi_host}')||''''
      ,'C_report_que1='''||FND_PROFILE.VALUE('${C_prof_report_que1}')||''''
      ,'C_report_que2='''||FND_PROFILE.VALUE('${C_prof_report_que2}')||''''
      ,'C_report_que3='''||FND_PROFILE.VALUE('${C_prof_report_que3}')||''''
      ,'C_report_host1='''||FND_PROFILE.VALUE('${C_prof_report_host1}')||''''
      ,'C_report_host2='''||FND_PROFILE.VALUE('${C_prof_report_host2}')||''''
      ,'C_report_host3='''||FND_PROFILE.VALUE('${C_prof_report_host3}')||''''
-- 2009/04/02 Ver.1.4 Masayuki.Sano Delete Start
--      ,'C_status_max='''||FND_PROFILE.VALUE('${C_prof_status_max}')||''''
--      ,'C_status_interval='''||FND_PROFILE.VALUE('${C_prof_status_interval}')||''''
-- 2009/04/02 Ver.1.4 Masayuki.Sano Delete End
      ,'C_if_file_1place='''||FND_PROFILE.VALUE('${C_prof_if_file_1place}')||''''
      ,'C_if_file_6place='''||FND_PROFILE.VALUE('${C_prof_if_file_6place}')||''''
      ,'C_edi_job_gr_comm='''||FND_PROFILE.VALUE('${C_prof_edi_job_gr_comm}')||''''
      ,'C_edi_job_gr_21='''||FND_PROFILE.VALUE('${C_prof_edi_job_gr_21}')||''''
      ,'C_edi_job_gr_22='''||FND_PROFILE.VALUE('${C_prof_edi_job_gr_22}')||''''
      ,'C_rep_job_gr_comm='''||FND_PROFILE.VALUE('${C_prof_report_job_gr_comm}')||''''
      ,'C_rep_job_gr_last='''||FND_PROFILE.VALUE('${C_prof_report_job_gr_last}')||''''
-- 2009/04/02 Ver.1.4 Masayuki.Sano Delete Start
--      ,'C_jobnet_last='''||FND_PROFILE.VALUE('${C_prof_jobnet_last}')||''''
-- 2009/04/02 Ver.1.4 Masayuki.Sano Delete End
      ,'C_request_char='''||FND_PROFILE.VALUE('${C_prof_request_char}')||''''
      ,'C_edi_serv='''||FND_PROFILE.VALUE('${C_prof_edi_serv}')||''''
      ,'C_report_serv='''||FND_PROFILE.VALUE('${C_prof_report_serv}')||''''
      ,'C_sts_updt_path='''||FND_PROFILE.VALUE('${C_prof_sts_updt_path}')||''''
      ,'C_edi_esc_bk_num='''||FND_PROFILE.VALUE('${C_prof_edi_esc_bk_num}')||''''
      ,'C_report_esc_bk_num='''||FND_PROFILE.VALUE('${C_prof_report_esc_bk_num}')||''''
-- 2009/04/02 Ver.1.4 Masayuki.Sano ADD Start
      ,'C_edi_status_max='''||FND_PROFILE.VALUE('${C_prof_edi_status_max}')||''''
      ,'C_edi_status_interval='''||FND_PROFILE.VALUE('${C_prof_edi_status_interval}')||''''
      ,'C_edi_jobnet_last='''||FND_PROFILE.VALUE('${C_prof_edi_jobnet_last}')||''''
      ,'C_rep_status_max='''||FND_PROFILE.VALUE('${C_prof_rep_status_max}')||''''
      ,'C_rep_status_interval='''||FND_PROFILE.VALUE('${C_prof_rep_status_interval}')||''''
      ,'C_rep_jobnet_last='''||FND_PROFILE.VALUE('${C_prof_rep_jobnet_last}')||''''
-- 2009/04/02 Ver.1.4 Masayuki.Sano ADD End
-- 2009/08/27 Ver.1.8 Masayuki.Sano add Start
      ,'C_copyshell_path='''||FND_PROFILE.VALUE('${C_prof_copyshell_path}')||''''
      ,'C_delshell_path='''||FND_PROFILE.VALUE('${C_prof_delshell_path}')||''''
-- 2009/08/27 Ver.1.8 Masayuki.Sano add End
-- 2009/10/26 Ver.1.10 Masayuki.Sano ADD Start
      ,'C_iffile_chk_max_wait='''||FND_PROFILE.VALUE('${C_prof_iffile_chk_max_wait}')||''''
      ,'C_iffile_chk_interval='''||FND_PROFILE.VALUE('${C_prof_iffile_chk_interval}')||''''
-- 2009/10/26 Ver.1.10 Masayuki.Sano ADD End
      --WHOカラム値
      ,'C_requested_by='''||fcr.requested_by||''''                                    --要求者(USER_ID)
      ,'C_last_update_login='''||fcr.conc_login_id||''''                              --最終更新ログイン(LOGIN_ID)
      ,'C_program_application_id='''||fcr.program_application_id||''''                --コンカレント・アプリケーションID
      ,'C_concurrent_program_id='''||fcr.concurrent_program_id||''''                  --コンカレント・プログラムID
FROM  dual
     ,fnd_concurrent_requests fcr
WHERE fcr.request_id = TO_NUMBER('${C_request_id}')
;
SELECT 'C_application_id='''||NVL(fdfc.application_id,-1)||''''
      ,'C_flexfield_name='''||NVL(fdfc.descriptive_flexfield_name,-1)||''''
      ,'C_para_count='''||count(*)||''''
FROM   fnd_concurrent_programs_vl  fcpv
      ,fnd_descr_flex_col_usage_vl fdfc
      ,fnd_application_vl          fav
where  fav.application_short_name = '$5'
and    fav.application_id = fcpv.application_id
and    fcpv.concurrent_program_name = '$6'
and    fcpv.application_id          = fdfc.application_id(+)
and    fdfc.descriptive_flexfield_name(+) = '${C_field_name}' || fcpv.concurrent_program_name
and    fdfc.enabled_flag(+) = 'Y'
group by fdfc.application_id,
         fdfc.descriptive_flexfield_name
;
EXIT
EOF

# 2009/03/19 Ver.1.3 Koji.Oomata mod End
#SQL結果読み込み処理
. $C_std_out

#読み込んだ固定出力メッセージをレポート出力(A-13)
echo "${C_ouput_request_id}${C_collon}${4}" >>`echo ${C_ofil}`               #要求ID
echo "${C_concurrent_name}${C_collon}${C_program_id}" >>`echo ${C_ofil}`     #コンカレント名
echo "${C_user_name}${C_collon}${14}" >>`echo ${C_ofil}`                     #ユーザー名
echo "${C_resp_name}${C_collon}${16}" >>`echo ${C_ofil}`                     #職責名
echo "${C_actual_start_date}${C_collon}${C_date}"  >>`echo ${C_ofil}`        #起動時間

echo ""  >>`echo ${C_ofil}`                      #空行

#パラメータ情報出力
#レポート出力
echo "${C_00002_msg}" >>`echo ${C_ofil}`         #起動対象アプリケーション短縮名
echo "${C_00003_msg}" >>`echo ${C_ofil}`         #起動対象コンカレント短縮名
echo "${C_00010_msg}" >>`echo ${C_ofil}`         #連携区分
echo "${C_00011_msg}" >>`echo ${C_ofil}`         #IF連携先システム名
echo "${C_00012_msg}" >>`echo ${C_ofil}`         #データ種コード
echo "${C_00013_msg}" >>`echo ${C_ofil}`         #バックアップ世代数
echo "${C_00014_msg}" >>`echo ${C_ofil}`         #SVFサーバNo
echo "${C_00015_msg}" >>`echo ${C_ofil}`         #EBS側業務系列コード
echo "${C_00016_msg}" >>`echo ${C_ofil}`         #対向システム側業務系列コード
echo "${C_00017_msg}" >>`echo ${C_ofil}`         #ユーザ名
echo "${C_00018_msg}" >>`echo ${C_ofil}`         #職責アプリケーション短縮名
echo "${C_00019_msg}" >>`echo ${C_ofil}`         #職責名
echo "${C_00005_1_msg}" >>`echo ${C_ofil}`       #引数1
echo "${C_00005_2_msg}" >>`echo ${C_ofil}`       #引数2
echo "${C_00005_3_msg}" >>`echo ${C_ofil}`       #引数3
echo "${C_00005_4_msg}" >>`echo ${C_ofil}`       #引数4
echo "${C_00005_5_msg}" >>`echo ${C_ofil}`       #引数5
echo "${C_00005_6_msg}" >>`echo ${C_ofil}`       #引数6
echo "${C_00005_7_msg}" >>`echo ${C_ofil}`       #引数7
echo "${C_00005_8_msg}" >>`echo ${C_ofil}`       #引数8
echo "${C_00005_9_msg}" >>`echo ${C_ofil}`       #引数9
echo "${C_00005_10_msg}" >>`echo ${C_ofil}`      #引数10
echo "${C_00005_11_msg}" >>`echo ${C_ofil}`      #引数11
echo "${C_00005_12_msg}" >>`echo ${C_ofil}`      #引数12
echo "${C_00005_13_msg}" >>`echo ${C_ofil}`      #引数13
echo "${C_00005_14_msg}" >>`echo ${C_ofil}`      #引数14
echo "${C_00005_15_msg}" >>`echo ${C_ofil}`      #引数15
echo "${C_00005_16_msg}" >>`echo ${C_ofil}`      #引数16
echo "${C_00005_17_msg}" >>`echo ${C_ofil}`      #引数17
echo "${C_00005_18_msg}" >>`echo ${C_ofil}`      #引数18
echo "${C_00005_19_msg}" >>`echo ${C_ofil}`      #引数19
echo "${C_00005_20_msg}" >>`echo ${C_ofil}`      #引数20
echo "${C_00005_21_msg}" >>`echo ${C_ofil}`      #引数21
echo "${C_00005_22_msg}" >>`echo ${C_ofil}`      #引数22
echo "${C_00005_23_msg}" >>`echo ${C_ofil}`      #引数23
echo "${C_00005_24_msg}" >>`echo ${C_ofil}`      #引数24
echo "${C_00005_25_msg}" >>`echo ${C_ofil}`      #引数25
echo "${C_00005_26_msg}" >>`echo ${C_ofil}`      #引数26
echo "${C_00005_27_msg}" >>`echo ${C_ofil}`      #引数27
echo "${C_00005_28_msg}" >>`echo ${C_ofil}`      #引数28
echo "${C_00005_29_msg}" >>`echo ${C_ofil}`      #引数29
echo "${C_00005_30_msg}" >>`echo ${C_ofil}`      #引数30

echo ""  >>`echo ${C_ofil}`                      #空行

#ログ出力
echo "Concurrent Parameter LogOutput Start"
echo "${C_00002_msg}"          #起動対象アプリケーション短縮名
echo "${C_00003_msg}"          #起動対象コンカレント短縮名
echo "${C_00010_msg}"          #連携区分
echo "${C_00011_msg}"          #IF連携先システム名
echo "${C_00012_msg}"          #データ種コード
echo "${C_00013_msg}"          #バックアップ世代数
echo "${C_00014_msg}"          #SVFサーバNo
echo "${C_00015_msg}"          #EBS側業務系列コード
echo "${C_00016_msg}"          #対向システム側業務系列コード
echo "${C_00017_msg}"          #ユーザ名
echo "${C_00018_msg}"          #職責アプリケーション短縮名
echo "${C_00019_msg}"          #職責名
echo "${C_00005_1_msg}"        #引数1
echo "${C_00005_2_msg}"        #引数2
echo "${C_00005_3_msg}"        #引数3
echo "${C_00005_4_msg}"        #引数4
echo "${C_00005_5_msg}"        #引数5
echo "${C_00005_6_msg}"        #引数6
echo "${C_00005_7_msg}"        #引数7
echo "${C_00005_8_msg}"        #引数8
echo "${C_00005_9_msg}"        #引数9
echo "${C_00005_10_msg}"       #引数10
echo "${C_00005_11_msg}"       #引数11
echo "${C_00005_12_msg}"       #引数12
echo "${C_00005_13_msg}"       #引数13
echo "${C_00005_14_msg}"       #引数14
echo "${C_00005_15_msg}"       #引数15
echo "${C_00005_16_msg}"       #引数16
echo "${C_00005_17_msg}"       #引数17
echo "${C_00005_18_msg}"       #引数18
echo "${C_00005_19_msg}"       #引数19
echo "${C_00005_20_msg}"       #引数20
echo "${C_00005_21_msg}"       #引数21
echo "${C_00005_22_msg}"       #引数22
echo "${C_00005_23_msg}"       #引数23
echo "${C_00005_24_msg}"       #引数24
echo "${C_00005_25_msg}"       #引数25
echo "${C_00005_26_msg}"       #引数26
echo "${C_00005_27_msg}"       #引数27
echo "${C_00005_28_msg}"       #引数28
echo "${C_00005_29_msg}"       #引数29
echo "${C_00005_30_msg}"       #引数30
echo "Concurrent Parameter LogOutput End"

echo ""                        #空行

#起動対象コンカレントのパラメータ数判定
if [ "${C_application_id}" = -1 ] && [ "${C_flexfield_name}" = -1 ]
then
  L_para_count=0
else
  L_para_count=${C_para_count}
fi

#必須チェック(A-1)
#入力パラメータ
#起動対象アプリケーション短縮名
if [ -z "${5}" ]
then
  shell_end "${C_10020_msg}"
fi
#起動対象コンカレント短縮名
if [ -z "${6}" ]
then
  shell_end "${C_10021_msg}"
fi
#連携区分
if [ -z "${7}" ]
then
  shell_end "${C_10041_msg}"
fi
#IF連携先システム名
case ${8} in
EDI)
  #処理なし
  ;;
REPORT)
  #処理なし
  ;;
*)
# 2009/03/19 Ver.1.3 Koji.Oomata mod START
  sqlplus -s ${C_ora_login} <<EOF >>${C_std_out}  # 2009/04/02 Ver.1.4 Masayuki.Sano update
  SET HEADING OFF
  SET LINES 240
  SELECT 'C_10039_msg='''||xxccp_common_pkg.get_msg('${C_appl_name}','APP-XXCCP1-10039')||''''
  FROM DUAL
  ;
  EXIT
EOF
# 2009/03/19 Ver.1.3 Koji.Oomata mod End
  . $C_std_out
  #エラーメッセージ出力
  shell_end "${C_10039_msg}"
  ;;
esac
#データ種コード
if [ -z "${9}" ]
then
  shell_end "${C_10042_msg}"
fi
#バックアップ世代数
if [ -z "${10}" ]
then
  shell_end "${C_10043_msg}"
fi
#SVFサーバNo
if [ "${8}" = 'REPORT' ]
then
  if [ -z "${11}" ]
  then
    shell_end "${C_10044_msg}"
  fi
fi
#EBS側業務系列コード
if [ -z "${12}" ]
then
  shell_end "${C_10045_msg}"
fi
#対向システム側業務系列コード
if [ -z "${13}" ]
then
  shell_end "${C_10046_msg}"
fi
#ユーザ名
if [ -z "${14}" ]
then
  shell_end "${C_10047_msg}"
fi
#職責アプリケーション短縮名
if [ -z "${15}" ]
then
  shell_end "${C_10048_msg}"
fi
#職責名
if [ -z "${16}" ]
then
  shell_end "${C_10049_msg}"
fi

#プロファイル
#XXCCP:出力用_要求ID
if [ -z "${C_ouput_request_id}" ]
then
  shell_end "${C_10016_msg}( ${C_prof_request_id} )"
fi
#XXCCP:出力用_コンカレント名
if [ -z "${C_concurrent_name}" ]
then
  shell_end "${C_10016_msg}( ${C_prof_concurrent_name} )"
fi
#XXCCP:出力用_ユーザー名
if [ -z "${C_user_name}" ]
then
  shell_end "${C_10016_msg}( ${C_prof_user_name} )"
fi
#XXCCP:出力用_職責名
if [ -z "${C_resp_name}" ]
then
  shell_end "${C_10016_msg}( ${C_prof_resp_name} )"
fi
#XXCCP:出力用_起動時間
if [ -z "${C_actual_start_date}" ]
then
  shell_end "${C_10016_msg}( ${C_prof_actual_start_date} )"
fi
#XXCCP:NASメインディレクトリ
if [ -z "${C_nas_main_dir}" ]
then
  shell_end "${C_10016_msg}( ${C_prof_nas_main_dir} )"
fi
#XXCCP:SANメインディレクトリ
if [ -z "${C_san_main_dir}" ]
then
  shell_end "${C_10016_msg}( ${C_prof_san_main_dir} )"
fi
#XXCCP:EDIキュー名
if [ -z "${C_edi_que}" ]
then
  shell_end "${C_10016_msg}( ${C_prof_edi_que} )"
fi
#XXCCP:EDI実行先ホスト名
if [ -z "${C_edi_host}" ]
then
  shell_end "${C_10016_msg}( ${C_prof_edi_host} )"
fi
#XXCCP:帳票キュー名1
if [ -z "${C_report_que1}" ]
then
  shell_end "${C_10016_msg}( ${C_prof_report_que1} )"
fi
#XXCCP:帳票キュー名2
if [ -z "${C_report_que2}" ]
then
  shell_end "${C_10016_msg}( ${C_prof_report_que2} )"
fi
#XXCCP:帳票キュー名3
if [ -z "${C_report_que3}" ]
then
  shell_end "${C_10016_msg}( ${C_prof_report_que3} )"
fi
#XXCCP:帳票実行先ホスト名1
if [ -z "${C_report_host1}" ]
then
  shell_end "${C_10016_msg}( ${C_prof_report_host1} )"
fi
#XXCCP:帳票実行先ホスト名2
if [ -z "${C_report_host2}" ]
then
  shell_end "${C_10016_msg}( ${C_prof_report_host2} )"
fi
#XXCCP:帳票実行先ホスト名3
if [ -z "${C_report_host3}" ]
then
  shell_end "${C_10016_msg}( ${C_prof_report_host3} )"
fi
#XXCCP:帳票実行先ホスト名3
if [ -z "${C_report_host3}" ]
then
  shell_end "${C_10016_msg}( ${C_prof_report_host3} )"
fi
# 2009/04/02 Ver.1.4 Masayuki.Sano delete START
##XXCCP:監視最大時間
#if [ -z "${C_status_max}" ]
#then
#  shell_end "${C_10016_msg}( ${C_prof_status_max} )"
#fi
##XXCCP:監視間隔時間
#if [ -z "${C_status_interval}" ]
#then
#  shell_end "${C_10016_msg}( ${C_prof_status_interval} )"
#fi
## 2009/04/02 Ver.1.4 Masayuki.Sano delete END
#XXCCP:環境値
if [ -z "${C_if_file_1place}" ]
then
  shell_end "${C_10016_msg}( ${C_prof_if_file_1place} )"
fi
#XXCCP:区分値
if [ -z "${C_if_file_6place}" ]
then
  shell_end "${C_10016_msg}( ${C_prof_if_file_6place} )"
fi
#XXCCP:EDIジョブグループ名(共通)
if [ -z "${C_edi_job_gr_comm}" ]
then
  shell_end "${C_10016_msg}( ${C_prof_edi_job_gr_comm} )"
fi
#XXCCP:EDIジョブグループ名(21)
if [ -z "${C_edi_job_gr_21}" ]
then
  shell_end "${C_10016_msg}( ${C_prof_edi_job_gr_21} )"
fi
#XXCCP:EDIジョブグループ名(22)
if [ -z "${C_edi_job_gr_22}" ]
then
  shell_end "${C_10016_msg}( ${C_prof_edi_job_gr_22} )"
fi
#XXCCP:帳票ジョブグループ名(共通)
if [ -z "${C_rep_job_gr_comm}" ]
then
  shell_end "${C_10016_msg}( ${C_prof_report_job_gr_comm} )"
fi
#XXCCP:帳票ジョブグループ名(末尾)
if [ -z "${C_rep_job_gr_last}" ]
then
  shell_end "${C_10016_msg}( ${C_prof_report_job_gr_last} )"
fi
# 2009/04/02 Ver.1.4 Masayuki.Sano delete START
#XXCCP:ジョブネット名(末尾)
#if [ -z "${C_jobnet_last}" ]
#then
#  shell_end "${C_10016_msg}( ${C_prof_jobnet_last} )"
#fi
# 2009/04/02 Ver.1.4 Masayuki.Sano delete END
#XXCCP:要求ID取得用
if [ -z "${C_request_char}" ]
then
  shell_end "${C_10016_msg}( ${C_prof_request_char} )"
fi
#XXCCP:EDIスケジューラサービス名
if [ -z "${C_edi_serv}" ]
then
  shell_end "${C_10016_msg}( ${C_prof_edi_serv} )"
fi
#XXCCP:帳票スケジューラサービス名
if [ -z "${C_report_serv}" ]
then
  shell_end "${C_10016_msg}( ${C_prof_report_serv} )"
fi
#XXCCP:ステータス更新シェル格納場所
if [ -z "${C_sts_updt_path}" ]
then
  shell_end "${C_10016_msg}( ${C_prof_sts_updt_path} )"
fi
# 2009/02/25 Ver.1.2 Koji.Oomata add START
#XXCCP:画面起動ジョブネット用EDI退避世代数
if [ -z "${C_edi_esc_bk_num}" ]
then
  shell_end "${C_10016_msg}( ${C_prof_edi_esc_bk_num} )"
fi
#XXCCP:画面起動ジョブネット用帳票退避世代数
if [ -z "${C_report_esc_bk_num}" ]
then
  shell_end "${C_10016_msg}( ${C_prof_report_esc_bk_num} )"
fi
# 2009/02/25 Ver.1.2 Koji.Oomata add END
# 2009/04/02 Ver.1.4 Masayuki.Sano add START
#XXCCP:EDI監視最大時間
if [ -z "${C_edi_status_max}" ]
then
  shell_end "${C_10016_msg}( ${C_prof_edi_status_max} )"
fi
#XXCCP:EDI監視間隔時間
if [ -z "${C_edi_status_interval}" ]
then
  shell_end "${C_10016_msg}( ${C_prof_edi_status_interval} )"
fi
#XXCCP:EDIジョブネット名(末尾)
if [ -z "${C_edi_jobnet_last}" ]
then
  shell_end "${C_10016_msg}( ${C_prof_edi_jobnet_last} )"
fi
#XXCCP:帳票監視最大時間
if [ -z "${C_rep_status_max}" ]
then
  shell_end "${C_10016_msg}( ${C_prof_rep_status_max} )"
fi
#XXCCP:帳票監視間隔時間
if [ -z "${C_rep_status_interval}" ]
then
  shell_end "${C_10016_msg}( ${C_prof_rep_status_interval} )"
fi
#XXCCP:帳票ジョブネット名(末尾)
if [ -z "${C_rep_jobnet_last}" ]
then
  shell_end "${C_10016_msg}( ${C_prof_rep_jobnet_last} )"
fi
# 2009/04/02 Ver.1.4 Masayuki.Sano add END
# 2009/08/27 Ver1.8 Masayuki.Sano add Start
#XXCCP:IFファイルコピーシェルパス
if [ -z "${C_copyshell_path}" ]
then
  shell_end "${C_10016_msg}( ${C_prof_copyshell_path} )"
fi
#XXCCP:IFファイル削除シェルパス
if [ -z "${C_delshell_path}" ]
then
  shell_end "${C_10016_msg}( ${C_prof_delshell_path} )"
fi
# 2009/08/27 Ver1.8 Masayuki.Sano add End
# 2009/10/26 Ver.1.10 Masayuki.Sano ADD Start
#XXCCP:起動中IFファイル監視最大時間
if [ -z "${C_iffile_chk_max_wait}" ]
then
  shell_end "${C_10016_msg}( ${C_prof_iffile_chk_max_wait} )"
fi
#XXCCP:起動中IFファイル監視間隔時間
if [ -z "${C_iffile_chk_interval}" ]
then
  shell_end "${C_10016_msg}( ${C_prof_iffile_chk_interval} )"
fi
# 2009/10/26 Ver.1.10 Masayuki.Sano ADD End

#ディレクトリ情報取得(A-2)
#業務系列コードを小文字変換
L_ebs_code=`echo ${12} | tr "[:upper:]" "[:lower:]"`
L_part_code=`echo ${13} | tr "[:upper:]" "[:lower:]"`
#IFファイル移動元ディレクトリ
L_if_mov_from="${C_nas_main_dir}/outbound/${L_ebs_code}_iffile/${L_part_code}"
#IFファイル移動先ディレクトリ
L_if_mov_to="${C_san_main_dir}/outbound/${L_ebs_code}_iffile/${L_part_code}"
#IFファイルバックアップ先ディレクトリ
L_if_bkup_to="${C_nas_main_dir}/outbound/${L_ebs_code}_iffile/${L_part_code}/backup"
#IFファイル退避先ディレクトリ
L_if_esc_to="${C_nas_main_dir}/outbound/${L_ebs_code}_iffile/${L_part_code}/escape"
# 2009/02/25 Ver.1.2 Koji.Oomata add START
#退避世代数
if [ "${8}" = 'EDI' ]
then
  L_esc_bk_num=${C_edi_esc_bk_num}
elif [ "${8}" = 'REPORT' ]
then
  L_esc_bk_num=${C_report_esc_bk_num}
fi
# 2009/02/25 Ver.1.2 Koji.Oomata add END

#入力項目：連携区分の数だけループ処理開始
loop_cnt=1
while test ${7} -ge ${loop_cnt}
do
  #ファイル名算出処理(A-3)
  #連携先がEDIシステムの場合
  if [ "${8}" = 'EDI' ]
  then
    #ファイル名(拡張子なし)
    L_file_nam_pre="${C_if_file_1place}${12}${13}${C_if_file_6place}${19}-${9}${20}"
    #ファイル名
    L_file_nam="${L_file_nam_pre}.txt"
  #連携先が帳票システムの場合
  else
    #帳票コード(引数3)を半角スペース区切りで、分割
    L_report_code=`echo ${19} | cut -d " " -f ${loop_cnt}`
    #ファイル名(拡張子なし)
    L_file_nam_pre="${C_if_file_1place}${12}${13}${C_if_file_6place}${18}-${9}-${L_report_code}"
    #ファイル名
    L_file_nam="${L_file_nam_pre}.csv"
  fi
  #移動元ファイル名(ディレクトリ付き)
  L_file_dir="${L_if_mov_from}/${L_file_nam}"
  #移動先ファイル名(ディレクトリ付き)
  L_file_dir_to="${L_if_mov_to}/${L_file_nam}"

  #出力用変数にファイル名を格納
  if [ -z "${L_file_nam_all}" ]
  then
    #ファイル名(拡張子なし)
    L_file_nam_pre_all="${L_file_nam_pre}"
    #ファイル名
    L_file_nam_all="${L_file_nam}"
    #ファイル名(ディレクトリ付き)
    L_file_dir_all="${L_file_dir}"
  else
    #ファイル名(拡張子なし)
    L_file_nam_pre_all="${L_file_nam_pre_all} ${L_file_nam_pre}"
    #ファイル名
    L_file_nam_all="${L_file_nam_all} ${L_file_nam}"
    #ファイル名(ディレクトリ付き)
    L_file_dir_all="${L_file_dir_all} ${L_file_dir}"
  fi

# 2009/10/26 Ver.1.10 Masayuki.Sano del Start
#  #ファイル存在チェック(A-4)
## 2009/08/27 Ver1.8 Masayuki.Sano del Start
##  if [ -f ${L_file_dir_to} ]
##  then
### 2009/03/19 Ver.1.3 Koji.Oomata mod START
##    sqlplus -s ${C_ora_login} <<EOF >>${C_std_out}  # 2009/04/02 Ver.1.4 Masayuki.Sano update
##    SET HEADING OFF
##    SET LINES 240
##-- 2009/06/03 Ver.1.6 Masayuki.Sano mod START
##--    SELECT 'C_10010_msg='''||xxccp_common_pkg.get_msg('${C_appl_name}','APP-XXCCP1-10010','FILE_NAME','${L_file_dir_to}')||''''
##    SELECT 'C_10010_msg='''||xxccp_common_pkg.get_msg('${C_appl_name}','APP-XXCCP1-10010','FILE_NAME','${L_file_nam}')||''''
##-- 2009/06/03 Ver.1.6 Masayuki.Sano mod END
##    FROM DUAL
##    ;
##    EXIT
##EOF
### 2009/03/19 Ver.1.3 Koji.Oomata mod End
##    . $C_std_out
##    if [ -z "${L_status_err}" ]
##    then
##      L_status_err="${C_10010_msg}"
##    else
##      L_status_err="${L_status_err}\n${C_10010_msg}"
##    fi
### 2009/04/02 Ver.1.4 Masayuki.Sano add START
##  # ※ ファイルが存在しない場合、下記チェック処理を実行する。
##  else
## 2009/08/27 Ver1.8 Masayuki.Sano del End
#  #A-4．多重制御ステータス確認
#  #[ 同一ファイルでジョブ状況ステータスが'実行中'であるものを抽出]
#  sqlplus -s ${C_ora_login} <<EOF >>${C_std_out}  # 2009/04/02 Ver.1.4 Masayuki.Sano update
#  SET HEADING OFF
#  SET LINES 240
#  SELECT 'L_cnt=''' || COUNT(1) || ''''
#  FROM   xxccp_if_job_status xijs
#  WHERE  xijs.if_system_name = '${8}'          -- IF連携システム名
#  AND    xijs.if_file_name   = '${L_file_nam}' -- ファイル名
#  AND    xijs.job_process    = 'R'             -- 実行中
#  ;
#  EXIT
#EOF
#  . ${C_std_out}
#  #[ 取得できた件数が0件以外の場合、エラーメッセージセット]
#  if [ "${L_cnt}" != "0" ]
#  then
#    # 実行中ステータス確認エラーメッセージを取得
#    sqlplus -s ${C_ora_login} <<EOF >>${C_std_out}
#    SET HEADING OFF
#    SET LINES 240
#    SELECT 'C_10062_msg='''||xxccp_common_pkg.get_msg('${C_appl_name}'
#                                                     ,'APP-XXCCP1-10062'
#                                                     ,'FILE_NAME'
#-- 2009/06/03 Ver.1.6 Masayuki.Sano mod START
#--                                                      ,'${L_file_dir_to}')||''''
#                                                    ,'${L_file_nam}')||''''
#-- 2009/06/03 Ver.1.6 Masayuki.Sano mod END
#    FROM DUAL
#    ;
#    EXIT
#EOF
#    . $C_std_out
#    # エラーメッセージにセット
#    if [ -z "${L_status_err}" ]
#    then
#      L_status_err="${C_10062_msg}"
#    else
#      L_status_err="${L_status_err}\n${C_10062_msg}"
#    fi
#  fi
## 2009/04/02 Ver.1.4 Masayuki.Sano add END
## 2009/08/27 Ver1.8 del Masayuki.Sano Start
##  fi
## 2009/08/27 Ver1.8 del Masayuki.Sano End
# 2009/10/26 Ver.1.10 Masayuki.Sano del End

  #ループカウント +1
  loop_cnt=`expr $loop_cnt + 1`
done

#エラーメッセージ出力
if [ -n "${L_status_err}" ]
then
  shell_end ${L_status_err}
fi

# 2009/04/02 Ver.1.4 Masayuki.Sano add START
#==============================================================================
#A-14.ステータス初期データ作成処理
#==============================================================================
L_if_job_status_id_all=""
loop_cnt=1
while test ${7} -ge ${loop_cnt}
do
  #対象ファイル名(ディレクトリ無し)
  L_file_nam=`printf "$L_file_nam_all" | cut -d " " -f $loop_cnt`
  #① シーケンスを実行して、IDを取得する
  sqlplus -s ${C_ora_login} <<EOF >>${C_std_out}
  SET HEADING OFF
  SET LINES 240
  SELECT 'L_if_job_status_id=''' || xxccp_if_job_status_s01.nextval || ''''
  FROM   DUAL
  ;
  EXIT
EOF
  . ${C_std_out}
  #② データを作成する。
  sqlplus -s ${C_ora_login} <<EOF >${C_std_out2}
    WHENEVER OSERROR EXIT FAILURE ROLLBACK
    WHENEVER SQLERROR EXIT FAILURE ROLLBACK
    -- 挿入
    INSERT INTO xxccp_if_job_status(
       if_job_status_id
      ,request_id_val
      ,exec_request_id
      ,status_code
      ,if_system_name
      ,if_file_name
      ,jobnet_name
      ,first_request_id
      ,job_process
      ,created_by
      ,creation_date
      ,last_updated_by
      ,last_update_date
      ,last_update_login
      ,request_id
      ,program_application_id
      ,program_id
      ,program_update_date
    ) VALUES (
       '${L_if_job_status_id}'
      ,NULL
      ,NULL
      ,'i'
      ,'${8}'
      ,'${L_file_nam}'
      ,NULL
      ,TO_NUMBER('${C_request_id}')
      ,'R'
      ,TO_NUMBER('${C_requested_by}')
-- 2009/10/26 Ver.1.10 Masayuki.Sano mod Start
--      ,TO_DATE('${C_date2}','YYYYMMDDHH24MISS')
      ,SYSDATE
-- 2009/10/26 Ver.1.10 Masayuki.Sano mod End
      ,TO_NUMBER('${C_requested_by}')
-- 2009/10/26 Ver.1.10 Masayuki.Sano mod Start
--      ,TO_DATE('${C_date2}','YYYYMMDDHH24MISS')
      ,SYSDATE
-- 2009/10/26 Ver.1.10 Masayuki.Sano mod End
      ,TO_NUMBER('${C_last_update_login}')
      ,TO_NUMBER('${C_request_id}')
      ,TO_NUMBER('${C_program_application_id}')
      ,TO_NUMBER('${C_concurrent_program_id}')
-- 2009/10/26 Ver.1.10 Masayuki.Sano mod Start
--      ,TO_DATE('${C_date2}','YYYYMMDDHH24MISS')
      ,SYSDATE
-- 2009/10/26 Ver.1.10 Masayuki.Sano mod End
    );
    EXIT SUCCESS COMMIT
EOF
  L_return=${?}
  # ■ エラーチェック
  if [ ${L_return} -ne 0 ]
  then
    #(SQLを実行し、メッセージを取得する。)
    sqlplus -s ${C_ora_login} <<EOF >>${C_std_out}
    SET HEADING OFF
    SET LINES 240
    SELECT 'C_10060_msg=''' || xxccp_common_pkg.get_msg('${C_appl_name}'
                                                       ,'APP-XXCCP1-10060'
                                                       ,'SYSTEM_NAME'
                                                       ,'${8}'
                                                       ,'FILE_NAME'
                                                       ,'${L_file_nam}') || ''''
    FROM   DUAL
    ;
    EXIT
EOF
    . $C_std_out
    #(エラーメッセージにセット)
    if [ -z "${L_status_err}" ]
    then
      L_status_err="${C_10060_msg}"
    else
      L_status_err="${L_status_err}\n${C_10060_msg}"
    fi
    #(終了処理)
    if [ -n "${L_if_job_status_id_all}" ]
    then
      update_job_process ${L_if_job_status_id_all}
    fi
    shell_end ${L_status_err}
  fi
  #■ 対向システムジョブ状況テーブルID一覧に追加
  if [ -z "${L_if_job_status_id_all}" ]
  then
    L_if_job_status_id_all="${L_if_job_status_id}"
  else
    L_if_job_status_id_all="${L_if_job_status_id_all} ${L_if_job_status_id}"
  fi
  #ループカウント +1
  loop_cnt=`expr $loop_cnt + 1`
done
# 2009/04/02 Ver.1.4 Masayuki.Sano add END

# 2009/10/26 Ver.1.10 Masayuki.Sano add Start
#(1秒待機)
sleep ${C_insert_wait}

#==============================================================================
#A-4．多重制御ステータス確認
#==============================================================================
#■ 同一ファイル名のジョブ状況ステータス監視用パラメータの取得
# 1.最大監視日時の取得
sqlplus -s ${C_ora_login} <<EOF >>${C_std_out}
  SET HEADING OFF
  SET LINES 240
  SELECT 'L_time_out='''||TO_CHAR(sysdate + '${C_iffile_chk_max_wait}' / 86400,'YYYYMMDDHH24MISS')||''''
  FROM  DUAL
  ;
  EXIT
EOF
. ${C_std_out}
# [監視最大時間、監視間隔時間を出力]
echo "IFFile Chack Start."
echo "max_wait:${L_time_out}(${C_iffile_chk_max_wait})"
echo "interval:${C_iffile_chk_interval}"

# 2.作成日の取得
loop_cnt=1
while test ${7} -ge ${loop_cnt}
do
  #1) 内部IDを取得
  L_if_job_status_id=`printf "$L_if_job_status_id_all" | cut -d " " -f $loop_cnt`
  #2) 件数取得
  sqlplus -s ${C_ora_login} <<EOF >>${C_std_out}
  SET HEADING OFF
  SET LINES 240
  SELECT 'L_creation_date_tmp='''|| TO_CHAR(xijs_own.creation_date,'YYYYMMDDHH24MISS') ||''''
  FROM   xxccp_if_job_status        xijs_own
  WHERE  xijs_own.if_job_status_id  = ${L_if_job_status_id}
  ;
  EXIT
EOF
  . $C_std_out
  #3) 作成日のセット
  if [ -z "${L_creation_date_all}" ]
  then
    L_creation_date_all="${L_creation_date_tmp}"
  else
    L_creation_date_all="${L_creation_date_all} ${L_creation_date_tmp}"
  fi
  #4) コンカレント・ログに出力
  echo "creation_date[${loop_cnt}]:${L_creation_date_tmp}"
  #5) ループカウント +1
  loop_cnt=`expr $loop_cnt + 1`
done


#■ 同一ファイル名のジョブ状況ステータス監視
# 1.同一ファイル名のジョブ状況ステータス監視処理
L_timeout_flag=${C_yes}
L_time=`date +"%Y%m%d%H%M%S"`
echo "Start Time : ${L_time}"
while test ${L_time_out} -gt ${L_time}
do
  L_wait_flag=${C_no}
  loop_cnt=1
  #1) 実行中であるステータスの件数を取得する。
  while test ${7} -ge ${loop_cnt}
  do
    # ① ファイル名・作成日を取得
    L_if_file_tmp=`printf "$L_file_nam_all" | cut -d " " -f $loop_cnt`
    L_creation_date_tmp=`printf "$L_creation_date_all" | cut -d " " -f $loop_cnt`
    # ② 件数取得
    sqlplus -s ${C_ora_login} <<EOF >>${C_std_out}
    SET HEADING OFF
    SET LINES 240
    SELECT 'L_execute_cnt='''|| COUNT(1) ||''''
    FROM   xxccp_if_job_status      xijs_chk
         , fnd_concurrent_requests  fcr
    WHERE  xijs_chk.if_system_name     = '${8}'
    AND    xijs_chk.if_file_name       = '${L_if_file_tmp}'
    AND    (( xijs_chk.creation_date < TO_DATE('${L_creation_date_tmp}','YYYYMMDDHH24MISS') )
           OR ( xijs_chk.creation_date = TO_DATE('${L_creation_date_tmp}','YYYYMMDDHH24MISS')
              AND xijs_chk.request_id    < '${C_request_id}' ))
    AND    xijs_chk.job_process        = 'R'
    AND    fcr.request_id              = xijs_chk.request_id
    AND    fcr.phase_code             <> 'C'
    ;
    EXIT
EOF
    . $C_std_out
    # ③件数が0件以外の場合、待機フラグを'Y'に変更。
    if [ "${L_execute_cnt}" -ne "0" ]
    then
      L_wait_flag=${C_yes}
      break 1
    fi
    # ④ループカウント +1
    loop_cnt=`expr $loop_cnt + 1`
  done
  #2) 同一ファイルが1件以上実行中の場合は待機し、0件の場合は処理を終了。
  if [ "${L_wait_flag}" = "${C_yes}" ]
  then
    sleep ${C_iffile_chk_interval}
  else
    L_timeout_flag=${C_no}
    break 1
  fi
  #3) 次の日時を取得する。
  L_time=`date +"%Y%m%d%H%M%S"`
done
echo "END   Time : ${L_time}"

# 2.タイムアウト有無チェック
if [ "${L_timeout_flag}" = "${C_yes}" ]
then
  #1) 実行中ステータス確認エラーメッセージを取得
  sqlplus -s ${C_ora_login} <<EOF >>${C_std_out}
  SET HEADING OFF
  SET LINES 240
  SELECT 'C_10062_msg='''||xxccp_common_pkg.get_msg('${C_appl_name}'
                                                   ,'APP-XXCCP1-10062'
                                                   ,'FILE_NAME'
                                                  ,'${L_file_nam}')||''''
  FROM DUAL
  ;
  EXIT
EOF
  . $C_std_out
  #2) エラーメッセージにセット
  if [ -z "${L_status_err}" ]
  then
    L_status_err="${C_10062_msg}"
  else
    L_status_err="${L_status_err}\n${C_10062_msg}"
    fi
  #3) 処理終了
  update_job_process ${L_if_job_status_id_all}
  shell_end ${L_status_err}
fi
echo "IFFile Chack End."
# 2009/10/26 Ver.1.10 Masayuki.Sano add End

#起動対象コンカレント発行処理(A-5)
L_resp_appl=${15}
L_resp_name=${16}
L_user_name=${14}
L_conc_appl=${5}
L_conc_name=${6}

# 2022/01/20 Ver.3.0 Shun.Takenami del START
##concsubパラメータ編集
## 2009/04/02 Ver.1.4 Masayuki.Sano update START
##L_conc_args="APPS/APPS"
#L_conc_args="${C_ora_login}"
## 2009/04/02 Ver.1.4 Masayuki.Sano update END
#L_conc_args="${L_conc_args} \"${L_resp_appl}\""
#L_conc_args="${L_conc_args} \"${L_resp_name}\""
#L_conc_args="${L_conc_args} \"${L_user_name}\""
## 2009/02/25 Ver.1.2 Koji.Oomata mod START
##L_conc_args="${L_conc_args} WAIT=Y CONCURRENT"
#L_conc_args="${L_conc_args} WAIT=15 CONCURRENT"
## 2009/02/25 Ver.1.2 Koji.Oomata mod START
#L_conc_args="${L_conc_args} \"${L_conc_appl}\""
#L_conc_args="${L_conc_args} \"${L_conc_name}\""
#
##起動対象コンカレントのパラメータ編集
#if [ ${L_para_count} = 1 ]
#then
#  L_param_args="\"${L_file_nam_all}\""
#elif [ ${L_para_count} = 2 ]
#then
#  L_param_args="\"${L_file_nam_all}\" \"${18}\""
#elif [ ${L_para_count} = 3 ]
#then
#  L_param_args="\"${L_file_nam_all}\" \"${18}\" \"${19}\""
#elif [ ${L_para_count} = 4 ]
#then
#  L_param_args="\"${L_file_nam_all}\" \"${18}\" \"${19}\" \"${20}\""
#elif [ ${L_para_count} = 5 ]
#then
#  L_param_args="\"${L_file_nam_all}\" \"${18}\" \"${19}\" \"${20}\" \"${21}\""
#elif [ ${L_para_count} = 6 ]
#then
#  L_param_args="\"${L_file_nam_all}\" \"${18}\" \"${19}\" \"${20}\" \"${21}\" \"${22}\""
#elif [ ${L_para_count} = 7 ]
#then
#  L_param_args="\"${L_file_nam_all}\" \"${18}\" \"${19}\" \"${20}\" \"${21}\" \"${22}\" \"${23}\""
#elif [ ${L_para_count} = 8 ]
#then
#  L_param_args="\"${L_file_nam_all}\" \"${18}\" \"${19}\" \"${20}\" \"${21}\" \"${22}\" \"${23}\" \"${24}\""
#elif [ ${L_para_count} = 9 ]
#then
#  L_param_args="\"${L_file_nam_all}\" \"${18}\" \"${19}\" \"${20}\" \"${21}\" \"${22}\" \"${23}\" \"${24}\" \"${25}\""
#elif [ ${L_para_count} = 10 ]
#then
#  L_param_args="\"${L_file_nam_all}\" \"${18}\" \"${19}\" \"${20}\" \"${21}\" \"${22}\" \"${23}\" \"${24}\" \"${25}\" \"${26}\""
#elif [ ${L_para_count} = 11 ]
#then
#  L_param_args="\"${L_file_nam_all}\" \"${18}\" \"${19}\" \"${20}\" \"${21}\" \"${22}\" \"${23}\" \"${24}\" \"${25}\" \"${26}\""
#  L_param_args="${L_param_args} \"${27}\""
#elif [ ${L_para_count} = 12 ]
#then
#  L_param_args="\"${L_file_nam_all}\" \"${18}\" \"${19}\" \"${20}\" \"${21}\" \"${22}\" \"${23}\" \"${24}\" \"${25}\" \"${26}\""
#  L_param_args="${L_param_args} \"${27}\" \"${28}\""
#elif [ ${L_para_count} = 13 ]
#then
#  L_param_args="\"${L_file_nam_all}\" \"${18}\" \"${19}\" \"${20}\" \"${21}\" \"${22}\" \"${23}\" \"${24}\" \"${25}\" \"${26}\""
#  L_param_args="${L_param_args} \"${27}\" \"${28}\" \"${29}\""
#elif [ ${L_para_count} = 14 ]
#then
#  L_param_args="\"${L_file_nam_all}\" \"${18}\" \"${19}\" \"${20}\" \"${21}\" \"${22}\" \"${23}\" \"${24}\" \"${25}\" \"${26}\""
#  L_param_args="${L_param_args} \"${27}\" \"${28}\" \"${29}\" \"${30}\""
#elif [ ${L_para_count} = 15 ]
#then
#  L_param_args="\"${L_file_nam_all}\" \"${18}\" \"${19}\" \"${20}\" \"${21}\" \"${22}\" \"${23}\" \"${24}\" \"${25}\" \"${26}\""
#  L_param_args="${L_param_args} \"${27}\" \"${28}\" \"${29}\" \"${30}\" \"${31}\""
#elif [ ${L_para_count} = 16 ]
#then
#  L_param_args="\"${L_file_nam_all}\" \"${18}\" \"${19}\" \"${20}\" \"${21}\" \"${22}\" \"${23}\" \"${24}\" \"${25}\" \"${26}\""
#  L_param_args="${L_param_args} \"${27}\" \"${28}\" \"${29}\" \"${30}\" \"${31}\" \"${32}\""
#elif [ ${L_para_count} = 17 ]
#then
#  L_param_args="\"${L_file_nam_all}\" \"${18}\" \"${19}\" \"${20}\" \"${21}\" \"${22}\" \"${23}\" \"${24}\" \"${25}\" \"${26}\""
#  L_param_args="${L_param_args} \"${27}\" \"${28}\" \"${29}\" \"${30}\" \"${31}\" \"${32}\" \"${33}\""
#elif [ ${L_para_count} = 18 ]
#then
#  L_param_args="\"${L_file_nam_all}\" \"${18}\" \"${19}\" \"${20}\" \"${21}\" \"${22}\" \"${23}\" \"${24}\" \"${25}\" \"${26}\""
#  L_param_args="${L_param_args} \"${27}\" \"${28}\" \"${29}\" \"${30}\" \"${31}\" \"${32}\" \"${33}\" \"${34}\""
#elif [ ${L_para_count} = 19 ]
#then
#  L_param_args="\"${L_file_nam_all}\" \"${18}\" \"${19}\" \"${20}\" \"${21}\" \"${22}\" \"${23}\" \"${24}\" \"${25}\" \"${26}\""
#  L_param_args="${L_param_args} \"${27}\" \"${28}\" \"${29}\" \"${30}\" \"${31}\" \"${32}\" \"${33}\" \"${34}\" \"${35}\""
#elif [ ${L_para_count} = 20 ]
#then
#  L_param_args="\"${L_file_nam_all}\" \"${18}\" \"${19}\" \"${20}\" \"${21}\" \"${22}\" \"${23}\" \"${24}\" \"${25}\" \"${26}\""
#  L_param_args="${L_param_args} \"${27}\" \"${28}\" \"${29}\" \"${30}\" \"${31}\" \"${32}\" \"${33}\" \"${34}\" \"${35}\""
#  L_param_args="${L_param_args} \"${36}\""
#elif [ ${L_para_count} = 21 ]
#then
#  L_param_args="\"${L_file_nam_all}\" \"${18}\" \"${19}\" \"${20}\" \"${21}\" \"${22}\" \"${23}\" \"${24}\" \"${25}\" \"${26}\""
#  L_param_args="${L_param_args} \"${27}\" \"${28}\" \"${29}\" \"${30}\" \"${31}\" \"${32}\" \"${33}\" \"${34}\" \"${35}\""
#  L_param_args="${L_param_args} \"${36}\" \"${37}\""
#elif [ ${L_para_count} = 22 ]
#then
#  L_param_args="\"${L_file_nam_all}\" \"${18}\" \"${19}\" \"${20}\" \"${21}\" \"${22}\" \"${23}\" \"${24}\" \"${25}\" \"${26}\""
#  L_param_args="${L_param_args} \"${27}\" \"${28}\" \"${29}\" \"${30}\" \"${31}\" \"${32}\" \"${33}\" \"${34}\" \"${35}\""
#  L_param_args="${L_param_args} \"${36}\" \"${37}\" \"${38}\""
#elif [ ${L_para_count} = 23 ]
#then
#  L_param_args="\"${L_file_nam_all}\" \"${18}\" \"${19}\" \"${20}\" \"${21}\" \"${22}\" \"${23}\" \"${24}\" \"${25}\" \"${26}\""
#  L_param_args="${L_param_args} \"${27}\" \"${28}\" \"${29}\" \"${30}\" \"${31}\" \"${32}\" \"${33}\" \"${34}\" \"${35}\""
#  L_param_args="${L_param_args} \"${36}\" \"${37}\" \"${38}\" \"${39}\""
#elif [ ${L_para_count} = 24 ]
#then
#  L_param_args="\"${L_file_nam_all}\" \"${18}\" \"${19}\" \"${20}\" \"${21}\" \"${22}\" \"${23}\" \"${24}\" \"${25}\" \"${26}\""
#  L_param_args="${L_param_args} \"${27}\" \"${28}\" \"${29}\" \"${30}\" \"${31}\" \"${32}\" \"${33}\" \"${34}\" \"${35}\""
#  L_param_args="${L_param_args} \"${36}\" \"${37}\" \"${38}\" \"${39}\" \"${40}\""
#elif [ ${L_para_count} = 25 ]
#then
#  L_param_args="\"${L_file_nam_all}\" \"${18}\" \"${19}\" \"${20}\" \"${21}\" \"${22}\" \"${23}\" \"${24}\" \"${25}\" \"${26}\""
#  L_param_args="${L_param_args} \"${27}\" \"${28}\" \"${29}\" \"${30}\" \"${31}\" \"${32}\" \"${33}\" \"${34}\" \"${35}\""
#  L_param_args="${L_param_args} \"${36}\" \"${37}\" \"${38}\" \"${39}\" \"${40}\" \"${41}\""
#elif [ ${L_para_count} = 26 ]
#then
#  L_param_args="\"${L_file_nam_all}\" \"${18}\" \"${19}\" \"${20}\" \"${21}\" \"${22}\" \"${23}\" \"${24}\" \"${25}\" \"${26}\""
#  L_param_args="${L_param_args} \"${27}\" \"${28}\" \"${29}\" \"${30}\" \"${31}\" \"${32}\" \"${33}\" \"${34}\" \"${35}\""
#  L_param_args="${L_param_args} \"${36}\" \"${37}\" \"${38}\" \"${39}\" \"${40}\" \"${41}\" \"${42}\""
#elif [ ${L_para_count} = 27 ]
#then
#  L_param_args="\"${L_file_nam_all}\" \"${18}\" \"${19}\" \"${20}\" \"${21}\" \"${22}\" \"${23}\" \"${24}\" \"${25}\" \"${26}\""
#  L_param_args="${L_param_args} \"${27}\" \"${28}\" \"${29}\" \"${30}\" \"${31}\" \"${32}\" \"${33}\" \"${34}\" \"${35}\""
#  L_param_args="${L_param_args} \"${36}\" \"${37}\" \"${38}\" \"${39}\" \"${40}\" \"${41}\" \"${42}\" \"${43}\""
#elif [ ${L_para_count} = 28 ]
#then
#  L_param_args="\"${L_file_nam_all}\" \"${18}\" \"${19}\" \"${20}\" \"${21}\" \"${22}\" \"${23}\" \"${24}\" \"${25}\" \"${26}\""
#  L_param_args="${L_param_args} \"${27}\" \"${28}\" \"${29}\" \"${30}\" \"${31}\" \"${32}\" \"${33}\" \"${34}\" \"${35}\""
#  L_param_args="${L_param_args} \"${36}\" \"${37}\" \"${38}\" \"${39}\" \"${40}\" \"${41}\" \"${42}\" \"${43}\" \"${44}\""
#elif [ ${L_para_count} = 29 ]
#then
#  L_param_args="\"${L_file_nam_all}\" \"${18}\" \"${19}\" \"${20}\" \"${21}\" \"${22}\" \"${23}\" \"${24}\" \"${25}\" \"${26}\""
#  L_param_args="${L_param_args} \"${27}\" \"${28}\" \"${29}\" \"${30}\" \"${31}\" \"${32}\" \"${33}\" \"${34}\" \"${35}\""
#  L_param_args="${L_param_args} \"${36}\" \"${37}\" \"${38}\" \"${39}\" \"${40}\" \"${41}\" \"${42}\" \"${43}\" \"${44}\""
#  L_param_args="${L_param_args} \"${45}\""
#elif [ ${L_para_count} = 30 ]
#then
#  L_param_args="\"${L_file_nam_all}\" \"${18}\" \"${19}\" \"${20}\" \"${21}\" \"${22}\" \"${23}\" \"${24}\" \"${25}\" \"${26}\""
#  L_param_args="${L_param_args} \"${27}\" \"${28}\" \"${29}\" \"${30}\" \"${31}\" \"${32}\" \"${33}\" \"${34}\" \"${35}\""
#  L_param_args="${L_param_args} \"${36}\" \"${37}\" \"${38}\" \"${39}\" \"${40}\" \"${41}\" \"${42}\" \"${43}\" \"${44}\""
#  L_param_args="${L_param_args} \"${45}\" \"${46}\""
#fi
# 2022/01/20 Ver.3.0 Shun.Takenami del END
# 2022/01/20 Ver.3.0 Shun.Takenami update START
# コンカレントパラメータ取得
  L_param_args[1]=${L_file_nam_all}
  
  _idx=2
  _cnt=1
  for L_para in ${@+"$@"}
  do
    if [ ${_cnt} -gt 17 ]
    then
      if [ -z "${L_para}" ]
      then
        L_param_args[${_idx}]=""
      else
        L_param_args[${_idx}]=${L_para}
      fi
      _idx=`expr  ${_idx} + 1`
    fi
    _cnt=`expr  ${_cnt} + 1`
  done

#■ユーザID、職責ID、アプリケーションID取得
#ユーザIDの取得sql実行
sqlplus -s ${C_ora_login} <<EOF >>${C_std_out}
    SET HEADING OFF
    SET LINES 240
    SELECT 'L_user_id="' || USER_ID || '"'
    FROM fnd_user
    WHERE user_name = '${L_user_name}'
    ;
    EXIT
EOF
  . ${C_std_out}
  #ユーザID設定
  if [ "${L_user_id}" = "" ]
  then
    shell_end "The specified user ID is invalid.(User ID : ${L_user_id} )"
  fi
#職責ID、アプリケーションID取得sql実行
sqlplus -s ${C_ora_login} <<EOF >>${C_std_out}
    SET HEADING OFF
    SET LINES 240
    SELECT 'L_resp_id='||responsibility_id,'L_resp_appl_id='||application_id
    FROM fnd_responsibility_tl
    WHERE  responsibility_name = '${L_resp_name}'
    ;
    EXIT
EOF
  . ${C_std_out}
  #職責ID取得
  if [ ${L_resp_id} = "" ]
  then
    shell_end "The specified Responsibility ID is invalid.(User ID : ${L_resp_id} )"
  fi

  #アプリケーションID取得
  if [ "${L_resp_appl_id}" = "" ]
  then
    shell_end "The specified Responsibility Application ID is invalid.(User ID : ${L_resp_appl_id} )"
  fi

#コンカレント起動処理
  #言語コードを日本語に変更
  NLS_LANG=Japanese_Japan.JA16SJIS
  export NLS_LANG

  #コンカレント実行sql作成
  cat << SQL_BLOCK > ${C_std_out3} 2>&1
  set serveroutput on
  declare
    l_request_id number;
  begin
    fnd_global.apps_initialize(
       user_id       =>${L_user_id}      -- USER_ID
      ,resp_id       =>${L_resp_id}      -- RESPONSIBILITY_ID
      ,resp_appl_id  =>${L_resp_appl_id} -- RESPONSIBILITY_APPLICATION_ID
    );

   l_request_id:=fnd_request.submit_request(
       application =>'${L_conc_appl}'
      ,program     =>'${L_conc_name}'
SQL_BLOCK

  _idx=1
  while [ ${_idx} -le ${L_para_count} ]
  do
    echo "    ,argument${_idx} =>'${L_param_args[${_idx}]}'" >>  ${C_std_out3}
    _idx=`expr  ${_idx} + 1`
  done

  cat << SQL_BLOCK >> ${C_std_out3} 2>&1
    );
    dbms_output.put_line('L_reqid='||l_request_id);
    if l_request_id>0 then
      commit;
    else
      rollback;
    end if;
  end;
/
SQL_BLOCK

  #コンカレント実行sql実行
  sqlplus -s ${C_ora_login} << SQLEOF >> ${C_std_out2}
  set HEADING OFF
  WHENEVER SQLERROR EXIT
  spool ${C_std_out2}
  @${C_std_out3}
  spool off
SQLEOF
# 2022/01/20 Ver.3.0 Shun.Takenami update END
# 2022/01/20 Ver.3.0 Shun.Takenami del START
##コンカレント起動
#${FND_TOP}/bin/CONCSUB ${L_conc_args} ${L_param_args} >${C_std_out2}
# 2022/01/20 Ver.3.0 Shun.Takenami del END
#submit_request成功判定
L_return_code=${?}
if [ ${L_return_code} -ne 0 ]
then
# 2009/03/19 Ver.1.3 Koji.Oomata mod START
  sqlplus -s ${C_ora_login} <<EOF >>${C_std_out}  # 2009/04/02 Ver.1.4 Masayuki.Sano update
  SET HEADING OFF
  SET LINES 240
  SELECT 'C_10022_msg='''||xxccp_common_pkg.get_msg('${C_appl_name}','APP-XXCCP1-10022')||''''
  FROM DUAL
  ;
  EXIT
EOF
# 2009/03/19 Ver.1.3 Koji.Oomata mod End
  . $C_std_out
  L_conc_log=`cat $C_std_out2`
  #エラーメッセージ出力
# 2009/04/02 Ver.1.4 Masayuki.Sano update START
#  shell_end "${C_10022_msg}\n(${L_conc_log})"
  #(メッセージをセット)
  if [ -z "${L_status_err}" ]
  then
    L_status_err="${C_10022_msg}\n(${L_conc_log})"
  else
    L_status_err="${L_status_err}\n${C_10022_msg}\n(${L_conc_log})"
  fi
  #(ジョブ状況ステータスを終了に更新)
  update_job_process ${L_if_job_status_id_all}
  #(処理終了)
  shell_end ${L_status_err}
# 2009/04/02 Ver.1.4 Masayuki.Sano update END
fi

#要求IDの取得
# 2022/01/20 Ver.3.0 Shun.Takenami mod START
#L_req_str=`sed -e "s/.*${C_request_char} //" < ${C_std_out2}`
#L_reqid=`printf $L_req_str | cut -d " " -f 1`
L_reqid=`grep L_reqid ${C_std_out2} | awk -F "=| " '{print $2}'`
# 2022/01/20 Ver.3.0 Shun.Takenami mod END

#レポート出力項目：起動対象要求ID
L_exec_req_id="${L_reqid}"

# 2022/01/20 Ver.3.0 Shun.Takenami update START
#コンカレント要求の終了待ち処理
  # コンカレント要求の終了待ちsql作成
  cat << SQL_BLOCK > ${C_std_out3} 2>&1
  set serveroutput on
  declare
    l_return boolean;
    l_request_id number;
    l_interval number;
    l_maxwait number;
    l_phase varchar2(10);
    l_status varchar2(10);
    l_dev_phase varchar2(10);
    l_dev_status varchar2(10);
    l_message varchar2(255);
  begin

  l_return :=
    fnd_concurrent.wait_for_request (request_id      => ${L_reqid},
                                     INTERVAL        => 1,
                                     max_wait        => 0,
                                     phase           => l_phase,
                                     STATUS          => l_status,
                                     dev_phase       => l_dev_phase,
                                     dev_status      => l_dev_status,
                                     MESSAGE         => l_message
                                    );
    commit;
  end;
/
SQL_BLOCK

  # コンカレント要求の終了待ちsql実行
  sqlplus -s ${C_ora_login} << SQLEOF >> ${C_std_out2}
  set HEADING OFF
  WHENEVER SQLERROR EXIT
  @${C_std_out3}
SQLEOF

L_return_code=${?}
if [ ${L_return_code} -ne 0 ]
then
  sqlplus -s ${C_ora_login} <<EOF >>${C_std_out}
  SET HEADING OFF
  SET LINES 240
  SELECT 'C_10022_msg='''||xxccp_common_pkg.get_msg('${C_appl_name}','APP-XXCCP1-10022')||''''
  FROM DUAL
  ;
  EXIT
EOF
  . ${C_std_out}
  L_conc_log=`cat $C_std_out2`
  #エラーメッセージ出力
  #(メッセージをセット)
  if [ -z "${L_status_err}" ]
  then
    L_status_err="${C_10022_msg}\n(${L_conc_log})"
  else
    L_status_err="${L_status_err}\n${C_10022_msg}\n(${L_conc_log})"
  fi
  #(ジョブ状況ステータスを終了に更新)
  update_job_process ${L_if_job_status_id_all}
  #(処理終了)
  shell_end ${L_status_err}
fi
# 2022/01/20 Ver.3.0 Shun.Takenami update END

#起動対象コンカレントの終了ステータスを取得
# 2009/03/19 Ver.1.3 Koji.Oomata mod START
sqlplus -s ${C_ora_login} <<EOF >>${C_std_out}  # 2009/04/02 Ver.1.4 Masayuki.Sano update
SET HEADING OFF
SET LINES 240
SELECT 'L_phase_code='''||fr.phase_code||''''
      ,'L_status_code='''||fr.status_code||''''
FROM fnd_concurrent_requests fr
WHERE fr.request_id = TO_NUMBER('${L_reqid}');
EXIT
EOF
# 2009/03/19 Ver.1.3 Koji.Oomata mod End

#SQL結果読み込み処理
. $C_std_out
# 2022/09/01 Ver3.2 Nobuo.Koyama Add Start
  echo "concurrent req_id: ${L_reqid}" >>`echo ${C_ofil}`
  echo "concurrent phase : ${L_phase_code}" >>`echo ${C_ofil}`
  echo "concurrent status: ${L_status_code}" >>`echo ${C_ofil}`
# 2022/09/01 Ver3.2 Nobuo.Koyama Add End
case ${L_status_code} in
C)
  #正常
  #処理なし
  ;;
# 2010/01/25 Ver.1.12 Koji.Oomata del START
## 2009/02/04 Ver.1.1 Koji.Oomata mod START
##*)
##  #正常以外
#G)
#  #警告
#  #処理なし
#  ;;
# 2010/01/25 Ver.1.12 Koji.Oomata del START
*)
  #正常以外
# 2009/02/04 Ver.1.1 Koji.Oomata mod END
  #ファイル退避処理(A-6)
  loop_cnt=1
  while test ${7} -ge ${loop_cnt}
  do
    #移動元ファイル(ディレクトリ付き)
    L_esp_file_dir=`printf "$L_file_dir_all" | cut -d " " -f $loop_cnt`
    #移動元ファイル(拡張子なし)
    L_esp_file_nam_pre=`printf "$L_file_nam_pre_all" | cut -d " " -f $loop_cnt`
    #退避先ファイル名語尾
    L_new_file_end="${C_date2}_${L_reqid}"
    #退避先ファイル名
    if [ "${8}" = 'EDI' ]
    then
      L_new_file_name="${L_esp_file_nam_pre}_${L_new_file_end}.txt"
    else
      L_new_file_name="${L_esp_file_nam_pre}_${L_new_file_end}.csv"
    fi
    #退避先ファイル名(ディレクトリ付き)
    L_new_file_dir="${L_if_esc_to}/${L_new_file_name}"
    #ファイルが存在したら、ファイルを移動し、名称変更する(語尾に日付+要求+処理番号を付与)
    if [ -f ${L_esp_file_dir} ]
    then
      mv ${L_esp_file_dir} ${L_new_file_dir}
      L_return=${?}
# 2009/04/02 Ver.1.4 Masayuki.Sano add START
      if [ ${L_return} -ne 0 ]
      then
        sqlplus -s ${C_ora_login} <<EOF >>${C_std_out}  # 2009/04/02 Ver.1.4 Masayuki.Sano update
        SET HEADING OFF
        SET LINES 240
        SELECT 'C_10063_msg='''||xxccp_common_pkg.get_msg('${C_appl_name}','APP-XXCCP1-10063')||''''
        FROM DUAL
        ;
        EXIT
EOF
        . $C_std_out
        #(メッセージをセット)
        if [ -z "${L_status_err}" ]
        then
          L_status_err="${C_10063_msg}"
        else
          L_status_err="${L_status_err}\n${C_10063_msg}"
        fi
        #(ジョブ状況ステータスを終了に更新)
        update_job_process ${L_if_job_status_id_all}
        #(処理終了)
        shell_end ${L_status_err}
      fi
# 2009/04/02 Ver.1.4 Masayuki.Sano add END
# 2009/02/25 Ver.1.2 Koji.Oomata add START
      #退避フォルダに移動
      cd "${L_if_esc_to}"
      L_cnt=0
      #移動元ファイル(拡張子なし)でソートし、退避世代数より古いファイルを削除
      for L_filelist in `ls -tl "${L_esp_file_nam_pre}"* | awk '$9 !~ /aaa/ && $1 ~ /-/ {print $9}'`
      do
        L_cnt=`expr $L_cnt + 1`
        if [ ${L_cnt} -gt ${L_esc_bk_num} ]
        then
          rm "${L_if_esc_to}/${L_filelist}"
# 2009/06/03 Ver.1.6 Masayuki.Sano mod START
#          echo "Delete Esp_Backup_file : ${L_if_esc_to}/${L_filelist}"
          echo "Delete Esp_Backup_file : ${L_filelist}"
# 2009/06/03 Ver.1.6 Masayuki.Sano mod End
        fi
      done
# 2009/02/25 Ver.1.2 Koji.Oomata add END
    fi
    #ループカウント +1
    loop_cnt=`expr $loop_cnt + 1`
  done
  #エラーメッセージの取得
# 2009/03/19 Ver.1.3 Koji.Oomata mod START
sqlplus -s ${C_ora_login} <<EOF >>${C_std_out}  # 2009/04/02 Ver.1.4 Masayuki.Sano update
  SET HEADING OFF
  SET LINES 240
  SELECT 'C_10040_msg='''||xxccp_common_pkg.get_msg('${C_appl_name}','APP-XXCCP1-10040')||''''
        ,'C_10068_msg='''||xxccp_common_pkg.get_msg('${C_appl_name}','APP-XXCCP1-10068')||''''  --2010/01/25 Ver.1.12 Koji.Oomata add
  FROM DUAL
  ;
  EXIT
EOF
# 2009/03/19 Ver.1.3 Koji.Oomata mod End
  . $C_std_out
  #エラーメッセージ出力
# 2009/04/02 Ver.1.4 Masayuki.Sano update START
#  shell_end "${C_10040_msg}"
  #(メッセージをセット)
  if [ -z "${L_status_err}" ]
  then
    L_status_err="${C_10040_msg}"
  else
    L_status_err="${L_status_err}\n${C_10040_msg}"
  fi
# 2010/01/25 Ver.1.12 Koji.Oomata add START
  #(警告の場合、以下のメッセージをセット)
  if [ "${L_status_code}" = 'G' ]
  then
    L_status_err="${C_10068_msg}"
  fi
# 2010/01/25 Ver.1.12 Koji.Oomata add END
  #(ジョブ状況ステータスを終了に更新)
  update_job_process ${L_if_job_status_id_all}
  #(処理終了)
  shell_end ${L_status_err}
# 2009/04/02 Ver.1.4 Masayuki.Sano update END
  ;;
esac

loop_cnt=1
while test ${7} -ge ${loop_cnt}
do
  #ファイル移動処理(A-7)
  #移動元ファイル(ディレクトリ付き)
  L_cm_file_dir=`printf "$L_file_dir_all" | cut -d " " -f $loop_cnt`
# 2009/08/27 Ver1.8 Masayuki.Sano del Start
#  cp -p ${L_cm_file_dir} ${L_if_mov_to}
#  L_return=${?}
## 2009/04/02 Ver.1.4 Masayuki.Sano add START
#  if [ ${L_return} -ne 0 ]
#  then
#    sqlplus -s ${C_ora_login} <<EOF >>${C_std_out}  # 2009/04/02 Ver.1.4 Masayuki.Sano update
#    SET HEADING OFF
#    SET LINES 240
#    SELECT 'C_10064_msg='''||xxccp_common_pkg.get_msg('${C_appl_name}','APP-XXCCP1-10064')||''''
#    FROM DUAL
#    ;
#    EXIT
#EOF
#    . $C_std_out
#    #(メッセージをセット)
#    if [ -z "${L_status_err}" ]
#    then
#      L_status_err="${C_10064_msg}"
#    else
#      L_status_err="${L_status_err}\n${C_10064_msg}"
#    fi
#    #(ジョブ状況ステータスを終了に更新)
#    update_job_process ${L_if_job_status_id_all}
#    #(処理終了)
#    shell_end ${L_status_err}
#  fi
# 2009/08/27 Ver1.8 Masayuki.Sano del End
# 2009/04/02 Ver.1.4 Masayuki.Sano add END
  #バックアップ処理(A-8)
  #バックアップ元ファイル(拡張子なし)
  L_bkup_file_nam_pre=`printf "$L_file_nam_pre_all" | cut -d " " -f $loop_cnt`
  #バックアップファイル名語尾
  L_new_file_end="${C_date2}"
  #バックアップファイル名
  if [ "${8}" = 'EDI' ]
  then
    L_new_file_name="${L_bkup_file_nam_pre}_${L_new_file_end}.txt"
  else
    L_new_file_name="${L_bkup_file_nam_pre}_${L_new_file_end}.csv"
  fi
  #バックアップファイル名(ディレクトリ付き)
  L_new_file_dir="${L_if_bkup_to}/${L_new_file_name}"
  #ファイル移動処理
# 2009/08/27 Ver1.8 Masayuki.Sano mod Start
#  mv ${L_cm_file_dir} ${L_new_file_dir}
#  L_return=${?}
# 2022/09/01 Ver3.2 Nobuo.Koyama Add Start
#  sleep 30   #debug用
i=0
while [ $i -ne 5 ]
do
# 2022/09/01 Ver3.2 Nobuo.Koyama Add End
# 2022/08/05 Ver3.1 Nobuo.Koyama Add Start
#  echo "${L_cm_file_dir}" >>`echo ${C_ofil}` 
#  echo "$(dirname ${L_cm_file_dir})" >>`echo ${C_ofil}`
# Ver3.5 Hirokazu.Iitsuka Add Start
#  ls -l "$(dirname ${L_cm_file_dir})" >>`echo ${C_ofil}`     #lsコマンド結果出力
  ls -l "$(dirname ${L_cm_file_dir})/" >>`echo ${C_ofil}`     #lsコマンド結果出力
  stat "${L_cm_file_dir}" >>`echo ${C_ofil}`   #ファイルの詳細タイムスタンプ情報出力
# Ver3.5 Hirokazu.Iitsuka Add End
# 2022/09/01 Ver3.2 Nobuo.Koyama Add Start
  if [ -f "${L_cm_file_dir}" ]
  then
    break
  fi
  i=`expr 1 + $i`
# 2023/02/28 Ver3.4 Nobuo.Koyama Mod Start
#  sleep 60
  sleep 1
# 2023/02/28 Ver3.4 Nobuo.Koyama Mod End
# 2022/09/01 Ver3.2 Nobuo.Koyama Add End
# 2022/08/05 Ver3.1 Nobuo.Koyama Add End
# 2022/09/01 Ver3.2 Nobuo.Koyama Add Start
done
# 2022/09/01 Ver3.2 Nobuo.Koyama Add End
  cp ${L_cm_file_dir} ${L_new_file_dir}
  L_return=${?}
# 2009/08/27 Ver1.8 Masayuki.Sano mod End
# 2009/04/02 Ver.1.4 Masayuki.Sano add START
  if [ ${L_return} -ne 0 ]
  then
    sqlplus -s ${C_ora_login} <<EOF >>${C_std_out}  # 2009/04/02 Ver.1.4 Masayuki.Sano update
    SET HEADING OFF
    SET LINES 240
    SELECT 'C_10065_msg='''||xxccp_common_pkg.get_msg('${C_appl_name}','APP-XXCCP1-10065')||''''
    FROM DUAL
    ;
    EXIT
EOF
    . $C_std_out
    #(メッセージをセット)
# 2023/01/12 Ver3.3 Nobuo.Koyama Del Start
#    if [ -z "${L_status_err}" ]
#    then
#      L_status_err="${C_10065_msg}"
#    else
#      L_status_err="${L_status_err}\n${C_10065_msg}"
#    fi
# 2023/01/12 Ver3.3 Nobuo.Koyama Del End
# 2023/01/12 Ver3.3 Nobuo.Koyama Add Start
    echo "${C_10065_msg}" >>`echo ${C_ofil}`
# 2023/01/12 Ver3.3 Nobuo.Koyama Add End
# 2023/01/12 Ver3.3 Nobuo.Koyama Del Start
#    #(ジョブ状況ステータスを終了に更新)
#    update_job_process ${L_if_job_status_id_all}
#    #(処理終了)
#    shell_end ${L_status_err}
# 2023/01/12 Ver3.3 Nobuo.Koyama Del End
  fi
# 2009/04/02 Ver.1.4 Masayuki.Sano add END

  #バックアップディレクトリに移動
  cd "${L_if_bkup_to}"

  L_cnt=0
  #ファイル名(バックアップ元ファイル名)でソートし、世代数より古いファイルを削除
  for L_dirlist in `ls -tl "${L_bkup_file_nam_pre}"* | awk '$9 !~ /aaa/ && $1 ~ /-/ {print $9}'`
  do
    L_cnt=`expr $L_cnt + 1`
    if [ ${L_cnt} -gt ${10} ]
    then
      rm "${L_if_bkup_to}/${L_dirlist}"
# 2009/06/03 Ver.1.6 Masayuki.Sano mod START
#      echo "Delete Backup_file : ${L_if_bkup_to}/${L_dirlist}"
      echo "Delete Backup_file : ${L_dirlist}"
# 2009/06/03 Ver.1.6 Masayuki.Sano mod End
    fi
  done

  #ステータス初期データ作成処理(A-9)
  #完全ジョブネット名算出
  if [ "${8}" = 'EDI' ]
  then
    #ジョブグループ名算出
    #データ種コードで処理分岐
    if [ "$9" = '21' ]
    then
      L_job_group="${C_edi_job_gr_comm}${C_edi_job_gr_21}"
    elif [ "$9" = '22' ]
    then
      L_job_group="${C_edi_job_gr_comm}${C_edi_job_gr_22}"
    fi
    #EDIジョブネット名定義
# 2009/04/02 Ver.1.4 Masayuki.Sano update START
    #L_jobnet_nam="${13}_${19}-${9}${20}_${C_jobnet_last}"
    L_jobnet_nam="${13}_${19}-${9}${20}_${C_edi_jobnet_last}"
# 2009/04/02 Ver.1.4 Masayuki.Sano update END
  elif [ "${8}" = 'REPORT' ]
  then
    #帳票コード(引数3)を半角スペース区切りで、分割
    L_report_code=`echo ${19} | cut -d " " -f ${loop_cnt}`
    #ジョブグループ名算出
    L_job_group="${C_rep_job_gr_comm}${C_rep_job_gr_last}"
    #帳票ジョブネット名定義
# 2009/04/02 Ver.1.4 Masayuki.Sano update START
    #L_jobnet_nam="${13}_${18}${9}${L_report_code}_${C_jobnet_last}"
    L_jobnet_nam="${13}_${18}${9}${L_report_code}_${C_rep_jobnet_last}"
# 2009/04/02 Ver.1.4 Masayuki.Sano update END
  fi

  #ジョブネット完全名
  L_jobnet_parf="${L_job_group}/${L_jobnet_nam}"
  #格納用変数に格納
  if [ -z "${L_jobnet_parf_all}" ]
  then
    L_jobnet_parf_all="${L_jobnet_parf}"
  else
    L_jobnet_parf_all="${L_jobnet_parf_all} ${L_jobnet_parf}"
  fi

  #処理順付要求ID
  L_request_id_val="${L_exec_req_id}_${loop_cnt}"
  #移動元ファイル名
  L_file=`printf "$L_file_nam_all" | cut -d " " -f $loop_cnt`

# 2009/04/02 Ver.1.4 Masayuki.Sano update START
#  #初期データ作成
#  #INSERT処理
#  sqlplus -s apps/apps <<EOF >${C_std_out2}
#  SET HEADING OFF
#  SET LINES 240
#  INSERT INTO xxccp_if_job_status(
#     pk_request_id_val
#    ,exec_request_id
#    ,status_code
#    ,if_system_name
#    ,if_file_name
#    ,jobnet_name
#    ,first_request_id
#    ,created_by
#    ,creation_date
#    ,last_updated_by
#    ,last_update_date
#    ,last_update_login
#    ,request_id
#    ,program_application_id
#    ,program_id
#    ,program_update_date
#  ) VALUES (
#     '${L_request_id_val}'
#    ,TO_NUMBER('${L_exec_req_id}')
#    ,'0'
#    ,'${8}'
#    ,'${L_file}'
#    ,'${L_jobnet_parf}'
#    ,TO_NUMBER('${C_request_id}')
#    ,TO_NUMBER('${C_requested_by}')
#    ,TO_DATE('${C_date2}','YYYYMMDDHH24MISS')
#    ,TO_NUMBER('${C_requested_by}')
#    ,TO_DATE('${C_date2}','YYYYMMDDHH24MISS')
#    ,TO_NUMBER('${C_last_update_login}')
#    ,TO_NUMBER('${C_request_id}')
#    ,TO_NUMBER('${C_program_application_id}')
#    ,TO_NUMBER('${C_concurrent_program_id}')
#    ,TO_DATE('${C_date2}','YYYYMMDDHH24MISS')
#  );
#  EXIT
#EOF
  #対向システムジョブ状況テーブルIDを取得する。
  L_if_job_status_id=`printf "$L_if_job_status_id_all" | cut -d " " -f $loop_cnt`
  #ステータス・未入力項目を更新する。
  sqlplus -s ${C_ora_login} <<EOF >${C_std_out2}
    WHENEVER OSERROR EXIT FAILURE ROLLBACK
    WHENEVER SQLERROR EXIT FAILURE ROLLBACK
    -- 更新
    UPDATE xxccp_if_job_status xijs
    SET    xijs.request_id_val         = '${L_request_id_val}'
          ,xijs.exec_request_id        = TO_NUMBER('${L_exec_req_id}')
          ,xijs.status_code            = '0'
          ,xijs.jobnet_name            = '${L_jobnet_parf}'
          ,xijs.last_updated_by        = TO_NUMBER('${C_requested_by}')
-- 2009/10/26 Ver.1.10 Masayuki.Sano mod Start
--          ,xijs.last_update_date       = TO_DATE('${C_date2}','YYYYMMDDHH24MISS')
          ,xijs.last_update_date       = SYSDATE
-- 2009/10/26 Ver.1.10 Masayuki.Sano mod End
          ,xijs.last_update_login      = TO_NUMBER('${C_last_update_login}')
          ,xijs.request_id             = TO_NUMBER('${C_request_id}')
          ,xijs.program_application_id = TO_NUMBER('${C_program_application_id}')
          ,xijs.program_id             = TO_NUMBER('${C_concurrent_program_id}')
-- 2009/10/26 Ver.1.10 Masayuki.Sano mod Start
--          ,xijs.program_update_date    = TO_DATE('${C_date2}','YYYYMMDDHH24MISS')
          ,xijs.program_update_date    = SYSDATE
-- 2009/10/26 Ver.1.10 Masayuki.Sano mod End
    WHERE  xijs.if_job_status_id = ${L_if_job_status_id}
    ;
    EXIT SUCCESS COMMIT
EOF
  L_return=${?}
  # ■ エラーチェック
  if [ ${L_return} -ne 0 ]
  then
    #(SQLを実行し、メッセージを取得する。)
    sqlplus -s ${C_ora_login} <<EOF >>${C_std_out}
    SET HEADING OFF
    SET LINES 240
    SELECT 'C_10061_msg=''' || xxccp_common_pkg.get_msg('${C_appl_name}'
                                                       ,'APP-XXCCP1-10061'
                                                       ,'SYSTEM_NAME'
                                                       ,'${8}'
                                                       ,'FILE_NAME'
                                                       ,'${L_file}') || ''''
    FROM   DUAL
    ;
    EXIT
EOF
    . $C_std_out
    #(エラーメッセージにセット)
    if [ -z "${L_status_err}" ]
    then
      L_status_err="${C_10061_msg}"
    else
      L_status_err="${L_status_err}\n${C_10061_msg}"
    fi
    #(終了処理)
    break 1
  fi
# 2009/04/02 Ver.1.4 Masayuki.Sano update END

  #対象件数に+1カウント
  L_target_cnt=`expr $L_target_cnt + 1`
  #Jpqjobsubコマンド実行(A-10)
  #キュー名/ホスト名判定
  if [ "${8}" = 'EDI' ]
  then
    L_service_name="${C_edi_serv}"
    L_que="${C_edi_que}"
# 2023/09/11 Ver.3.6 H.Iitsuka ADD Start
    sqlplus -s ${C_ora_login} <<EOF >>${C_std_out} 
    SET HEADING OFF
    SET LINES 240
    SELECT 'C_new_host='''||FND_PROFILE.VALUE('${C_prof_edi_host_replace}')||''''                                        --新サーバ名
    FROM xxcos_lookup_values_v   xlvv
    WHERE xlvv.lookup_type = 'XXCOS1_EDI_HOST_REPLACE'
      AND xlvv.lookup_code = '${19}'
    ;
    EXIT
EOF
    . $C_std_out
    if [ -z "${C_new_host}" ]
    then
      L_host="${C_edi_host}"
    else
      L_host="${C_new_host}"
    fi
#    L_host="${C_edi_host}"
# 2023/09/11 Ver.3.6 H.Iitsuka ADD End
  elif [ "${8}" = 'REPORT' ]
  then
    L_service_name="${C_report_serv}"
    if [ "${11}" = '1' ]
    then
      L_que="${C_report_que1}"
      L_host="${C_report_host1}"
    elif [ "${11}" = '2' ]
    then
      L_que="${C_report_que2}"
      L_host="${C_report_host2}"
    elif [ "${11}" = '3' ]
    then
      L_que="${C_report_que3}"
      L_host="${C_report_host3}"
    fi
  fi

  #対向システムジョブ状況更新処理(XXCCP009A02)起動シェルのフルパス
  L_sts_updt="${C_sts_updt_path}/AZXXCCP009A02C.ksh"
# 2009/08/27 Ver1.8 Masayuki.Sano mod Start
#  #jpqjobsubコマンド発行
#  /opt/jp1ajs2/bin/jpqjobsub -q ${L_que} -mh ${L_host} -jn ${L_request_id_val} -sc "C:\Program Files\Hitachi\JP1AJS2\bin\ajsentry" -arg "-F ${L_service_name} -n -T -c AJS2SHNM:${L_sts_updt} -c AJS2CCID:${L_request_id_val} ${L_jobnet_parf}"
#  #jpqjobsubコマンド成功判定
#  L_ret_code=${?}
  #IFファイル名(ディレクトリ無し)
  L_file_nam=`printf "$L_file_nam_all" | cut -d " " -f $loop_cnt`
  #jpqjobsubコマンド発行
# 2014/11/17 Ver.1.14 Koji.Oomata mod START
## 2014/11/06 Ver.1.13 Koji.Oomata mod START
##  /opt/jp1ajs2/bin/jpqjobsub -q ${L_que} -mh ${L_host} -jn ${L_request_id_val} -sc "C:\Program Files\Hitachi\JP1AJS2\bin\ajsentry" -arg "-F ${L_service_name} -n -T -c AJS2SHNM:${L_sts_updt} -c AJS2CCID:${L_request_id_val} -c AJS2CPSHNM:${C_copyshell_path} -c AJS2FILENM:${L_file_nam} -c AJS2FROMDIR:${L_if_mov_from} -c AJS2TODIR:${L_if_mov_to} -c AJS2RMSHNM:${C_delshell_path} ${L_jobnet_parf}"
#  /opt/jp1ajs2/bin/jpqjobsub -q ${L_que} -mh ${L_host} -jn ${L_request_id_val} -sc "C:\Program Files (x86)\Hitachi\JP1AJS2\bin\ajsentry" -arg "-F ${L_service_name} -n -T -c AJS2SHNM:${L_sts_updt} -c AJS2CCID:${L_request_id_val} -c AJS2CPSHNM:${C_copyshell_path} -c AJS2FILENM:${L_file_nam} -c AJS2FROMDIR:${L_if_mov_from} -c AJS2TODIR:${L_if_mov_to} -c AJS2RMSHNM:${C_delshell_path} ${L_jobnet_parf}"
## 2014/11/06 Ver.1.13 Koji.Oomata mod END
# 2022/09/01 Ver3.2 Nobuo.Koyama Add Start
  echo "jpqjobsub Start" >>`echo ${C_ofil}`
# 2022/09/01 Ver3.2 Nobuo.Koyama Add End
  if [ "${8}" = 'EDI' ]
  then
    /opt/jp1ajs2/bin/jpqjobsub -q ${L_que} -mh ${L_host} -jn ${L_request_id_val} -sc "C:\Program Files (x86)\Hitachi\JP1AJS2\bin\ajsentry" -arg "-F ${L_service_name} -n -T -c AJS2SHNM:${L_sts_updt} -c AJS2CCID:${L_request_id_val} -c AJS2CPSHNM:${C_copyshell_path} -c AJS2FILENM:${L_file_nam} -c AJS2FROMDIR:${L_if_mov_from} -c AJS2TODIR:${L_if_mov_to} -c AJS2RMSHNM:${C_delshell_path} ${L_jobnet_parf}"
  elif [ "${8}" = 'REPORT' ]
  then
## 2014/11/19 Ver.1.15 Kazuyuki.Kiriu mod START
#    /opt/jp1ajs2/bin/jpqjobsub -q ${L_que} -mh ${L_host} -jn ${L_request_id_val} -sc "C:\Program Files\Hitachi\JP1AJS2\bin\ajsentry" -arg "-F ${L_service_name} -n -T -c AJS2SHNM:${L_sts_updt} -c AJS2CCID:${L_request_id_val} -c AJS2CPSHNM:${C_copyshell_path} -c AJS2FILENM:${L_file_nam} -c AJS2FROMDIR:${L_if_mov_from} -c AJS2TODIR:${L_if_mov_to} -c AJS2RMSHNM:${C_delshell_path} ${L_jobnet_parf}"
    /opt/jp1ajs2/bin/jpqjobsub -q ${L_que} -mh ${L_host} -jn ${L_request_id_val} -sc "C:\Program Files (x86)\Hitachi\JP1AJS2\bin\ajsentry" -arg "-F ${L_service_name} -n -T -c AJS2SHNM:${L_sts_updt} -c AJS2CCID:${L_request_id_val} -c AJS2CPSHNM:${C_copyshell_path} -c AJS2FILENM:${L_file_nam} -c AJS2FROMDIR:${L_if_mov_from} -c AJS2TODIR:${L_if_mov_to} -c AJS2RMSHNM:${C_delshell_path} ${L_jobnet_parf}"
## 2014/11/19 Ver.1.15 Kazuyuki.Kiriu mod END
  fi
# 2014/11/17 Ver.1.14 Koji.Oomata mod END
  L_ret_code=${?}
# 2009/08/27 Ver1.8 Masayuki.Sano mod End
  if [ ${L_ret_code} -ne 0 ]
  then
# 2009/03/19 Ver.1.3 Koji.Oomata mod START
    sqlplus -s ${C_ora_login} <<EOF >>${C_std_out}  # 2009/04/02 Ver.1.4 Masayuki.Sano update
    SET HEADING OFF
    SET LINES 240
    SELECT 'C_10050_msg='''||xxccp_common_pkg.get_msg('${C_appl_name}','APP-XXCCP1-10050','REQUEST_ID_VAL','${L_request_id_val}')||''''
    FROM DUAL
    ;
    EXIT
EOF
# 2009/03/19 Ver.1.3 Koji.Oomata mod End
    . $C_std_out
    if [ -z "${L_status_err}" ]
    then
      L_status_err="${C_10050_msg}"
    else
      L_status_err="${L_status_err}\n${C_10050_msg}"
    fi
    #エラー件数を+1カウント
    L_error_cnt=`expr $L_error_cnt + 1`
    #エラー終了要求IDに処理順付要求IDを追加
    if [ -z "${L_error_req_id}" ]
    then
      L_error_req_id="${L_request_id_val}"
    else
      L_error_req_id="${L_error_req_id} ${L_request_id_val}"
    fi
# 2009/04/02 Ver.1.4 Masayuki.Sano add Start
    break 1
# 2009/04/02 Ver.1.4 Masayuki.Sano add END
  fi

  #ループカウント +1
  loop_cnt=`expr $loop_cnt + 1`
done

#エラーメッセージ出力
if [ -n "${L_status_err}" ]
then
# 2009/04/02 Ver.1.4 Masayuki.Sano add Start
# 2009/08/27 Ver1.8 Masayuki.Sano del Start
#  #ファイル削除処理(A-12)
#  loop_cnt=1
#  while test ${7} -ge ${loop_cnt}
#  do
#    #対象ファイル名(ディレクトリ無し)
#    L_file_nam=`printf "$L_file_nam_all" | cut -d " " -f $loop_cnt`
#    L_del_file="${L_if_mov_to}/${L_file_nam}"
#    file_delete ${L_del_file}
#    #ループカウント +1
#    loop_cnt=`expr $loop_cnt + 1`
#  done
# 2009/08/27 Ver1.8 Masayuki.Sano del End
  #終了処理(A-13)
  update_job_process ${L_if_job_status_id_all}
# 2009/04/02 Ver.1.4 Masayuki.Sano add END
  shell_end ${L_status_err}
fi

# 2009/04/02 Ver.1.4 Masayuki.Sano add Start
#==============================================================================
#ステータス監視処理(A-11)
#==============================================================================
#(監視最大日時、監視間隔時間を取得する。)
if [ "${8}" = 'EDI' ]
then
  #IF連携システム:EDIの場合
  #(監視最大日時)
  sqlplus -s ${C_ora_login} <<EOF >>${C_std_out}
  SET HEADING OFF
  SET LINES 240
  SELECT 'L_time_out='''||TO_CHAR(sysdate + '${C_edi_status_max}' / 86400,'YYYYMMDDHH24MISS')||''''
  FROM  DUAL
  ;
  EXIT
EOF
  . ${C_std_out}
  L_status_max="${C_edi_status_max}"
  #(監視間隔時間)
  L_status_interval="${C_edi_status_interval}"
else
  #IF連携システム:帳票の場合
  #(監視最大日時)
  sqlplus -s ${C_ora_login} <<EOF >>${C_std_out}
  SET HEADING OFF
  SET LINES 240
  SELECT 'L_time_out='''||TO_CHAR(sysdate + '${C_rep_status_max}' / 86400,'YYYYMMDDHH24MISS')||''''
  FROM  DUAL
  ;
  EXIT
EOF
  . ${C_std_out}
  L_status_max="${C_rep_status_max}"
  #(監視間隔時間)
  L_status_interval="${C_rep_status_interval}"
fi
#(使用する監視最大時間、監視間隔時間を確認する)
echo "status_max_time:${L_time_out}(${L_status_max})"
echo "status_interval:${L_status_interval}"
#(監視開始時間を出力)
L_time=`date +"%Y%m%d%H%M%S"`
echo "Status Watch Start  Time : ${L_time}"

# ■ ジョブが完了したかどうかを確認する。
while test ${L_time_out} -gt ${L_time}
do
  #1) 実行中であるステータスの件数を取得する。
  sqlplus -s ${C_ora_login} <<EOF >>${C_std_out}
  SET HEADING OFF
  SET LINES 240
  SELECT 'L_execute_cnt='''|| COUNT(1) ||''''
  FROM   xxccp_if_job_status xijs
  WHERE  xijs.exec_request_id = TO_NUMBER('${L_exec_req_id}')
  AND    xijs.status_code = '0'
  AND    xijs.job_process = 'R'
  ;
  EXIT
EOF
  . $C_std_out
  #2) 件数が0件の場合、ループ処理を終了し、0件以外の場合は、待機する。
  if [ "${L_execute_cnt}" = "0" ]
  then
    break 1
  else
    #待機処理
    sleep ${L_status_interval}
  fi
  #3) 次の日時を取得する。
  L_time=`date +"%Y%m%d%H%M%S"`
done

#(監視終了時間を出力)
echo "Status Watch END    Time : ${L_time}"

# 2009/04/02 Ver.1.4 Masayuki.Sano add END

loop_cnt=1
while test ${7} -ge ${loop_cnt}
do
  #ステータス監視処理(A-11)
  #処理順付要求ID
  L_pk_request_id_val="${L_exec_req_id}_${loop_cnt}"
# 2009/04/02 Ver.1.4 Masayuki.Sano delete Start
#  #処理中時間
#  L_time=1
#  #タイムアウト時間
#  L_time_out=2
#  L_cnt=1
#
#  #監視開始時間
#  L_start_time=`date +"%Y%m%d%H%M%S"`
#  echo "Status Watch Start  Time : ${L_start_time}"
#  while test ${L_time_out} -gt ${L_time}
#  do
# 2009/04/02 Ver.1.4 Masayuki.Sano delete END

# 2009/03/19 Ver.1.3 Koji.Oomata mod START
  sqlplus -s ${C_ora_login} <<EOF >>${C_std_out}  # 2009/04/02 Ver.1.4 Masayuki.Sano update
  SET HEADING OFF
  SET LINES 240
-- 2009/04/02 Ver.1.4 Masayuki.Sano update Start
--    SELECT 'L_time_out_tmp='''||TO_CHAR(sysdate + '${C_status_max}' / 86400,'YYYYMMDDHH24MISS')||''''
--          ,'L_status_code='''||xijs.status_code||''''
  SELECT 'L_status_code='''||xijs.status_code||''''
-- 2009/04/02 Ver.1.4 Masayuki.Sano update END
        ,'L_jobnet_name='''||xijs.jobnet_name||''''
        ,'L_if_file_name='''||xijs.if_file_name||''''
  FROM  DUAL
       ,xxccp_if_job_status xijs
-- 2009/04/02 Ver.1.4 Masayuki.Sano update Start
--    WHERE xijs.pk_request_id_val = '${L_pk_request_id_val}'
  WHERE xijs.request_id_val = '${L_pk_request_id_val}'
-- 2009/04/02 Ver.1.4 Masayuki.Sano update END
  ;
  EXIT
EOF
# 2009/03/19 Ver.1.3 Koji.Oomata mod End
  . $C_std_out
# 2009/04/02 Ver.1.4 Masayuki.Sano delete Start
#    #タイムアウト時間取得
#    if [ "${L_cnt}" = '1' ]
#    then
#      L_time_out="${L_time_out_tmp}"
#      echo "Time of TimeOut  :  ${L_time_out}"
#    fi
# 2009/04/02 Ver.1.4 Masayuki.Sano delete END

  #ステータス判定
  #｢正常」に更新
  if [ "${L_status_code}" = '1' ]
  then
    #成功件数を+1カウント
    L_success_cnt=`expr $L_success_cnt + 1`
    #正常終了要求IDに処理順付要求IDを追加
    if [ -z "${L_succes_req_id}" ]
    then
      L_succes_req_id="${L_pk_request_id_val}"
    else
      L_succes_req_id="${L_succes_req_id} ${L_pk_request_id_val}"
    fi
# 2009/04/02 Ver.1.4 Masayuki.Sano delete Start
#      break 1
# 2009/04/02 Ver.1.4 Masayuki.Sano delete END
  elif [ "${L_status_code}" = '8' ]
  then
    #エラー件数を+1カウント
    L_error_cnt=`expr $L_error_cnt + 1`
    #エラー終了要求IDに処理順付要求IDを追加
    if [ -z "${L_error_req_id}" ]
    then
      L_error_req_id="${L_pk_request_id_val}"
    else
      L_error_req_id="${L_error_req_id} ${L_pk_request_id_val}"
    fi
    #エラーメッセージ取得
# 2009/03/19 Ver.1.3 Koji.Oomata mod START
    sqlplus -s ${C_ora_login} <<EOF >>${C_std_out}  # 2009/04/02 Ver.1.4 Masayuki.Sano update
    SET HEADING OFF
    SET LINES 240
    SELECT 'C_10018_msg='''||xxccp_common_pkg.get_msg('${C_appl_name}','APP-XXCCP1-10018','JOBNET_NAME','${L_jobnet_name}')||''''
    FROM  DUAL
    ;
    EXIT
EOF
# 2009/03/19 Ver.1.3 Koji.Oomata mod End
    . $C_std_out
    if [ -z "${L_status_err}" ]
    then
      L_status_err="${C_10018_msg}"
    else
      L_status_err="${L_status_err}\n${C_10018_msg}"
    fi
# 2009/08/27 Ver1.8 Masayuki.Sano del Start
#      #ファイル削除処理(A-12)
#      L_del_file="${L_if_mov_to}/${L_if_file_name}"
#      file_delete ${L_del_file}
# 2009/08/27 Ver1.8 Masayuki.Sano del End
# 2009/04/02 Ver.1.4 Masayuki.Sano delete Start
#      break 1
# 2009/04/02 Ver.1.4 Masayuki.Sano delete END
  elif [ "${L_status_code}" = '9' ]
  then
    #エラー件数を+1カウント
    L_error_cnt=`expr $L_error_cnt + 1`
    #エラー終了要求IDに処理順付要求IDを追加
    if [ -z "${L_error_req_id}" ]
    then
      L_error_req_id="${L_pk_request_id_val}"
    else
      L_error_req_id="${L_error_req_id} ${L_pk_request_id_val}"
    fi
    #エラーメッセージ取得
# 2009/03/19 Ver.1.3 Koji.Oomata mod START
    sqlplus -s ${C_ora_login} <<EOF >>${C_std_out}  # 2009/04/02 Ver.1.4 Masayuki.Sano update
    SET HEADING OFF
    SET LINES 240
    SELECT 'C_10019_msg='''||xxccp_common_pkg.get_msg('${C_appl_name}','APP-XXCCP1-10019','JOBNET_NAME','${L_jobnet_name}')||''''
    FROM  DUAL
    ;
    EXIT
EOF
# 2009/03/19 Ver.1.3 Koji.Oomata mod End
    . $C_std_out
    if [ -z "${L_status_err}" ]
    then
      L_status_err="${C_10019_msg}"
    else
      L_status_err="${L_status_err}\n${C_10019_msg}"
    fi
# 2009/08/27 Ver1.8 Masayuki.Sano del Start
#      #ファイル削除処理(A-12)
#      L_del_file="${L_if_mov_to}/${L_if_file_name}"
#      file_delete ${L_del_file}
# 2009/08/27 Ver1.8 Masayuki.Sano del End
# 2009/04/02 Ver.1.4 Masayuki.Sano delete Start
#      break 1
# 2009/04/02 Ver.1.4 Masayuki.Sano delete END
# 2009/08/27 Ver1.8 Masayuki.Sano add Start
  #ステータス値が10の場合
  elif [ "${L_status_code}" = '10' ]
  then
    #エラー件数を+1カウント
    L_error_cnt=`expr $L_error_cnt + 1`
    #エラー終了要求IDに処理順付要求IDを追加
    if [ -z "${L_error_req_id}" ]
    then
      L_error_req_id="${L_pk_request_id_val}"
    else
      L_error_req_id="${L_error_req_id} ${L_pk_request_id_val}"
    fi
    #エラーメッセージ取得
    sqlplus -s ${C_ora_login} <<EOF >>${C_std_out}
    SET HEADING OFF
    SET LINES 240
    SELECT 'C_10064_msg='''||xxccp_common_pkg.get_msg('${C_appl_name}'
                                                     ,'APP-XXCCP1-10064'
                                                     ,'JOBNET_NAME'
                                                     ,'${L_jobnet_name}')||''''
    FROM  DUAL
    ;
    EXIT
EOF
    . $C_std_out
    if [ -z "${L_status_err}" ]
    then
      L_status_err="${C_10064_msg}"
    else
      L_status_err="${L_status_err}\n${C_10064_msg}"
    fi
  #ステータス値が11の場合
  elif [ "${L_status_code}" = '11' ]
  then
    #エラー件数を+1カウント
    L_error_cnt=`expr $L_error_cnt + 1`
    #エラー終了要求IDに処理順付要求IDを追加
    if [ -z "${L_error_req_id}" ]
    then
      L_error_req_id="${L_pk_request_id_val}"
    else
      L_error_req_id="${L_error_req_id} ${L_pk_request_id_val}"
    fi
    #エラーメッセージ取得
    sqlplus -s ${C_ora_login} <<EOF >>${C_std_out}
    SET HEADING OFF
    SET LINES 240
    SELECT 'C_10067_msg='''||xxccp_common_pkg.get_msg('${C_appl_name}'
                                                     ,'APP-XXCCP1-10067'
                                                     ,'JOBNET_NAME'
                                                     ,'${L_jobnet_name}')||''''
    FROM  DUAL
    ;
    EXIT
EOF
    . $C_std_out
    if [ -z "${L_status_err}" ]
    then
      L_status_err="${C_10067_msg}"
    else
      L_status_err="${L_status_err}\n${C_10067_msg}"
    fi
# 2009/08/27 Ver1.8 Masayuki.Sano add End
# 2009/04/02 Ver.1.4 Masayuki.Sano add START
  elif [ "${L_status_code}" = '0' ]
  then
    #エラー件数を+1カウント
    L_error_cnt=`expr $L_error_cnt + 1`
    #エラー終了要求IDに処理順付要求IDを追加
    if [ -z "${L_error_req_id}" ]
    then
      L_error_req_id="${L_pk_request_id_val}"
    else
      L_error_req_id="${L_error_req_id} ${L_pk_request_id_val}"
    fi
    #エラーメッセージ取得
    sqlplus -s ${C_ora_login} <<EOF >>${C_std_out}
    SET HEADING OFF
    SET LINES 240
    SELECT 'C_10009_msg='''||xxccp_common_pkg.get_msg('${C_appl_name}'
                                                     ,'APP-XXCCP1-10009'
                                                     ,'LIMIT'
                                                     ,'${L_status_max}'
                                                     ,'JOBNET_NAME'
                                                     ,'${L_jobnet_name}')||''''
    FROM  DUAL
    ;
    EXIT
EOF
    . $C_std_out
    if [ -z "${L_status_err}" ]
    then
      L_status_err="${C_10009_msg}"
    else
      L_status_err="${L_status_err}\n${C_10009_msg}"
    fi
# 2009/08/27 Ver1.8 Masayuki.Sano del Start
#      #ファイル削除処理(A-12)
#      L_del_file="${L_if_mov_to}/${L_if_file_name}"
#      file_delete ${L_del_file}
# 2009/08/27 Ver1.8 Masayuki.Sano del End
# 2009/04/02 Ver.1.4 Masayuki.Sano add END
   #ステータス値が1,8,9いずれでもない場合
   else
# 2009/04/02 Ver.1.4 Masayuki.Sano update Start
#      #待機処理
#      sleep ${C_status_interval}
#      #処理中時間取得
#      L_time=`date +"%Y%m%d%H%M%S"`
#      echo "Sleep_Time ${loop_cnt}-${L_cnt} :  ${C_status_interval}"
#      echo "  Sleep_End Time  :  ${L_time}"
     #エラー件数を+1カウント
     L_error_cnt=`expr $L_error_cnt + 1`
     #エラー終了要求IDに処理順付要求IDを追加
     if [ -z "${L_error_req_id}" ]
     then
       L_error_req_id="${L_pk_request_id_val}"
     else
       L_error_req_id="${L_error_req_id} ${L_pk_request_id_val}"
     fi
     #エラーメッセージ取得
     sqlplus -s ${C_ora_login} <<EOF >>${C_std_out}
     SET HEADING OFF
     SET LINES 240
     SELECT 'C_10066_msg='''||xxccp_common_pkg.get_msg('${C_appl_name}'
                                                      ,'APP-XXCCP1-10066'
                                                      ,'JOBNET_NAME'
                                                      ,'${L_jobnet_name}')||''''
     FROM  DUAL
     ;
     EXIT
EOF
     . $C_std_out
     if [ -z "${L_status_err}" ]
     then
       L_status_err="${C_10066_msg}"
     else
       L_status_err="${L_status_err}\n${C_10066_msg}"
     fi
# 2009/08/27 Ver1.8 Masayuki.Sano del Start
#      #ファイル削除処理(A-12)
#      L_del_file="${L_if_mov_to}/${L_if_file_name}"
#      file_delete ${L_del_file}
# 2009/08/27 Ver1.8 Masayuki.Sano del End
# 2009/04/02 Ver.1.4 Masayuki.Sano update END
   fi
# 2009/04/02 Ver.1.4 Masayuki.Sano delete Start
#    #ループカウント +1
#    L_cnt=`expr $L_cnt + 1`
#  done
#  #タイムアウトした場合
#  if [ "${L_status_code}" = '0' ]
#  then
#    #エラー件数を+1カウント
#    L_error_cnt=`expr $L_error_cnt + 1`
#    #エラー終了要求IDに処理順付要求IDを追加
#    if [ -z "${L_error_req_id}" ]
#    then
#      L_error_req_id="${L_pk_request_id_val}"
#    else
#      L_error_req_id="${L_error_req_id} ${L_pk_request_id_val}"
#    fi
#    #エラーメッセージ取得
## 2009/03/19 Ver.1.3 Koji.Oomata mod START
#    sqlplus -s apps/apps <<EOF >>${C_std_out}
#    SET HEADING OFF
#    SET LINES 240
#    SELECT 'C_10009_msg='''||xxccp_common_pkg.get_msg('${C_appl_name}','APP-XXCCP1-10009','LIMIT','${C_status_max}','JOBNET_NAME','${L_jobnet_name}')||''''
#    FROM  DUAL
#    ;
#    EXIT
#EOF
## 2009/03/19 Ver.1.3 Koji.Oomata mod End
#    . $C_std_out
#    if [ -z "${L_status_err}" ]
#    then
#      L_status_err="${C_10009_msg}"
#    else
#      L_status_err="${L_status_err}\n${C_10009_msg}"
#    fi
#    #ファイル削除処理(A-12)
#    L_del_file="${L_if_mov_to}/${L_if_file_name}"
#    file_delete ${L_del_file}
#  fi
# 2009/04/02 Ver.1.4 Masayuki.Sano delete END
  #ループカウント +1
  loop_cnt=`expr $loop_cnt + 1`
done

# 2009/04/02 Ver.1.4 Masayuki.Sano delete START
#echo "Status Watch End"
# 2009/04/02 Ver.1.4 Masayuki.Sano delete END

#終了判定処理(A-13)
# 2009/04/02 Ver.1.4 Masayuki.Sano add Start
update_job_process ${L_if_job_status_id_all}
# 2009/04/02 Ver.1.4 Masayuki.Sano add END
if [ ${L_error_cnt} -ge 1 ]
then
  shell_end ${L_status_err}
else
  shell_end
fi
exit ${C_exit_norm}
