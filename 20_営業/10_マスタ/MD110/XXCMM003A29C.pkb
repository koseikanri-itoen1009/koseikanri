CREATE OR REPLACE PACKAGE BODY XXCMM003A29C
AS
/*****************************************************************************************
 * Copyright(c)Sumisho Computer Systems Corporation, 2009. All rights reserved.
 *
 * Package Name     : XXCMM003A29C(body)
 * Description      : 顧客一括更新
 * MD.050           : MD050_CMM_003_A29_顧客一括更新
 * Version          : 1.0
 *
 * Program List
 * ---------------------- ----------------------------------------------------------
 *  Name                   Description
 * ---------------------- ----------------------------------------------------------
 *  cust_data_make_wk      ファイルアップロードI/Fテーブル取得処理(A-1)・顧客一括更新用ワークテーブル登録処理(A-2)
 *  rock_and_update_cust   テーブルロック処理(A-3)・顧客一括更新処理(A-4)
 *  close_process          終了処理(A-5)
 *  submain                メイン処理プロシージャ
 *  main                   コンカレント実行ファイル登録プロシージャ
 *
 * Change Record
 * ------------- ----- ---------------- -------------------------------------------------
 *  Date          Ver.  Editor           Description
 * ------------- ----- ---------------- -------------------------------------------------
 *  2009/01/20    1.0   中村 祐基        新規作成
 *
 *****************************************************************************************/
--
--#######################  固定グローバル定数宣言部 START   #######################
--
  --ステータス・コード
  cv_status_normal          CONSTANT VARCHAR2(1)  := xxccp_common_pkg.set_status_normal; --正常:0
  cv_status_warn            CONSTANT VARCHAR2(1)  := xxccp_common_pkg.set_status_warn;   --警告:1
  cv_status_error           CONSTANT VARCHAR2(1)  := xxccp_common_pkg.set_status_error;  --異常:2
  --WHOカラム
  cn_created_by             CONSTANT NUMBER       := fnd_global.user_id;         --CREATED_BY
  cd_creation_date          CONSTANT DATE         := SYSDATE;                    --CREATION_DATE
  cn_last_updated_by        CONSTANT NUMBER       := fnd_global.user_id;         --LAST_UPDATED_BY
  cd_last_update_date       CONSTANT DATE         := SYSDATE;                    --LAST_UPDATE_DATE
  cn_last_update_login      CONSTANT NUMBER       := fnd_global.login_id;        --LAST_UPDATE_LOGIN
  cn_request_id             CONSTANT NUMBER       := fnd_global.conc_request_id; --REQUEST_ID
  cn_program_application_id CONSTANT NUMBER       := fnd_global.prog_appl_id;    --PROGRAM_APPLICATION_ID
  cn_program_id             CONSTANT NUMBER       := fnd_global.conc_program_id; --PROGRAM_ID
  cd_program_update_date    CONSTANT DATE         := SYSDATE;                    --PROGRAM_UPDATE_DATE
--
  gv_xxcmm_msg_kbn          CONSTANT VARCHAR2(5)  := 'XXCMM'; --メッセージ区分
  gv_xxccp_msg_kbn          CONSTANT VARCHAR2(5)  := 'XXCCP'; --メッセージ区分
--
  cv_msg_part               CONSTANT VARCHAR2(3)  := ' : ';
  cv_msg_cont               CONSTANT VARCHAR2(3)  := '.';
--
--################################  固定部 END   ##################################
--
--#######################  固定グローバル変数宣言部 START   #######################
--
  gv_out_msg       VARCHAR2(2000);
  gv_sep_msg       VARCHAR2(2000);
  gv_exec_user     VARCHAR2(100);
  gv_conc_name     VARCHAR2(30);
  gv_conc_status   VARCHAR2(30);
  gn_target_cnt    NUMBER;                    -- 対象件数
  gn_normal_cnt    NUMBER;                    -- 正常件数
  gn_error_cnt     NUMBER;                    -- エラー件数
  gn_warn_cnt      NUMBER;                    -- スキップ件数
--
--################################  固定部 END   ##################################
--
  -- ===============================
  -- ユーザー定義グローバル変数
  -- ===============================
  gv_org_id        NUMBER(15)  :=  fnd_global.org_id; --org_id
--
--##########################  固定共通例外宣言部 START  ###########################
--
  --*** 処理部共通例外 ***
  global_process_expt       EXCEPTION;
  --*** 共通関数例外 ***
  global_api_expt           EXCEPTION;
  --*** 共通関数OTHERS例外 ***
  global_api_others_expt    EXCEPTION;
--
  PRAGMA EXCEPTION_INIT(global_api_others_expt,-20000);
--
--################################  固定部 END   ##################################
--
  -- ===============================
  -- ユーザー定義例外
  -- ===============================
  get_csv_err_expt          EXCEPTION; --顧客一括更新用CSV取得エラー
  invalid_data_expt         EXCEPTION; --顧客一括更新情報不正例外
--
  update_cust_err_expt      EXCEPTION; --顧客マスタ更新エラー
  update_party_err_expt     EXCEPTION; --パーティマスタ更新エラー
  update_csu_err_expt       EXCEPTION; --顧客使用目的マスタ更新エラー
  update_location_err_expt  EXCEPTION; --顧客事業所マスタ更新エラー
--
  cust_rock_err_expt        EXCEPTION; --ロックエラー
--
  PRAGMA EXCEPTION_INIT(cust_rock_err_expt,-54);
--
  -- ===============================
  -- ユーザー定義グローバル定数
  -- ===============================
  cv_pkg_name                 CONSTANT VARCHAR2(12)  := 'XXCMM003A29C';                    --パッケージ名
  cv_comma                    CONSTANT VARCHAR2(1)   := ',';                               --カンマ
  --
  cv_header_str_msg           CONSTANT VARCHAR2(16)  := 'APP-XXCMM1-00332';                --CSVファイルヘッダ文字列
  cv_no_csv_msg               CONSTANT VARCHAR2(16)  := 'APP-XXCMM1-00312';                --顧客一括更新用CSV取得失敗メッセージ
  cv_parameter_msg            CONSTANT VARCHAR2(16)  := 'APP-XXCMM1-00038';                --入力パラメータノート
  cv_file_name_msg            CONSTANT VARCHAR2(16)  := 'APP-XXCCP1-05102';                --ファイル名ノート
  --エラーメッセージ
  cv_required_err_msg         CONSTANT VARCHAR2(16)  := 'APP-XXCMM1-00342';                --必須項目エラー
  cv_val_form_err_msg         CONSTANT VARCHAR2(16)  := 'APP-XXCMM1-00322';                --型・桁数エラーメッセージ
  cv_lookup_err_msg           CONSTANT VARCHAR2(16)  := 'APP-XXCMM1-00314';                --参照表存在チェックエラーメッセージ
  cv_mst_err_msg              CONSTANT VARCHAR2(16)  := 'APP-XXCMM1-00316';                --マスタ存在チェックエラーメッセージ
  cv_double_byte_kana_msg     CONSTANT VARCHAR2(16)  := 'APP-XXCMM1-00317';                --全角カタカナチェックエラーメッセージ
  cv_status_func_err_msg      CONSTANT VARCHAR2(16)  := 'APP-XXCMM1-00336';                --顧客ステータス変更エラー（遷移不可）
  cv_status_modify_err_msg    CONSTANT VARCHAR2(16)  := 'APP-XXCMM1-00319';                --顧客ステータス変更チェックエラーメッセージ
  cv_trust_val_invalid        CONSTANT VARCHAR2(16)  := 'APP-XXCMM1-00315';                --値エラー
  cv_cust_addon_err_msg       CONSTANT VARCHAR2(16)  := 'APP-XXCMM1-00320';                --顧客追加情報マスタ存在チェックエラー
  cv_corp_err_msg             CONSTANT VARCHAR2(16)  := 'APP-XXCMM1-00321';                --顧客法人情報マスタ存在チェックエラー
  cv_invalid_data_msg         CONSTANT VARCHAR2(16)  := 'APP-XXCMM1-00337';                --データエラー時出力メッセージ
  cv_invalid_header_msg       CONSTANT VARCHAR2(16)  := 'APP-XXCMM1-00338';                --ヘッダエラー時メッセージ
  cv_rock_err_msg             CONSTANT VARCHAR2(16)  := 'APP-XXCMM1-00313';                --ロックエラー時メッセージ
  cv_update_cust_err_msg      CONSTANT VARCHAR2(16)  := 'APP-XXCMM1-00323';                --顧客マスタ更新エラー時メッセージ
  cv_update_party_err_msg     CONSTANT VARCHAR2(16)  := 'APP-XXCMM1-00324';                --パーティマスタ更新エラー時メッセージ
  cv_update_csu_err_msg       CONSTANT VARCHAR2(16)  := 'APP-XXCMM1-00325';                --顧客使用目的エラー時メッセージ
  cv_update_location_err_msg  CONSTANT VARCHAR2(16)  := 'APP-XXCMM1-00326';                --顧客事業所エラー時メッセージ
--
  cv_param                    CONSTANT VARCHAR2(5)   := 'PARAM';                           --パラメータトークン
  cv_value                    CONSTANT VARCHAR2(5)   := 'VALUE';                           --パラメータ値トークン
  cv_item                     CONSTANT VARCHAR2(4)   := 'ITEM';                            --ITEMトークン
  cv_file_id                  CONSTANT VARCHAR2(7)   := 'FILE_ID';                         --パラメータ・ファイルID
  cv_file_content_type        CONSTANT VARCHAR2(17)  := 'FILE_CONTENT_TYPE';               --パラメータ・ファイルタイプ
  cv_file_name                CONSTANT VARCHAR2(9)   := 'FILE_NAME';                       --ファイル名トークン
  cv_element_vc2              CONSTANT VARCHAR2(1)   := '0';                               --項目属性・検証なし
  cv_element_num              CONSTANT VARCHAR2(1)   := '1';                               --項目属性・数値
  cv_element_dat              CONSTANT VARCHAR2(1)   := '2';                               --項目属性・日付
  cv_null_bar                 CONSTANT VARCHAR2(1)   := '-';                               --NULL更新文字
  cv_null_ng                  CONSTANT VARCHAR2(7)   := 'NULL_NG';                         --必須フラグ・必須
  cv_null_ok                  CONSTANT VARCHAR2(7)   := 'NULL_OK';                         --必須フラグ・任意
  cv_customer_class           CONSTANT VARCHAR2(14)  := 'CUSTOMER CLASS';                  --参照タイプ・顧客区分
  cv_cust_code                CONSTANT VARCHAR2(9)   := 'CUST_CODE';                       --顧客コードトークン
  cv_cust                     CONSTANT VARCHAR2(10)  := '顧客コード';                      --顧客コード
  cv_business_low_type        CONSTANT VARCHAR2(21)  := 'XXCMM_CUST_GYOTAI_SHO';           --参照タイプ・業態（小分類）
  cv_bus_low_type             CONSTANT VARCHAR2(14)  := '業態（小分類）';                  --業態（小分類）
  cv_customer_status          CONSTANT VARCHAR2(25)  := 'XXCMM_CUST_KOKYAKU_STATUS';       --参照タイプ・顧客ステータス
  cv_cust_status              CONSTANT VARCHAR2(14)  := '顧客ステータス';                  --顧客ステータス
  cv_pre_status               CONSTANT VARCHAR2(10)  := 'PRE_STATUS';                      --顧客ステータス変更前トークン
  cv_will_status              CONSTANT VARCHAR2(11)  := 'WILL_STATUS';                     --顧客ステータス変更後トークン
  cv_modify_err               CONSTANT VARCHAR2(1)   := '0';                               --ステータス変更チェック・ステータスエラー
  cv_ret_code                 CONSTANT VARCHAR2(8)   := 'RET_CODE';                        --ステータス変更チェック・ステータストークン
  cv_ret_msg                  CONSTANT VARCHAR2(7)   := 'RET_MSG';                         --ステータス変更チェック・メッセージトークン
  cv_stop_approved            CONSTANT VARCHAR2(2)   := '90';                              --顧客ステータス・中止決済済
  cv_approval_reason          CONSTANT VARCHAR2(22)  := 'XXCMM_CUST_CHUSHI_RIYU';          --参照タイプ・中止理由
  cv_appr_reason              CONSTANT VARCHAR2(8)   := '中止理由';                        --中止理由
  cv_appr_date                CONSTANT VARCHAR2(10)  := '中止決済日';                      --中止決済日
  cv_ar_invoice_code          CONSTANT VARCHAR2(22)  := 'XXCMM_INVOICE_GRP_CODE';          --参照コード・売掛コード１（請求書）
  cv_ar_invoice               CONSTANT VARCHAR2(22)  := '売掛コード１（請求書）';          --売掛コード１（請求書）
  cv_ar_location_code         CONSTANT VARCHAR2(22)  := '売掛コード２（事業所）';          --売掛コード２（事業所）
  cv_ar_others_code           CONSTANT VARCHAR2(22)  := '売掛コード３（その他）';          --売掛コード３（その他）
  cv_table                    CONSTANT VARCHAR2(5)   := 'TABLE';                           --テーブルトークン
  cv_invoice_class            CONSTANT VARCHAR2(29)  := 'XXCMM_CUST_SEKYUSYO_HAKKO_KBN';   --参照コード・請求書発行区分
  cv_invoice_kbn              CONSTANT VARCHAR2(14)  := '請求書発行区分';                  --請求書発行区分
  cv_invoice_issue_cycle      CONSTANT VARCHAR2(25)  := 'XXCMM_INVOICE_ISSUE_CYCLE';       --参照コード・請求書発行サイクル
  cv_invoice_cycle            CONSTANT VARCHAR2(18)  := '請求書発行サイクル';              --請求書発行サイクル
  cv_invoice_form             CONSTANT VARCHAR2(28)  := 'XXCMM_CUST_SEKYUSYO_SHUT_KSK';    --参照コード・請求書出力形式
  cv_invoice_ksk              CONSTANT VARCHAR2(14)  := '請求書出力形式';                  --請求書出力形式
  cv_payment_term_id          CONSTANT VARCHAR2(8)   := '支払条件';                        --支払条件
  cv_payment_term_second      CONSTANT VARCHAR2(11)  := '第2支払条件';                     --第2支払条件
  cv_payment_term_third       CONSTANT VARCHAR2(11)  := '第3支払条件';                     --第3支払条件
  cv_payment_term             CONSTANT VARCHAR2(14)  := '支払条件マスタ';                  --支払条件
  cv_xxcmm_chain_code         CONSTANT VARCHAR2(16)  := 'XXCMM_CHAIN_CODE';                --参照コード・チェーン店
  cv_sales_chain_code         CONSTANT VARCHAR2(26)  := 'チェーン店コード（販売先）';      --チェーン店コード（販売先）
  cv_delivery_chain_code      CONSTANT VARCHAR2(26)  := 'チェーン店コード（納品先）';      --チェーン店コード（納品先）
  cv_policy_chain_code        CONSTANT VARCHAR2(26)  := 'チェーン店コード（政策用）';      --チェーン店コード（政策用）
  cv_edi_chain                CONSTANT VARCHAR2(26)  := 'チェーン店コード（ＥＤＩ）';      --チェーン店コード（ＥＤＩ）
  cv_addon_cust_mst           CONSTANT VARCHAR2(18)  := '顧客追加情報マスタ';              --顧客追加情報マスタ（文字列）
  cv_edi_class                CONSTANT VARCHAR2(2)   := '18';                              --顧客区分・チェーン店
  cv_trust_corp               CONSTANT VARCHAR2(2)   := '13';                              --顧客区分・法人顧客（与信管理先）
  cv_store_code               CONSTANT VARCHAR2(10)  := '店舗コード';                      --店舗コード
  cv_postal_code              CONSTANT VARCHAR2(8)   := '郵便番号';                        --郵便番号
  cv_state                    CONSTANT VARCHAR2(8)   := '都道府県';                        --都道府県
  cv_city                     CONSTANT VARCHAR2(6)   := '市・区';                          --市・区
  cv_address1                 CONSTANT VARCHAR2(5)   := '住所1';                           --住所1
  cv_address2                 CONSTANT VARCHAR2(5)   := '住所2';                           --住所2
  cv_address3                 CONSTANT VARCHAR2(10)  := '地区コード';                      --地区コード
  cv_cust_chiku_code          CONSTANT VARCHAR2(21)  := 'XXCMM_CUST_CHIKU_CODE';           --参照コード・地区コード
  cv_credit_limit             CONSTANT VARCHAR2(21)  := '与信限度額';                      --与信限度額
  cv_decide_div               CONSTANT VARCHAR2(20)  := 'XXCMM_CUST_SOHYO_KBN';            --参照コード・判定区分
  cv_decide                   CONSTANT VARCHAR2(8)   := '判定区分';                        --判定区分
--
  cv_cust_acct_table          CONSTANT VARCHAR2(16)  := 'HZ_CUST_ACCOUNTS';                --顧客マスタ
  cv_lookup_values            CONSTANT VARCHAR2(20)  := 'FND_LOOKUP_VALUES_VL';            --参照表トークン
  cv_col_name                 CONSTANT VARCHAR2(14)  := 'INPUT_COL_NAME';                  --列名トークン
  cv_input_val                CONSTANT VARCHAR2(15)  := 'INPUT_COL_VALUE';                 --値トークン
  cv_cust_class               CONSTANT VARCHAR2(8)   := '顧客区分';                        --顧客区分（列名）
  cv_cust_class_us            CONSTANT VARCHAR2(10)  := 'CUST_CLASS';                      --顧客区分トークン
  cv_cust_name                CONSTANT VARCHAR2(8)   := '顧客名称';                        --顧客名称（列名）
  cv_cust_name_kana           CONSTANT VARCHAR2(12)  := '顧客名称カナ';                    --顧客名称カナ（列名）
  cv_ryaku                    CONSTANT VARCHAR2(4)   := '略称';                            --略称
  cv_date_format              CONSTANT VARCHAR2(10)  := 'YYYY-MM-DD';                      --日付書式
--
  cv_conc_request_id          CONSTANT VARCHAR2(15)  := 'CONC_REQUEST_ID';                 --要求ID取得用文字列
  cv_prog_appl_id             CONSTANT VARCHAR2(12)  := 'PROG_APPL_ID';                    --コンカレント・プログラム･アプリケーションID取得用文字列
  cv_conc_program_id          CONSTANT VARCHAR2(15)  := 'CONC_PROGRAM_ID';                 --コンカレント・プログラムID取得用文字列
--
  -- ===============================
  -- ユーザー定義グローバル型
  -- ===============================
--
  -- ===============================
  -- ユーザー定義グローバル変数
  -- ===============================
--
  /**********************************************************************************
   * Procedure Name   : cust_data_make_wk
   * Description      : ファイルアップロードI/Fテーブル取得処理(A-1)・顧客一括更新用ワークテーブル登録処理(A-2)
   ***********************************************************************************/
  PROCEDURE cust_data_make_wk(
    in_file_id              IN  NUMBER,       --   ファイルID
    iv_format_pattern       IN  VARCHAR2,     --   ファイルフォーマット
    ov_errbuf               OUT VARCHAR2,     --   エラー・メッセージ           --# 固定 #
    ov_retcode              OUT VARCHAR2,     --   リターン・コード             --# 固定 #
    ov_errmsg               OUT VARCHAR2)     --   ユーザー・エラー・メッセージ --# 固定 #
  IS
    -- ===============================
    -- 固定ローカル定数
    -- ===============================
    cv_prg_name   CONSTANT VARCHAR2(100) := 'cust_data_make_wk'; -- プログラム名
--
--#####################  固定ローカル変数宣言部 START   ########################
--
    lv_errbuf  VARCHAR2(5000);  -- エラー・メッセージ
    lv_retcode VARCHAR2(1);     -- リターン・コード
    lv_errmsg  VARCHAR2(5000);  -- ユーザー・エラー・メッセージ
--
--###########################  固定部 END   ####################################
--
    -- ===============================
    -- ユーザー宣言部
    -- ===============================
    -- *** ローカル定数 ***
--
    -- *** ローカル変数 ***
    -- 構造体宣言
    lr_cust_data_table       xxccp_common_pkg2.g_file_data_tbl;
--
    lv_item_errbuf           VARCHAR2(5000);  -- エラー・メッセージ
    lv_item_retcode          VARCHAR2(1);     -- リターン・コード
    lv_item_errmsg           VARCHAR2(5000);  -- ユーザー・エラー・メッセージ
--
    --各格納用変数
    lv_upload_file_name      xxccp_mrp_file_ul_interface.file_name%TYPE := NULL;  --ファイルアップロードIFテーブル.ファイル名
--
    lv_temp                  VARCHAR2(32767) := NULL;                     --顧客一括更新ワークテーブル登録用変数
    ln_index                 binary_integer;                              --文字列構造体参照用添字
    ln_first_data            NUMBER(1)       := 1;                        --ヘッダデータ識別子
    lr_cust_wk_table         xxcmm_wk_cust_batch_regist%ROWTYPE;          --ファイルアップロードIFテーブル型レコード変数
--
    ln_cust_id               hz_cust_accounts.cust_account_id%TYPE;       --ローカル変数顧客ID
    ln_party_id              hz_cust_accounts.party_id%TYPE;              --ローカル変数パーティID
    lv_customer_code         VARCHAR2(100)   := NULL;                     --ローカル変数・顧客コード
    lv_cust_code_mst         hz_cust_accounts.account_number%TYPE;        --顧客コード存在確認用変数
    ln_cust_addon_mst        xxcmm_cust_accounts.customer_id%TYPE;        --顧客追加情報存在確認用変数
    ln_cust_corp_mst         xxcmm_mst_corporate.customer_id%TYPE;        --顧客法人情報存在確認用変数
    lv_customer_class        VARCHAR2(100)   := NULL;                     --ローカル変数・顧客区分
    lv_cust_class_mst        hz_cust_accounts.customer_class_code%TYPE;   --顧客区分存在確認用変数
    lv_customer_name         VARCHAR2(500)   := NULL;                     --ローカル変数・顧客名称
    lv_cust_name_kana        VARCHAR2(500)   := NULL;                     --ローカル変数・顧客名称カナ
    lv_cust_name_ryaku       VARCHAR2(500)   := NULL;                     --ローカル変数・略称
    lv_customer_status       VARCHAR2(100)   := NULL;                     --ローカル変数・顧客ステータス
    lv_approval_reason       VARCHAR2(100)   := NULL;                     --ローカル変数・中止理由
    lv_appr_reason_mst       VARCHAR2(100)   := NULL;                     --ローカル変数・中止理由
    lv_approval_date         VARCHAR2(100)   := NULL;                     --ローカル変数・中止決済日
    lv_ar_invoice_code       VARCHAR2(100)   := NULL;                     --ローカル変数・売掛コード１（請求書）
    lv_ar_invoice_code_mst   VARCHAR2(100)   := NULL;                     --売掛コード１（請求書）存在確認用変数
    lv_ar_location_code      VARCHAR2(100)   := NULL;                     --ローカル変数・売掛コード２（事業所）
    lv_ar_others_code        VARCHAR2(100)   := NULL;                     --ローカル変数・売掛コード３（その他）
    lv_invoice_class         VARCHAR2(100)   := NULL;                     --ローカル変数・請求書発行区分
    lv_invoice_class_mst     VARCHAR2(100)   := NULL;                     --請求書発行区分存在確認用変数
    lv_invoice_cycle         VARCHAR2(100)   := NULL;                     --ローカル変数・請求書発行サイクル
    lv_invoice_cycle_mst     VARCHAR2(100)   := NULL;                     --請求書発行サイクル存在確認用変数
    lv_invoice_form          VARCHAR2(100)   := NULL;                     --ローカル変数・請求書出力形式
    lv_invoice_form_mst      VARCHAR2(100)   := NULL;                     --請求書出力形式存在確認用変数
    lv_payment_term_id       VARCHAR2(100)   := NULL;                     --ローカル変数・支払条件
    lv_payment_term_id_mst   VARCHAR2(100)   := NULL;                     --支払条件存在確認用変数
    lv_payment_term_second   VARCHAR2(100)   := NULL;                     --ローカル変数・第2支払条件
    lv_payment_second_mst    VARCHAR2(100)   := NULL;                     --第2支払条件存在確認用変数
    lv_payment_term_third    VARCHAR2(100)   := NULL;                     --ローカル変数・第3支払条件
    lv_payment_third_mst     VARCHAR2(100)   := NULL;                     --第3支払条件存在確認用変数
    lv_sales_chain_code      VARCHAR2(100)   := NULL;                     --ローカル変数・チェーン店コード（販売先）
    lv_sales_chain_code_mst  VARCHAR2(100)   := NULL;                     --チェーン店コード（販売先）存在確認用変数
    lv_delivery_chain_code   VARCHAR2(100)   := NULL;                     --ローカル変数・チェーン店コード（納品先）
    lv_deliv_chain_code_mst  VARCHAR2(100)   := NULL;                     --チェーン店コード（販売先）存在確認用変数
    lv_policy_chain_code     VARCHAR2(100)   := NULL;                     --ローカル変数・チェーン店コード（政策用）
    lv_edi_chain_code        VARCHAR2(100)   := NULL;                     --ローカル変数・チェーン店コード（ＥＤＩ）
    lv_edi_chain_mst         VARCHAR2(100)   := NULL;                     --チェーン店コード（ＥＤＩ）存在確認用変数
    lv_store_code            VARCHAR2(100)   := NULL;                     --ローカル変数・店舗コード
    lv_postal_code           VARCHAR2(100)   := NULL;                     --ローカル変数・郵便番号
    lv_state                 VARCHAR2(100)   := NULL;                     --ローカル変数・都道府県
    lv_city                  VARCHAR2(100)   := NULL;                     --ローカル変数・市・区
    lv_address1              VARCHAR2(500)   := NULL;                     --ローカル変数・住所1
    lv_address2              VARCHAR2(500)   := NULL;                     --ローカル変数・住所2
    lv_address3              VARCHAR2(500)   := NULL;                     --ローカル変数・地区コード
    lv_cust_chiku_code_mst   VARCHAR2(100)   := NULL;                     --地区コード存在確認用変数
    lv_credit_limit          VARCHAR2(100)   := NULL;                     --ローカル変数・与信限度額（文字）
    ln_credit_limit          NUMBER          := NULL;                     --ローカル変数・与信限度額（数値）
    lv_decide_div            VARCHAR2(100)   := NULL;                     --ローカル変数・判定区分
    lv_decide_div_mst        VARCHAR2(100)   := NULL;                     --判定区分存在確認用変数
--
    lv_cust_status_mst       hz_parties.duns_number_c%TYPE;               --顧客ステータス存在確認用変数
    lv_get_cust_status       hz_parties.duns_number_c%TYPE;               --顧客ステータス現行取得用変数
--
    lv_business_low_type     VARCHAR2(100)   := NULL;                     --ローカル変数・小分類
    lv_business_low_mst      xxcmm_cust_accounts.business_low_type%TYPE;  --小分類存在確認用変数
--
    lv_check_status          VARCHAR2(1)     := NULL;                     --項目チェック結果格納用変数
--
    -- ===============================
    -- ローカル・カーソル
    -- ===============================
    -- アップロードファイル存在確認カーソル
    CURSOR check_upload_file_cur(
      in_file_id  IN NUMBER,
      iv_format   IN VARCHAR2)
    IS
      SELECT xmf.file_name  file_name
      FROM   xxccp_mrp_file_ul_interface  xmf
      WHERE  xmf.file_id           = in_file_id
      AND    xmf.file_content_type = iv_format
      ;
    -- アップロードファイル存在確認カーソルレコード型
    check_upload_file_rec  check_upload_file_cur%ROWTYPE;
--
    -- 顧客コード存在確認カーソル
    CURSOR check_cust_code_cur(
      iv_cust_code IN VARCHAR2)
    IS
      SELECT hca.cust_account_id  cust_id,
             hca.account_number   cust_code,
             hca.party_id         party_id
      FROM   hz_cust_accounts     hca
      WHERE  hca.account_number = iv_cust_code
      ;
    -- 顧客コード存在確認カーソルレコード型
    check_cust_code_rec  check_cust_code_cur%ROWTYPE;
--
    -- 顧客追加情報存在確認カーソル
    CURSOR check_cust_addon_cur(
      in_cust_id  IN NUMBER)
    IS
      SELECT xca.customer_id      customer_id
      FROM   xxcmm_cust_accounts  xca
      WHERE  xca.customer_id    = in_cust_id
      ;
    -- 顧客追加情報存在確認カーソルレコード型
    check_cust_addon_rec  check_cust_addon_cur%ROWTYPE;
--
    -- 顧客法人情報存在確認カーソル
    CURSOR check_cust_corp_cur(
      in_cust_id  IN NUMBER)
    IS
      SELECT xmc.customer_id      customer_id
      FROM   xxcmm_mst_corporate  xmc
      WHERE  xmc.customer_id    = in_cust_id
      ;
    -- 顧客法人情報存在確認カーソルレコード型
    check_cust_corp_rec  check_cust_corp_cur%ROWTYPE;
--
    -- 顧客区分チェックカーソル
    CURSOR check_cust_class_cur(
      iv_cust_class IN VARCHAR2)
    IS
      SELECT flvv.lookup_code      cust_class
      FROM   fnd_lookup_values_vl  flvv
      WHERE  flvv.lookup_type = cv_customer_class
      AND    flvv.lookup_code = iv_cust_class
      ;
    -- 顧客区分チェックカーソルレコード型
    check_cust_class_rec  check_cust_class_cur%ROWTYPE;
--
    -- 業態（小分類）チェックカーソル
    CURSOR check_business_low_cur(
      iv_business_low_type IN VARCHAR2)
    IS
      SELECT flvv.lookup_code      business_low_type
      FROM   fnd_lookup_values_vl  flvv
      WHERE  flvv.lookup_type = cv_business_low_type
      AND    flvv.lookup_code = iv_business_low_type
      ;
    -- 業態（小分類）チェックカーソルレコード型
    check_business_low_rec  check_business_low_cur%ROWTYPE;
--
    -- 顧客ステータスチェックカーソル
    CURSOR check_cust_status_cur(
      iv_cust_status IN VARCHAR2)
    IS
      SELECT flvv.lookup_code      cust_status
      FROM   fnd_lookup_values_vl  flvv
      WHERE  flvv.lookup_type = cv_customer_status
      AND    flvv.lookup_code = iv_cust_status
      ;
    -- 顧客ステータスチェックカーソルレコード型
    check_cust_status_rec  check_cust_status_cur%ROWTYPE;
--
    -- 顧客ステータス取得カーソル
    CURSOR get_cust_status_cur(
      in_paty_id IN NUMBER)
    IS
      SELECT duns_number_c  cust_status
      FROM   hz_parties     hp
      WHERE  hp.party_id = in_paty_id
      ;
    -- 顧客ステータス取得カーソルレコード型
    get_cust_status_rec  get_cust_status_cur%ROWTYPE;
--
    -- 中止理由チェックカーソル
    CURSOR check_approval_reason_cur(
      iv_approval_reason IN VARCHAR2)
    IS
      SELECT flvv.lookup_code      approval_reason
      FROM   fnd_lookup_values_vl  flvv
      WHERE  flvv.lookup_type = cv_approval_reason
      AND    flvv.lookup_code = iv_approval_reason
      ;
    -- 中止理由チェックカーソルレコード型
    check_approval_reason_rec  check_approval_reason_cur%ROWTYPE;
--
    -- 売掛コード１（請求書）チェックカーソル
    CURSOR check_ar_invoice_code_cur(
      iv_ar_invoice_code IN VARCHAR2)
    IS
      SELECT flvv.lookup_code      ar_invoice_code
      FROM   fnd_lookup_values_vl  flvv
      WHERE  flvv.lookup_type = cv_ar_invoice_code
      AND    flvv.lookup_code = iv_ar_invoice_code
      ;
    -- 売掛コード１（請求書）チェックカーソルレコード型
    check_ar_invoice_code_rec  check_ar_invoice_code_cur%ROWTYPE;
--
    -- 請求書発行区分チェックカーソル
    CURSOR check_invoice_class_cur(
      iv_invoice_class IN VARCHAR2)
    IS
      SELECT flvv.lookup_code      invoice_class
      FROM   fnd_lookup_values_vl  flvv
      WHERE  flvv.lookup_type = cv_invoice_class
      AND    flvv.lookup_code = iv_invoice_class
      ;
    -- 請求書発行区分チェックカーソルレコード型
    check_invoice_class_rec  check_invoice_class_cur%ROWTYPE;
--
    -- 請求書発行サイクルチェックカーソル
    CURSOR check_invoice_cycle_cur(
      iv_invoice_cycle IN VARCHAR2)
    IS
      SELECT flvv.lookup_code      invoice_cycle
      FROM   fnd_lookup_values_vl  flvv
      WHERE  flvv.lookup_type = cv_invoice_issue_cycle
      AND    flvv.lookup_code = iv_invoice_cycle
      ;
    -- 請求書発行サイクルチェックカーソルレコード型
    check_invoice_cycle_rec  check_invoice_cycle_cur%ROWTYPE;
--
    -- 請求書出力形式チェックカーソル
    CURSOR check_invoice_form_cur(
      iv_invoice_form IN VARCHAR2)
    IS
      SELECT flvv.lookup_code      invoice_form
      FROM   fnd_lookup_values_vl  flvv
      WHERE  flvv.lookup_type = cv_invoice_form
      AND    flvv.lookup_code = iv_invoice_form
      ;
    -- 請求書出力形式チェックカーソルレコード型
    check_invoice_form_rec  check_invoice_form_cur%ROWTYPE;
--
    -- 支払条件チェックカーソル
    CURSOR check_payment_term_cur(
      iv_payment_term IN VARCHAR2)
    IS
      SELECT rt.name   payment_term_id
      FROM   ra_terms  rt
      WHERE  rt.name   = iv_payment_term
      AND    ROWNUM    = 1
      ;
    -- 支払条件チェックカーソルレコード型
    check_payment_term_rec  check_payment_term_cur%ROWTYPE;
--
    -- チェーン店コード（販売先）チェックカーソル
    CURSOR check_chain_code_cur(
      iv_chain_code IN VARCHAR2)
    IS
      SELECT flvv.lookup_code      chain_code
      FROM   fnd_lookup_values_vl  flvv
      WHERE  flvv.lookup_type = cv_xxcmm_chain_code
      AND    flvv.lookup_code = iv_chain_code
      ;
    -- チェーン店コード（販売先）チェックカーソルレコード型
    check_chain_code_rec  check_chain_code_cur%ROWTYPE;
--
    -- チェーン店コード（ＥＤＩ）チェックカーソル
    CURSOR check_edi_chain_cur(
      iv_edi_chain_code IN VARCHAR2)
    IS
      SELECT xca.edi_chain_code   edi_chain_code
      FROM   hz_cust_accounts     hca,
             xxcmm_cust_accounts  xca
      WHERE  hca.customer_class_code = cv_edi_class
      AND    hca.cust_account_id     = xca.customer_id
      AND    xca.edi_chain_code      = iv_edi_chain_code
      AND    ROWNUM = 1
      ;
    -- チェーン店コード（ＥＤＩ）チェックカーソルレコード型
    check_edi_chain_rec  check_edi_chain_cur%ROWTYPE;
--
    -- 地区コードチェックカーソル
    CURSOR check_cust_chiku_code_cur(
      iv_cust_chiku_code IN VARCHAR2)
    IS
      SELECT flvv.lookup_code      cust_chiku_code
      FROM   fnd_lookup_values_vl  flvv
      WHERE  flvv.lookup_type = cv_cust_chiku_code
      AND    flvv.lookup_code = iv_cust_chiku_code
      ;
    -- 地区コードチェックカーソルレコード型
    check_cust_chiku_code_rec  check_cust_chiku_code_cur%ROWTYPE;
--
    -- 判定区分チェックカーソル
    CURSOR check_decide_div_cur(
      iv_decide_div IN VARCHAR2)
    IS
      SELECT flvv.lookup_code      decide_div
      FROM   fnd_lookup_values_vl  flvv
      WHERE  flvv.lookup_type = cv_decide_div
      AND    flvv.lookup_code = iv_decide_div
      ;
    -- 判定区分チェックカーソルレコード型
    check_decide_div_rec  check_decide_div_cur%ROWTYPE;
--
  BEGIN
--
--##################  固定ステータス初期化部 START   ###################
--
    ov_retcode := cv_status_normal;
--
--###########################  固定部 END   ############################
--
    -- 顧客一括更新用CSV情報取得
    << check_upload_file_loop >>
    FOR check_upload_file_rec IN check_upload_file_cur( in_file_id,
                                                        iv_format_pattern)
    LOOP
      lv_upload_file_name := check_upload_file_rec.file_name;
    END LOOP check_upload_file_loop;
    -- 顧客一括更新用CSV情報取得失敗時、エラー
    IF (lv_upload_file_name IS NULL) THEN
      lv_errmsg := xxccp_common_pkg.get_msg(gv_xxcmm_msg_kbn,
                                            cv_no_csv_msg);
      lv_errbuf := lv_errmsg;
      RAISE get_csv_err_expt;
    END IF;
--
    --構造体初期化
    lr_cust_data_table.delete;
--
    --ファイルアップロードIFテーブルより、BLOBデータを変換した文字列構造体を取得する
    xxccp_common_pkg2.blob_to_varchar2(in_file_id,
                                       lr_cust_data_table,
                                       lv_errbuf,
                                       lv_retcode,
                                       lv_errmsg);
    IF (lv_retcode = cv_status_error) THEN
      lv_errmsg := xxccp_common_pkg.get_msg(gv_xxcmm_msg_kbn,
                                            cv_no_csv_msg);
      lv_errbuf := lv_errmsg;
      RAISE get_csv_err_expt;
    END IF;
--
    <<cust_data_wk_loop>>
    FOR ln_index IN lr_cust_data_table.first..lr_cust_data_table.last LOOP
      --エラーチェック変数初期化
      lv_check_status := cv_status_normal;
      --取得した文字列構造体をエラーチェック後、挿入
      lv_temp := lr_cust_data_table(ln_index);
--
      --初回のみヘッダチェック
      IF (ln_first_data = 1) THEN
        ln_first_data := 0;
        --顧客区分取得
        lv_customer_class := xxccp_common_pkg.char_delim_partition(  lv_temp
                                                                    ,cv_comma
                                                                    ,1);
        --取得した文字列構造体の１行１項目目が「顧客区分」以外の場合はエラーとする
        IF (lv_customer_class <> cv_cust_class) THEN
          gv_out_msg := xxccp_common_pkg.get_msg(
                           iv_application  => gv_xxcmm_msg_kbn
                          ,iv_name         => cv_invalid_header_msg
                         );
          lv_errmsg := gv_out_msg;
          lv_errbuf := gv_out_msg;
          RAISE invalid_data_expt;
        END IF;
      END IF;
--
      --ヘッダデータ読み飛ばし
      IF (lv_customer_class = cv_cust_class) THEN
        ln_first_data := 0;
      ELSE
        --顧客コード取得
        lv_customer_code := xxccp_common_pkg.char_delim_partition(  lv_temp
                                                                   ,cv_comma
                                                                   ,5);
        --顧客コードの必須チェック
        IF   (lv_customer_code IS NULL)
          OR (lv_customer_code = cv_null_bar) THEN
          lv_check_status := cv_status_error;
          lv_retcode      := cv_status_error;
          --顧客コード必須エラーメッセージ取得
          gv_out_msg := xxccp_common_pkg.get_msg(
                           iv_application  => gv_xxcmm_msg_kbn
                          ,iv_name         => cv_required_err_msg
                          ,iv_token_name1  => cv_cust_code
                          ,iv_token_value1 => lv_customer_code
                          ,iv_token_name2  => cv_col_name
                          ,iv_token_value2 => cv_cust
                         );
          FND_FILE.PUT_LINE(
             which  => FND_FILE.LOG
            ,buff   => gv_out_msg);
        END IF;
--
        IF (lv_customer_code IS NOT NULL) THEN
          --顧客コード存在チェック
          << check_cust_code_loop >>
          FOR check_cust_code_rec IN check_cust_code_cur( lv_customer_code )
          LOOP
            lv_cust_code_mst := check_cust_code_rec.cust_code;
            ln_cust_id       := check_cust_code_rec.cust_id;
            ln_party_id      := check_cust_code_rec.party_id;
          END LOOP check_cust_code_loop;
          IF (lv_cust_code_mst IS NULL) THEN
            lv_check_status := cv_status_error;
            lv_retcode      := cv_status_error;
            --顧客コードマスター存在チェックエラーメッセージ取得
            gv_out_msg := xxccp_common_pkg.get_msg(
                             iv_application  => gv_xxcmm_msg_kbn
                            ,iv_name         => cv_mst_err_msg
                            ,iv_token_name1  => cv_cust_code
                            ,iv_token_value1 => lv_customer_code
                            ,iv_token_name2  => cv_col_name
                            ,iv_token_value2 => cv_cust
                            ,iv_token_name3  => cv_input_val
                            ,iv_token_value3 => lv_customer_code
                            ,iv_token_name4  => cv_table
                            ,iv_token_value4 => cv_cust_acct_table
                           );
            FND_FILE.PUT_LINE(
               which  => FND_FILE.LOG
              ,buff   => gv_out_msg);
          END IF;
        END IF;
--
        --顧客追加情報存在チェック
        IF (ln_cust_id IS NOT NULL) THEN
          --顧客追加情報存在チェック
          << check_cust_addon_loop >>
          FOR check_cust_addon_rec IN check_cust_addon_cur( ln_cust_id )
          LOOP
            ln_cust_addon_mst := check_cust_addon_rec.customer_id;
          END LOOP check_cust_addon_loop;
        END IF;
        IF (ln_cust_addon_mst IS NULL) THEN
          --顧客追加情報エラー
            lv_check_status := cv_status_error;
            lv_retcode      := cv_status_error;
            --顧客コードマスター存在チェックエラーメッセージ取得
            gv_out_msg := xxccp_common_pkg.get_msg(
                             iv_application  => gv_xxcmm_msg_kbn
                            ,iv_name         => cv_cust_addon_err_msg
                            ,iv_token_name1  => cv_cust_code
                            ,iv_token_value1 => lv_customer_code
                           );
            FND_FILE.PUT_LINE(
               which  => FND_FILE.LOG
              ,buff   => gv_out_msg);
        END IF;
--
        --顧客区分取得
        lv_customer_class := xxccp_common_pkg.char_delim_partition(  lv_temp
                                                                    ,cv_comma
                                                                    ,1);
        --顧客区分存在チェック
        << check_cust_class_loop >>
        FOR check_cust_class_rec IN check_cust_class_cur( lv_customer_class )
        LOOP
          lv_cust_class_mst := check_cust_class_rec.cust_class;
        END LOOP check_cust_class_loop;
        IF (lv_cust_class_mst IS NULL) THEN
          lv_check_status   := cv_status_error;
          lv_retcode        := cv_status_error;
          --顧客区分参照表存在チェックエラーメッセージ取得
          gv_out_msg := xxccp_common_pkg.get_msg(
                           iv_application  => gv_xxcmm_msg_kbn
                          ,iv_name         => cv_lookup_err_msg
                          ,iv_token_name1  => cv_cust_code
                          ,iv_token_value1 => lv_customer_code
                          ,iv_token_name2  => cv_col_name
                          ,iv_token_value2 => cv_cust_class
                          ,iv_token_name3  => cv_input_val
                          ,iv_token_value3 => lv_customer_class
                         );
          FND_FILE.PUT_LINE(
             which  => FND_FILE.LOG
            ,buff   => gv_out_msg);
        END IF;
        --顧客区分の型・桁数チェック
        xxccp_common_pkg2.upload_item_check( cv_cust_class      --項目名称
                                            ,lv_customer_class  --顧客区分
                                            ,2                  --項目長
                                            ,NULL               --項目長（小数点以下）
                                            ,cv_null_ok         --必須フラグ
                                            ,cv_element_vc2     --属性（0・検証なし、1、数値、2、日付）
                                            ,lv_item_errbuf     --エラーバッファ
                                            ,lv_item_retcode    --エラーコード
                                            ,lv_item_errmsg);   --エラーメッセージ
        --顧客区分が存在し、かつ型・桁数チェックエラー時
        IF (lv_customer_class IS NOT NULL)
          AND (lv_item_retcode <> cv_status_normal) THEN
          lv_check_status := cv_status_error;
--不具合ID007 2007/02/24 add start
          lv_retcode      := cv_status_error;
--add end
          --顧客区分エラーメッセージ取得
          gv_out_msg := xxccp_common_pkg.get_msg(
                           iv_application  => gv_xxcmm_msg_kbn
                          ,iv_name         => cv_val_form_err_msg
                          ,iv_token_name1  => cv_cust_code
                          ,iv_token_value1 => lv_customer_code
                          ,iv_token_name2  => cv_col_name
                          ,iv_token_value2 => cv_cust_class
                          ,iv_token_name3  => cv_input_val
                          ,iv_token_value3 => lv_customer_class
                         );
          FND_FILE.PUT_LINE(
             which  => FND_FILE.LOG
            ,buff   => gv_out_msg);
          FND_FILE.PUT_LINE(
             which  => FND_FILE.LOG
            ,buff   => lv_item_errmsg);
        END IF;
--
        --顧客名称取得
        lv_customer_name := xxccp_common_pkg.char_delim_partition(  lv_temp
                                                                   ,cv_comma
                                                                   ,6);
        --顧客名称の必須チェック
        IF (lv_customer_name = cv_null_bar) THEN
          lv_check_status := cv_status_error;
          lv_retcode      := cv_status_error;
          --顧客名称必須エラーメッセージ取得
          gv_out_msg := xxccp_common_pkg.get_msg(
                           iv_application  => gv_xxcmm_msg_kbn
                          ,iv_name         => cv_required_err_msg
                          ,iv_token_name1  => cv_cust_code
                          ,iv_token_value1 => lv_customer_code
                          ,iv_token_name2  => cv_col_name
                          ,iv_token_value2 => cv_cust_name
                         );
          FND_FILE.PUT_LINE(
             which  => FND_FILE.LOG
            ,buff   => gv_out_msg);
        END IF;
--
        IF (lv_customer_name IS NOT NULL) THEN
          --顧客名称の型・桁数チェック
          xxccp_common_pkg2.upload_item_check( cv_cust_name      --項目名称
                                              ,lv_customer_name  --顧客名称
                                              ,100               --項目長
                                              ,NULL              --項目長（小数点以下）
                                              ,cv_null_ok        --必須フラグ
                                              ,cv_element_vc2    --属性（0・検証なし、1、数値、2、日付）
                                              ,lv_item_errbuf    --エラーバッファ
                                              ,lv_item_retcode   --エラーコード
                                              ,lv_item_errmsg);  --エラーメッセージ
          --顧客名称が存在し、かつ型・桁数チェックエラー時
          IF (lv_item_retcode <> cv_status_normal) THEN
            lv_check_status := cv_status_error;
            lv_retcode      := cv_status_error;
            --顧客名称エラーメッセージ取得
            gv_out_msg := xxccp_common_pkg.get_msg(
                             iv_application  => gv_xxcmm_msg_kbn
                            ,iv_name         => cv_val_form_err_msg
                            ,iv_token_name1  => cv_cust_code
                            ,iv_token_value1 => lv_customer_code
                            ,iv_token_name2  => cv_col_name
                            ,iv_token_value2 => cv_cust_name
                            ,iv_token_name3  => cv_input_val
                            ,iv_token_value3 => lv_customer_name
                           );
            FND_FILE.PUT_LINE(
               which  => FND_FILE.LOG
              ,buff   => gv_out_msg);
            FND_FILE.PUT_LINE(
               which  => FND_FILE.LOG
              ,buff   => lv_item_errmsg);
          END IF;
        END IF;
--
        --顧客名称カナ取得
        lv_cust_name_kana := xxccp_common_pkg.char_delim_partition(  lv_temp
                                                                     ,cv_comma
                                                                     ,7);
        --顧客名称カナの型・桁数チェック
        xxccp_common_pkg2.upload_item_check( cv_cust_name_kana  --項目名称カナ
                                            ,lv_cust_name_kana  --顧客名称カナ
                                            ,50                 --項目長
                                            ,NULL               --項目長（小数点以下）
                                            ,cv_null_ok         --必須フラグ
                                            ,cv_element_vc2     --属性（0・検証なし、1、数値、2、日付）
                                            ,lv_item_errbuf     --エラーバッファ
                                            ,lv_item_retcode    --エラーコード
                                            ,lv_item_errmsg);   --エラーメッセージ
        --顧客名称カナが存在し、かつ型・桁数チェックエラー時
        IF (lv_item_retcode <> cv_status_normal) THEN
          lv_check_status := cv_status_error;
          lv_retcode      := cv_status_error;
          --顧客名称カナエラーメッセージ取得
          gv_out_msg := xxccp_common_pkg.get_msg(
                           iv_application  => gv_xxcmm_msg_kbn
                          ,iv_name         => cv_val_form_err_msg
                          ,iv_token_name1  => cv_cust_code
                          ,iv_token_value1 => lv_customer_code
                          ,iv_token_name2  => cv_col_name
                          ,iv_token_value2 => cv_cust_name_kana
                          ,iv_token_name3  => cv_input_val
                          ,iv_token_value3 => lv_cust_name_kana
                         );
          FND_FILE.PUT_LINE(
             which  => FND_FILE.LOG
            ,buff   => gv_out_msg);
          FND_FILE.PUT_LINE(
             which  => FND_FILE.LOG
            ,buff   => lv_item_errmsg);
        END IF;
        --顧客名称カナの全角カタカナチェック
        IF    (lv_cust_name_kana <> cv_null_bar)
          AND (xxccp_common_pkg.chk_double_byte_kana( lv_cust_name_kana ) = FALSE) THEN
          lv_check_status := cv_status_error;
          lv_retcode      := cv_status_error;
          --全角カタカナチェックエラーメッセージ取得
          gv_out_msg := xxccp_common_pkg.get_msg(
                           iv_application  => gv_xxcmm_msg_kbn
                          ,iv_name         => cv_double_byte_kana_msg
                          ,iv_token_name1  => cv_cust_code
                          ,iv_token_value1 => lv_customer_code
                          ,iv_token_name2  => cv_col_name
                          ,iv_token_value2 => cv_cust_name_kana
                          ,iv_token_name3  => cv_input_val
                          ,iv_token_value3 => lv_cust_name_kana
                         );
          FND_FILE.PUT_LINE(
             which  => FND_FILE.LOG
            ,buff   => gv_out_msg);
        END IF;
--
        --略称取得
        lv_cust_name_ryaku := xxccp_common_pkg.char_delim_partition(  lv_temp
                                                                     ,cv_comma
                                                                     ,8);
--
        --略称の型・桁数チェック
        xxccp_common_pkg2.upload_item_check( cv_ryaku            --項目名称カナ
                                            ,lv_cust_name_ryaku  --顧客名称カナ
                                            ,50                  --項目長
                                            ,NULL                --項目長（小数点以下）
                                            ,cv_null_ok          --必須フラグ
                                            ,cv_element_vc2      --属性（0・検証なし、1、数値、2、日付）
                                            ,lv_item_errbuf      --エラーバッファ
                                            ,lv_item_retcode     --エラーコード
                                            ,lv_item_errmsg);    --エラーメッセージ
        --略称型・桁数チェックエラー時
        IF (lv_item_retcode <> cv_status_normal) THEN
          lv_check_status := cv_status_error;
          lv_retcode      := cv_status_error;
          --略称エラーメッセージ取得
          gv_out_msg := xxccp_common_pkg.get_msg(
                           iv_application  => gv_xxcmm_msg_kbn
                          ,iv_name         => cv_val_form_err_msg
                          ,iv_token_name1  => cv_cust_code
                          ,iv_token_value1 => lv_customer_code
                          ,iv_token_name2  => cv_col_name
                          ,iv_token_value2 => cv_ryaku
                          ,iv_token_name3  => cv_input_val
                          ,iv_token_value3 => lv_cust_name_ryaku
                         );
          FND_FILE.PUT_LINE(
             which  => FND_FILE.LOG
            ,buff   => gv_out_msg);
          FND_FILE.PUT_LINE(
             which  => FND_FILE.LOG
            ,buff   => lv_item_errmsg);
        END IF;
--
        --業態（小分類）取得
        lv_business_low_type := xxccp_common_pkg.char_delim_partition(  lv_temp
                                                                       ,cv_comma
                                                                       ,30);
        --業態（小分類）の必須チェック
        IF (lv_business_low_type = cv_null_bar) THEN
          lv_check_status := cv_status_error;
          lv_retcode      := cv_status_error;
          --業態（小分類）必須エラーメッセージ取得
          gv_out_msg := xxccp_common_pkg.get_msg(
                           iv_application  => gv_xxcmm_msg_kbn
                          ,iv_name         => cv_required_err_msg
                          ,iv_token_name1  => cv_cust_code
                          ,iv_token_value1 => lv_customer_code
                          ,iv_token_name2  => cv_col_name
                          ,iv_token_value2 => cv_bus_low_type
                         );
          FND_FILE.PUT_LINE(
             which  => FND_FILE.LOG
            ,buff   => gv_out_msg);
        END IF;
        --業態（小分類）が-でない場合
        IF (lv_business_low_type <> cv_null_bar) THEN
          --業態（小分類）存在チェック
          << check_business_low_type_loop >>
          FOR check_business_low_rec IN check_business_low_cur( lv_business_low_type )
          LOOP
            lv_business_low_mst := check_business_low_rec.business_low_type;
          END LOOP check_business_low_type_loop;
          IF (lv_business_low_mst IS NULL) THEN
            lv_check_status   := cv_status_error;
            lv_retcode        := cv_status_error;
            --業態（小分類）参照表存在チェックエラーメッセージ取得
            gv_out_msg := xxccp_common_pkg.get_msg(
                             iv_application  => gv_xxcmm_msg_kbn
                            ,iv_name         => cv_lookup_err_msg
                            ,iv_token_name1  => cv_cust_code
                            ,iv_token_value1 => lv_customer_code
                            ,iv_token_name2  => cv_col_name
                            ,iv_token_value2 => cv_bus_low_type
                            ,iv_token_name3  => cv_input_val
                            ,iv_token_value3 => lv_business_low_type
                           );
            FND_FILE.PUT_LINE(
               which  => FND_FILE.LOG
              ,buff   => gv_out_msg);
          END IF;
          --業態（小分類）チェック
          xxccp_common_pkg2.upload_item_check( cv_bus_low_type       --業態（小分類）
                                              ,lv_business_low_type  --業態（小分類）
                                              ,2                     --項目長
                                              ,NULL                  --項目長（小数点以下）
                                              ,cv_null_ok            --必須フラグ
                                              ,cv_element_vc2        --属性（0・検証なし、1、数値、2、日付）
                                              ,lv_item_errbuf        --エラーバッファ
                                              ,lv_item_retcode       --エラーコード
                                              ,lv_item_errmsg);      --エラーメッセージ
          --業態（小分類）型・桁数チェックエラー時
          IF (lv_item_retcode <> cv_status_normal) THEN
            lv_check_status := cv_status_error;
            lv_retcode      := cv_status_error;
            --業態（小分類）エラーメッセージ取得
            gv_out_msg := xxccp_common_pkg.get_msg(
                             iv_application  => gv_xxcmm_msg_kbn
                            ,iv_name         => cv_val_form_err_msg
                            ,iv_token_name1  => cv_cust_code
                            ,iv_token_value1 => lv_customer_code
                            ,iv_token_name2  => cv_col_name
                            ,iv_token_value2 => cv_bus_low_type
                            ,iv_token_name3  => cv_input_val
                            ,iv_token_value3 => lv_business_low_type
                           );
            FND_FILE.PUT_LINE(
               which  => FND_FILE.LOG
              ,buff   => gv_out_msg
            );
            FND_FILE.PUT_LINE(
               which  => FND_FILE.LOG
              ,buff   => lv_item_errmsg
            );
          END IF;
        END IF;
--
        --顧客ステータス取得
        lv_customer_status := xxccp_common_pkg.char_delim_partition(  lv_temp
                                                                     ,cv_comma
                                                                     ,9);
        --顧客ステータスの必須チェック
        IF (lv_customer_status = cv_null_bar) THEN
          lv_check_status := cv_status_error;
          lv_retcode      := cv_status_error;
          --顧客ステータス必須エラーメッセージ取得
          gv_out_msg := xxccp_common_pkg.get_msg(
                           iv_application  => gv_xxcmm_msg_kbn
                          ,iv_name         => cv_required_err_msg
                          ,iv_token_name1  => cv_cust_code
                          ,iv_token_value1 => lv_customer_code
                          ,iv_token_name2  => cv_col_name
                          ,iv_token_value2 => cv_cust_status
                         );
          FND_FILE.PUT_LINE(
             which  => FND_FILE.LOG
            ,buff   => gv_out_msg
          );
        END IF;
        --顧客ステータスが-でない場合
        IF (lv_customer_status <> cv_null_bar) THEN
          --顧客ステータス存在チェック
          << check_cust_status_loop >>
          FOR check_cust_status_rec IN check_cust_status_cur( lv_customer_status )
          LOOP
            lv_cust_status_mst := check_cust_status_rec.cust_status;
          END LOOP check_cust_status_loop;
          IF (lv_cust_status_mst IS NULL) THEN
            lv_check_status    := cv_status_error;
            lv_retcode         := cv_status_error;
            --顧客ステータス参照表存在チェックエラーメッセージ取得
            gv_out_msg := xxccp_common_pkg.get_msg(
                             iv_application  => gv_xxcmm_msg_kbn
                            ,iv_name         => cv_lookup_err_msg
                            ,iv_token_name1  => cv_cust_code
                            ,iv_token_value1 => lv_customer_code
                            ,iv_token_name2  => cv_col_name
                            ,iv_token_value2 => cv_cust_status
                            ,iv_token_name3  => cv_input_val
                            ,iv_token_value3 => lv_customer_status
                           );
            FND_FILE.PUT_LINE(
               which  => FND_FILE.LOG
              ,buff   => gv_out_msg
            );
          END IF;
          --顧客ステータスが参照表に存在する場合、変更チェック
          IF (lv_cust_status_mst IS NOT NULL) THEN
            --現行顧客ステータス取得
            << get_cust_status_loop >>
            FOR get_cust_status_rec IN get_cust_status_cur( ln_party_id )
            LOOP
              lv_get_cust_status := get_cust_status_rec.cust_status;
            END LOOP get_cust_status_loop;
            --ステータスが変更可能かチェック
            IF (xxcmm_003common_pkg.cust_status_update_allow( lv_customer_class
                                                             ,lv_get_cust_status
                                                             ,lv_customer_status) <> cv_status_normal) THEN
                lv_check_status  := cv_status_error;
                lv_retcode       := cv_status_error;
                --変更不能エラーメッセージ取得
                gv_out_msg := xxccp_common_pkg.get_msg(
                                 iv_application  => gv_xxcmm_msg_kbn
                                ,iv_name         => cv_status_func_err_msg
                                ,iv_token_name1  => cv_cust_code
                                ,iv_token_value1 => lv_customer_code
                                ,iv_token_name2  => cv_pre_status
                                ,iv_token_value2 => lv_get_cust_status
                                ,iv_token_name3  => cv_will_status
                                ,iv_token_value3 => lv_customer_status
                               );
                FND_FILE.PUT_LINE(
                   which  => FND_FILE.LOG
                  ,buff   => gv_out_msg
                );
            END IF;
            IF (lv_customer_status = cv_stop_approved) THEN
              --顧客ステータス変更チェック
              xxcmm_cust_sts_chg_chk_pkg.main( ln_cust_id
                                              ,lv_customer_status
                                              ,lv_item_retcode
                                              ,lv_item_errmsg);
              IF (lv_item_retcode = cv_modify_err) THEN
--不具合ID007 2007/02/24 modify start
--                lv_cust_status_mst := cv_status_error;
                lv_check_status  := cv_status_error;
--modify end
                lv_retcode       := cv_status_error;
                --顧客ステータス変更チェックエラーメッセージ取得
                gv_out_msg := xxccp_common_pkg.get_msg(
                                 iv_application  => gv_xxcmm_msg_kbn
                                ,iv_name         => cv_status_modify_err_msg
                                ,iv_token_name1  => cv_cust_code
                                ,iv_token_value1 => lv_customer_code
                                ,iv_token_name2  => cv_input_val
                                ,iv_token_value2 => lv_customer_status
                                ,iv_token_name3  => cv_ret_code
                                ,iv_token_value3 => lv_item_retcode
                                ,iv_token_name4  => cv_ret_msg
                                ,iv_token_value4 => lv_item_errmsg
                               );
                FND_FILE.PUT_LINE(
                   which  => FND_FILE.LOG
                  ,buff   => gv_out_msg
                );
              END IF;
            END IF;
          END IF;
        END IF;
--
        --中止理由取得
        lv_approval_reason := xxccp_common_pkg.char_delim_partition(  lv_temp
                                                                     ,cv_comma
                                                                     ,10);
        --中止理由が-でない場合
        IF (lv_approval_reason <> cv_null_bar) THEN
          --中止理由存在チェック
          << check_approval_reason_loop >>
          FOR check_approval_reason_rec IN check_approval_reason_cur( lv_approval_reason )
          LOOP
            lv_appr_reason_mst := check_approval_reason_rec.approval_reason;
          END LOOP check_approval_reason_loop;
          IF (lv_appr_reason_mst IS NULL) THEN
            lv_check_status   := cv_status_error;
            lv_retcode        := cv_status_error;
            --中止理由参照表存在チェックエラーメッセージ取得
            gv_out_msg := xxccp_common_pkg.get_msg(
                             iv_application  => gv_xxcmm_msg_kbn
                            ,iv_name         => cv_lookup_err_msg
                            ,iv_token_name1  => cv_cust_code
                            ,iv_token_value1 => lv_customer_code
                            ,iv_token_name2  => cv_col_name
                            ,iv_token_value2 => cv_appr_reason
                            ,iv_token_name3  => cv_input_val
                            ,iv_token_value3 => lv_approval_reason
                           );
            FND_FILE.PUT_LINE(
               which  => FND_FILE.LOG
              ,buff   => gv_out_msg);
          END IF;
          --中止理由型・桁数チェック
          xxccp_common_pkg2.upload_item_check( cv_appr_reason        --中止理由
                                              ,lv_approval_reason    --中止理由
                                              ,1                     --項目長
                                              ,NULL                  --項目長（小数点以下）
                                              ,cv_null_ok            --必須フラグ
                                              ,cv_element_vc2        --属性（0・検証なし、1、数値、2、日付）
                                              ,lv_item_errbuf        --エラーバッファ
                                              ,lv_item_retcode       --エラーコード
                                              ,lv_item_errmsg);      --エラーメッセージ
          --中止理由型・桁数チェックエラー時
          IF (lv_item_retcode <> cv_status_normal) THEN
            lv_check_status := cv_status_error;
            lv_retcode      := cv_status_error;
            --中止理由エラーメッセージ取得
            gv_out_msg := xxccp_common_pkg.get_msg(
                             iv_application  => gv_xxcmm_msg_kbn
                            ,iv_name         => cv_val_form_err_msg
                            ,iv_token_name1  => cv_cust_code
                            ,iv_token_value1 => lv_customer_code
                            ,iv_token_name2  => cv_col_name
                            ,iv_token_value2 => cv_appr_reason
                            ,iv_token_name3  => cv_input_val
                            ,iv_token_value3 => lv_approval_reason
                           );
            FND_FILE.PUT_LINE(
               which  => FND_FILE.LOG
              ,buff   => gv_out_msg
            );
            FND_FILE.PUT_LINE(
               which  => FND_FILE.LOG
              ,buff   => lv_item_errmsg
            );
          END IF;
        END IF;
--
        --中止決済日取得
        lv_approval_date := xxccp_common_pkg.char_delim_partition(  lv_temp
                                                                   ,cv_comma
                                                                   ,11);
        --中止決済日がNULLでない場合
        IF (lv_approval_date <> cv_null_bar) THEN
          --中止決済日型・桁数チェック
          xxccp_common_pkg2.upload_item_check( cv_appr_date      --中止決済日
                                              ,lv_approval_date  --中止決済日
                                              ,NULL              --項目長
                                              ,NULL              --項目長（小数点以下）
                                              ,cv_null_ok        --必須フラグ
                                              ,cv_element_dat    --属性（0・検証なし、1、数値、2、日付）
                                              ,lv_item_errbuf    --エラーバッファ
                                              ,lv_item_retcode   --エラーコード
                                              ,lv_item_errmsg);  --エラーメッセージ
          --中止決済日型・桁数チェックエラー時
          IF (lv_item_retcode <> cv_status_normal) THEN
            lv_check_status := cv_status_error;
            lv_retcode      := cv_status_error;
            --中止決済日エラーメッセージ取得
            gv_out_msg := xxccp_common_pkg.get_msg(
                             iv_application  => gv_xxcmm_msg_kbn
                            ,iv_name         => cv_val_form_err_msg
                            ,iv_token_name1  => cv_cust_code
                            ,iv_token_value1 => lv_customer_code
                            ,iv_token_name2  => cv_col_name
                            ,iv_token_value2 => cv_appr_date
                            ,iv_token_name3  => cv_input_val
                            ,iv_token_value3 => lv_approval_date
                           );
            FND_FILE.PUT_LINE(
               which  => FND_FILE.LOG
              ,buff   => gv_out_msg
            );
            FND_FILE.PUT_LINE(
               which  => FND_FILE.LOG
              ,buff   => lv_item_errmsg
            );
          END IF;
        END IF;
--
        --売掛コード１（請求書）取得
        lv_ar_invoice_code := xxccp_common_pkg.char_delim_partition(  lv_temp
                                                                     ,cv_comma
                                                                     ,14);
        --売掛コード１（請求書）が-でない場合
        IF (lv_ar_invoice_code <> cv_null_bar) THEN
          --売掛コード１（請求書）存在チェック
          << check_ar_invoice_code_loop >>
          FOR check_ar_invoice_code_rec IN check_ar_invoice_code_cur( lv_ar_invoice_code )
          LOOP
            lv_ar_invoice_code_mst := check_ar_invoice_code_rec.ar_invoice_code;
          END LOOP check_ar_invoice_code_loop;
          IF (lv_ar_invoice_code_mst IS NULL) THEN
            lv_check_status   := cv_status_error;
            lv_retcode        := cv_status_error;
            --売掛コード１（請求書）存在チェックエラーメッセージ取得
            gv_out_msg := xxccp_common_pkg.get_msg(
                             iv_application  => gv_xxcmm_msg_kbn
                            ,iv_name         => cv_lookup_err_msg
                            ,iv_token_name1  => cv_cust_code
                            ,iv_token_value1 => lv_customer_code
                            ,iv_token_name2  => cv_col_name
                            ,iv_token_value2 => cv_ar_invoice
                            ,iv_token_name3  => cv_input_val
                            ,iv_token_value3 => lv_ar_invoice_code
                           );
            FND_FILE.PUT_LINE(
               which  => FND_FILE.LOG
              ,buff   => gv_out_msg);
          END IF;
          --売掛コード１（請求書）型・桁数チェック
          xxccp_common_pkg2.upload_item_check( cv_ar_invoice       --売掛コード１（請求書）
                                              ,lv_ar_invoice_code  --売掛コード１（請求書）
                                              ,12                  --項目長
                                              ,NULL                --項目長（小数点以下）
                                              ,cv_null_ok          --必須フラグ
                                              ,cv_element_vc2      --属性（0・検証なし、1、数値、2、日付）
                                              ,lv_item_errbuf      --エラーバッファ
                                              ,lv_item_retcode     --エラーコード
                                              ,lv_item_errmsg);    --エラーメッセージ
          --売掛コード１（請求書）型・桁数チェックエラー時
          IF (lv_item_retcode <> cv_status_normal) THEN
            lv_check_status := cv_status_error;
            lv_retcode      := cv_status_error;
            --売掛コード１（請求書）エラーメッセージ取得
            gv_out_msg := xxccp_common_pkg.get_msg(
                             iv_application  => gv_xxcmm_msg_kbn
                            ,iv_name         => cv_val_form_err_msg
                            ,iv_token_name1  => cv_cust_code
                            ,iv_token_value1 => lv_customer_code
                            ,iv_token_name2  => cv_col_name
                            ,iv_token_value2 => cv_ar_invoice
                            ,iv_token_name3  => cv_input_val
                            ,iv_token_value3 => lv_ar_invoice_code
                           );
            FND_FILE.PUT_LINE(
               which  => FND_FILE.LOG
              ,buff   => gv_out_msg
            );
            FND_FILE.PUT_LINE(
               which  => FND_FILE.LOG
              ,buff   => lv_item_errmsg
            );
          END IF;
        END IF;
--
        --売掛コード２（事業所）取得
        lv_ar_location_code := xxccp_common_pkg.char_delim_partition(  lv_temp
                                                                      ,cv_comma
                                                                      ,15);
        --売掛コード２（事業所）が-でない場合
        IF (lv_ar_location_code <> cv_null_bar) THEN
          --売掛コード２（事業所）型・桁数チェック
          xxccp_common_pkg2.upload_item_check( cv_ar_location_code  --売掛コード２（事業所）
                                              ,lv_ar_location_code  --売掛コード２（事業所）
                                              ,12                   --項目長
                                              ,NULL                 --項目長（小数点以下）
                                              ,cv_null_ok           --必須フラグ
                                              ,cv_element_vc2       --属性（0・検証なし、1、数値、2、日付）
                                              ,lv_item_errbuf       --エラーバッファ
                                              ,lv_item_retcode      --エラーコード
                                              ,lv_item_errmsg);     --エラーメッセージ
          --売掛コード２（事業所）型・桁数チェックエラー時
          IF (lv_item_retcode <> cv_status_normal) THEN
            lv_check_status := cv_status_error;
            lv_retcode      := cv_status_error;
            --売掛コード２（事業所）エラーメッセージ取得
            gv_out_msg := xxccp_common_pkg.get_msg(
                             iv_application  => gv_xxcmm_msg_kbn
                            ,iv_name         => cv_val_form_err_msg
                            ,iv_token_name1  => cv_cust_code
                            ,iv_token_value1 => lv_customer_code
                            ,iv_token_name2  => cv_col_name
                            ,iv_token_value2 => cv_ar_location_code
                            ,iv_token_name3  => cv_input_val
                            ,iv_token_value3 => lv_ar_location_code
                           );
            FND_FILE.PUT_LINE(
               which  => FND_FILE.LOG
              ,buff   => gv_out_msg
            );
            FND_FILE.PUT_LINE(
               which  => FND_FILE.LOG
              ,buff   => lv_item_errmsg
            );
          END IF;
        END IF;
--
        --売掛コード３（その他）取得
        lv_ar_others_code := xxccp_common_pkg.char_delim_partition(  lv_temp
                                                                    ,cv_comma
                                                                    ,16);
        --売掛コード３（その他）が-でない場合
        IF (lv_ar_others_code <> cv_null_bar) THEN
          --売掛コード３（その他）型・桁数チェック
          xxccp_common_pkg2.upload_item_check( cv_ar_others_code  --売掛コード３（その他）
                                              ,lv_ar_others_code  --売掛コード３（その他）
                                              ,12                 --項目長
                                              ,NULL               --項目長（小数点以下）
                                              ,cv_null_ok         --必須フラグ
                                              ,cv_element_vc2     --属性（0・検証なし、1、数値、2、日付）
                                              ,lv_item_errbuf     --エラーバッファ
                                              ,lv_item_retcode    --エラーコード
                                              ,lv_item_errmsg);   --エラーメッセージ
          --売掛コード３（その他）型・桁数チェックエラー時
          IF (lv_item_retcode <> cv_status_normal) THEN
            lv_check_status := cv_status_error;
            lv_retcode      := cv_status_error;
            --売掛コード３（その他）エラーメッセージ取得
            gv_out_msg := xxccp_common_pkg.get_msg(
                             iv_application  => gv_xxcmm_msg_kbn
                            ,iv_name         => cv_val_form_err_msg
                            ,iv_token_name1  => cv_cust_code
                            ,iv_token_value1 => lv_customer_code
                            ,iv_token_name2  => cv_col_name
                            ,iv_token_value2 => cv_ar_others_code
                            ,iv_token_name3  => cv_input_val
                            ,iv_token_value3 => lv_ar_others_code
                           );
            FND_FILE.PUT_LINE(
               which  => FND_FILE.LOG
              ,buff   => gv_out_msg
            );
            FND_FILE.PUT_LINE(
               which  => FND_FILE.LOG
              ,buff   => lv_item_errmsg
            );
          END IF;
        END IF;
--
        --請求書発行区分取得
        lv_invoice_class := xxccp_common_pkg.char_delim_partition(  lv_temp
                                                                   ,cv_comma
                                                                   ,17);
        --請求書発行区分の必須チェック
        IF (lv_invoice_class = cv_null_bar) THEN
          lv_check_status := cv_status_error;
          lv_retcode      := cv_status_error;
          --請求書発行区分必須エラーメッセージ取得
          gv_out_msg := xxccp_common_pkg.get_msg(
                           iv_application  => gv_xxcmm_msg_kbn
                          ,iv_name         => cv_required_err_msg
                          ,iv_token_name1  => cv_cust_code
                          ,iv_token_value1 => lv_customer_code
                          ,iv_token_name2  => cv_col_name
                          ,iv_token_value2 => cv_invoice_kbn
                         );
          FND_FILE.PUT_LINE(
             which  => FND_FILE.LOG
            ,buff   => gv_out_msg);
        END IF;
        IF (lv_invoice_class <> cv_null_bar) THEN
          --請求書発行区分存在チェック
          << check_invoice_class_loop >>
          FOR check_invoice_class_rec IN check_invoice_class_cur( lv_invoice_class )
          LOOP
            lv_invoice_class_mst := check_invoice_class_rec.invoice_class;
          END LOOP check_invoice_class_loop;
          IF (lv_invoice_class_mst IS NULL) THEN
            lv_check_status   := cv_status_error;
            lv_retcode        := cv_status_error;
            --請求書発行区分存在チェックエラーメッセージ取得
            gv_out_msg := xxccp_common_pkg.get_msg(
                             iv_application  => gv_xxcmm_msg_kbn
                            ,iv_name         => cv_lookup_err_msg
                            ,iv_token_name1  => cv_cust_code
                            ,iv_token_value1 => lv_customer_code
                            ,iv_token_name2  => cv_col_name
                            ,iv_token_value2 => cv_invoice_kbn
                            ,iv_token_name3  => cv_input_val
                            ,iv_token_value3 => lv_invoice_class
                           );
            FND_FILE.PUT_LINE(
               which  => FND_FILE.LOG
              ,buff   => gv_out_msg);
          END IF;
          --請求書発行区分型・桁数チェック
          xxccp_common_pkg2.upload_item_check( cv_invoice_kbn    --請求書発行区分
                                              ,lv_invoice_class  --請求書発行区分
                                              ,1                 --項目長
                                              ,NULL              --項目長（小数点以下）
                                              ,cv_null_ok        --必須フラグ
                                              ,cv_element_vc2    --属性（0・検証なし、1、数値、2、日付）
                                              ,lv_item_errbuf    --エラーバッファ
                                              ,lv_item_retcode   --エラーコード
                                              ,lv_item_errmsg);  --エラーメッセージ
          --請求書発行区分型・桁数チェックエラー時
          IF (lv_item_retcode <> cv_status_normal) THEN
            lv_check_status := cv_status_error;
            lv_retcode      := cv_status_error;
            --請求書発行区分エラーメッセージ取得
            gv_out_msg := xxccp_common_pkg.get_msg(
                             iv_application  => gv_xxcmm_msg_kbn
                            ,iv_name         => cv_val_form_err_msg
                            ,iv_token_name1  => cv_cust_code
                            ,iv_token_value1 => lv_customer_code
                            ,iv_token_name2  => cv_col_name
                            ,iv_token_value2 => cv_invoice_kbn
                            ,iv_token_name3  => cv_input_val
                            ,iv_token_value3 => lv_invoice_class
                           );
            FND_FILE.PUT_LINE(
               which  => FND_FILE.LOG
              ,buff   => gv_out_msg
            );
            FND_FILE.PUT_LINE(
               which  => FND_FILE.LOG
              ,buff   => lv_item_errmsg
            );
          END IF;
        END IF;
--
        --請求書発行サイクル取得
        lv_invoice_cycle := xxccp_common_pkg.char_delim_partition(  lv_temp
                                                                   ,cv_comma
                                                                   ,18);
--
        --請求書発行サイクルが-でない場合
        IF (lv_invoice_cycle <> cv_null_bar) THEN
          --請求書発行サイクル存在チェック
          << check_invoice_cycle_loop >>
          FOR check_invoice_cycle_rec IN check_invoice_cycle_cur( lv_invoice_cycle )
          LOOP
            lv_invoice_cycle_mst := check_invoice_cycle_rec.invoice_cycle;
          END LOOP check_invoice_cycle_loop;
          IF (lv_invoice_cycle_mst IS NULL) THEN
            lv_check_status   := cv_status_error;
            lv_retcode        := cv_status_error;
            --請求書発行サイクル存在チェックエラーメッセージ取得
            gv_out_msg := xxccp_common_pkg.get_msg(
                             iv_application  => gv_xxcmm_msg_kbn
                            ,iv_name         => cv_lookup_err_msg
                            ,iv_token_name1  => cv_cust_code
                            ,iv_token_value1 => lv_customer_code
                            ,iv_token_name2  => cv_col_name
                            ,iv_token_value2 => cv_invoice_cycle
                            ,iv_token_name3  => cv_input_val
                            ,iv_token_value3 => lv_invoice_cycle
                           );
            FND_FILE.PUT_LINE(
               which  => FND_FILE.LOG
              ,buff   => gv_out_msg);
          END IF;
          --請求書発行サイクル型・桁数チェック
          xxccp_common_pkg2.upload_item_check( cv_invoice_cycle  --請求書発行サイクル
                                              ,lv_invoice_cycle  --請求書発行サイクル
                                              ,1                 --項目長
                                              ,NULL              --項目長（小数点以下）
                                              ,cv_null_ok        --必須フラグ
                                              ,cv_element_vc2    --属性（0・検証なし、1、数値、2、日付）
                                              ,lv_item_errbuf    --エラーバッファ
                                              ,lv_item_retcode   --エラーコード
                                              ,lv_item_errmsg);  --エラーメッセージ
          --請求書発行サイクル型・桁数チェックエラー時
          IF (lv_item_retcode <> cv_status_normal) THEN
            lv_check_status := cv_status_error;
            lv_retcode      := cv_status_error;
            --請求書発行サイクルエラーメッセージ取得
            gv_out_msg := xxccp_common_pkg.get_msg(
                             iv_application  => gv_xxcmm_msg_kbn
                            ,iv_name         => cv_val_form_err_msg
                            ,iv_token_name1  => cv_cust_code
                            ,iv_token_value1 => lv_customer_code
                            ,iv_token_name2  => cv_col_name
                            ,iv_token_value2 => cv_invoice_cycle
                            ,iv_token_name3  => cv_input_val
                            ,iv_token_value3 => lv_invoice_cycle
                           );
            FND_FILE.PUT_LINE(
               which  => FND_FILE.LOG
              ,buff   => gv_out_msg
            );
            FND_FILE.PUT_LINE(
               which  => FND_FILE.LOG
              ,buff   => lv_item_errmsg
            );
          END IF;
        END IF;
--
        --請求書出力形式取得
        lv_invoice_form  := xxccp_common_pkg.char_delim_partition(  lv_temp
                                                                   ,cv_comma
                                                                   ,19);
        --請求書出力形式が-でない場合
        IF (lv_invoice_form <> cv_null_bar) THEN
          --請求書出力形式存在チェック
          << check_invoice_form_loop >>
          FOR check_invoice_form_rec IN check_invoice_form_cur( lv_invoice_form )
          LOOP
            lv_invoice_form_mst := check_invoice_form_rec.invoice_form;
          END LOOP check_invoice_form_loop;
          IF (lv_invoice_form_mst IS NULL) THEN
            lv_check_status   := cv_status_error;
            lv_retcode        := cv_status_error;
            --請求書出力形式存在チェックエラーメッセージ取得
            gv_out_msg := xxccp_common_pkg.get_msg(
                             iv_application  => gv_xxcmm_msg_kbn
                            ,iv_name         => cv_lookup_err_msg
                            ,iv_token_name1  => cv_cust_code
                            ,iv_token_value1 => lv_customer_code
                            ,iv_token_name2  => cv_col_name
                            ,iv_token_value2 => cv_invoice_ksk
                            ,iv_token_name3  => cv_input_val
                            ,iv_token_value3 => lv_invoice_form
                           );
            FND_FILE.PUT_LINE(
               which  => FND_FILE.LOG
              ,buff   => gv_out_msg);
          END IF;
          --請求書出力形式型・桁数チェック
          xxccp_common_pkg2.upload_item_check( cv_invoice_ksk    --請求書出力形式
                                              ,lv_invoice_form   --請求書出力形式
                                              ,1                 --項目長
                                              ,NULL              --項目長（小数点以下）
                                              ,cv_null_ok        --必須フラグ
                                              ,cv_element_vc2    --属性（0・検証なし、1、数値、2、日付）
                                              ,lv_item_errbuf    --エラーバッファ
                                              ,lv_item_retcode   --エラーコード
                                              ,lv_item_errmsg);  --エラーメッセージ
          --請求書出力形式型・桁数チェックエラー時
          IF (lv_item_retcode <> cv_status_normal) THEN
            lv_check_status := cv_status_error;
            lv_retcode      := cv_status_error;
            --請求書出力形式エラーメッセージ取得
            gv_out_msg := xxccp_common_pkg.get_msg(
                             iv_application  => gv_xxcmm_msg_kbn
                            ,iv_name         => cv_val_form_err_msg
                            ,iv_token_name1  => cv_cust_code
                            ,iv_token_value1 => lv_customer_code
                            ,iv_token_name2  => cv_col_name
                            ,iv_token_value2 => cv_invoice_ksk
                            ,iv_token_name3  => cv_input_val
                            ,iv_token_value3 => lv_invoice_form
                           );
            FND_FILE.PUT_LINE(
               which  => FND_FILE.LOG
              ,buff   => gv_out_msg
            );
            FND_FILE.PUT_LINE(
               which  => FND_FILE.LOG
              ,buff   => lv_item_errmsg
            );
          END IF;
        END IF;
--
        --支払条件取得
        lv_payment_term_id := xxccp_common_pkg.char_delim_partition(  lv_temp
                                                                     ,cv_comma
                                                                     ,20);
--
        --支払条件の必須チェック
        IF (lv_payment_term_id = cv_null_bar) THEN
          lv_check_status := cv_status_error;
          lv_retcode      := cv_status_error;
          --支払条件必須エラーメッセージ取得
          gv_out_msg := xxccp_common_pkg.get_msg(
                           iv_application  => gv_xxcmm_msg_kbn
                          ,iv_name         => cv_required_err_msg
                          ,iv_token_name1  => cv_cust_code
                          ,iv_token_value1 => lv_customer_code
                          ,iv_token_name2  => cv_col_name
                          ,iv_token_value2 => cv_payment_term_id
                         );
          FND_FILE.PUT_LINE(
             which  => FND_FILE.LOG
            ,buff   => gv_out_msg);
        END IF;
        --支払条件が-でない場合
        IF (lv_payment_term_id <> cv_null_bar) THEN
          --支払条件存在チェック
          << check_payment_term_loop >>
          FOR check_payment_term_rec IN check_payment_term_cur( lv_payment_term_id )
          LOOP
            lv_payment_term_id_mst := check_payment_term_rec.payment_term_id;
          END LOOP check_payment_term_loop;
          IF (lv_payment_term_id_mst IS NULL) THEN
            lv_check_status   := cv_status_error;
            lv_retcode        := cv_status_error;
            --支払条件存在チェックエラーメッセージ取得
            gv_out_msg := xxccp_common_pkg.get_msg(
                             iv_application  => gv_xxcmm_msg_kbn
                            ,iv_name         => cv_mst_err_msg
                            ,iv_token_name1  => cv_cust_code
                            ,iv_token_value1 => lv_customer_code
                            ,iv_token_name2  => cv_col_name
                            ,iv_token_value2 => cv_payment_term_id
                            ,iv_token_name3  => cv_input_val
                            ,iv_token_value3 => lv_payment_term_id
                            ,iv_token_name4  => cv_table
                            ,iv_token_value4 => cv_payment_term
                           );
            FND_FILE.PUT_LINE(
               which  => FND_FILE.LOG
              ,buff   => gv_out_msg);
          END IF;
          --支払条件型・桁数チェック
          xxccp_common_pkg2.upload_item_check( cv_payment_term_id  --支払条件
                                              ,lv_payment_term_id  --支払条件
                                              ,8                   --項目長
                                              ,NULL                --項目長（小数点以下）
                                              ,cv_null_ok          --必須フラグ
                                              ,cv_element_vc2      --属性（0・検証なし、1、数値、2、日付）
                                              ,lv_item_errbuf      --エラーバッファ
                                              ,lv_item_retcode     --エラーコード
                                              ,lv_item_errmsg);    --エラーメッセージ
          --支払条件型・桁数チェックエラー時
          IF (lv_item_retcode <> cv_status_normal) THEN
            lv_check_status := cv_status_error;
            lv_retcode      := cv_status_error;
            --支払条件エラーメッセージ取得
            gv_out_msg := xxccp_common_pkg.get_msg(
                             iv_application  => gv_xxcmm_msg_kbn
                            ,iv_name         => cv_val_form_err_msg
                            ,iv_token_name1  => cv_cust_code
                            ,iv_token_value1 => lv_customer_code
                            ,iv_token_name2  => cv_col_name
                            ,iv_token_value2 => cv_payment_term_id
                            ,iv_token_name3  => cv_input_val
                            ,iv_token_value3 => lv_payment_term_id
                           );
            FND_FILE.PUT_LINE(
               which  => FND_FILE.LOG
              ,buff   => gv_out_msg
            );
            FND_FILE.PUT_LINE(
               which  => FND_FILE.LOG
              ,buff   => lv_item_errmsg
            );
          END IF;
        END IF;
--
        --第2支払条件取得
        lv_payment_term_second := xxccp_common_pkg.char_delim_partition(  lv_temp
                                                                         ,cv_comma
                                                                         ,21);
        --第2支払条件が-でない場合
        IF (lv_payment_term_second <> cv_null_bar) THEN
          --第2支払条件存在チェック
          << check_payment_term_loop >>
          FOR check_payment_term_rec IN check_payment_term_cur( lv_payment_term_second )
          LOOP
            lv_payment_second_mst := check_payment_term_rec.payment_term_id;
          END LOOP check_payment_term_loop;
          IF (lv_payment_second_mst IS NULL) THEN
            lv_check_status   := cv_status_error;
            lv_retcode        := cv_status_error;
            --第2支払条件存在チェックエラーメッセージ取得
            gv_out_msg := xxccp_common_pkg.get_msg(
                             iv_application  => gv_xxcmm_msg_kbn
                            ,iv_name         => cv_mst_err_msg
                            ,iv_token_name1  => cv_cust_code
                            ,iv_token_value1 => lv_customer_code
                            ,iv_token_name2  => cv_col_name
                            ,iv_token_value2 => cv_payment_term_second
                            ,iv_token_name3  => cv_input_val
                            ,iv_token_value3 => lv_payment_term_second
                            ,iv_token_name4  => cv_table
                            ,iv_token_value4 => cv_payment_term
                           );
            FND_FILE.PUT_LINE(
               which  => FND_FILE.LOG
              ,buff   => gv_out_msg);
          END IF;
          --第2支払条件型・桁数チェック
          xxccp_common_pkg2.upload_item_check( cv_payment_term_second  --第2支払条件
                                              ,lv_payment_term_second  --第2支払条件
                                              ,8                       --項目長
                                              ,NULL                    --項目長（小数点以下）
                                              ,cv_null_ok              --必須フラグ
                                              ,cv_element_vc2          --属性（0・検証なし、1、数値、2、日付）
                                              ,lv_item_errbuf          --エラーバッファ
                                              ,lv_item_retcode         --エラーコード
                                              ,lv_item_errmsg);        --エラーメッセージ
          --第2支払条件型・桁数チェックエラー時
          IF (lv_item_retcode <> cv_status_normal) THEN
            lv_check_status := cv_status_error;
            lv_retcode      := cv_status_error;
            --第2支払条件エラーメッセージ取得
            gv_out_msg := xxccp_common_pkg.get_msg(
                             iv_application  => gv_xxcmm_msg_kbn
                            ,iv_name         => cv_val_form_err_msg
                            ,iv_token_name1  => cv_cust_code
                            ,iv_token_value1 => lv_customer_code
                            ,iv_token_name2  => cv_col_name
                            ,iv_token_value2 => cv_payment_term_second
                            ,iv_token_name3  => cv_input_val
                            ,iv_token_value3 => lv_payment_term_second
                           );
            FND_FILE.PUT_LINE(
               which  => FND_FILE.LOG
              ,buff   => gv_out_msg
            );
            FND_FILE.PUT_LINE(
               which  => FND_FILE.LOG
              ,buff   => lv_item_errmsg
            );
          END IF;
        END IF;
--
        --第3支払条件取得
        lv_payment_term_third  := xxccp_common_pkg.char_delim_partition(  lv_temp
                                                                         ,cv_comma
                                                                         ,22);
        --第3支払条件が-でない場合
        IF (lv_payment_term_third <> cv_null_bar) THEN
          --第3支払条件存在チェック
          << check_payment_term_loop >>
          FOR check_payment_term_rec IN check_payment_term_cur( lv_payment_term_third )
          LOOP
            lv_payment_third_mst := check_payment_term_rec.payment_term_id;
          END LOOP check_payment_term_loop;
          IF (lv_payment_third_mst IS NULL) THEN
            lv_check_status   := cv_status_error;
            lv_retcode        := cv_status_error;
            --第3支払条件存在チェックエラーメッセージ取得
            gv_out_msg := xxccp_common_pkg.get_msg(
                             iv_application  => gv_xxcmm_msg_kbn
                            ,iv_name         => cv_mst_err_msg
                            ,iv_token_name1  => cv_cust_code
                            ,iv_token_value1 => lv_customer_code
                            ,iv_token_name2  => cv_col_name
                            ,iv_token_value2 => cv_payment_term_third
                            ,iv_token_name3  => cv_input_val
                            ,iv_token_value3 => lv_payment_term_third
                            ,iv_token_name4  => cv_table
                            ,iv_token_value4 => cv_payment_term
                           );
            FND_FILE.PUT_LINE(
               which  => FND_FILE.LOG
              ,buff   => gv_out_msg);
          END IF;
          --第3支払条件型・桁数チェック
          xxccp_common_pkg2.upload_item_check( cv_payment_term_third  --第3支払条件
                                              ,lv_payment_term_third  --第3支払条件
                                              ,8                      --項目長
                                              ,NULL                   --項目長（小数点以下）
                                              ,cv_null_ok             --必須フラグ
                                              ,cv_element_vc2         --属性（0・検証なし、1、数値、2、日付）
                                              ,lv_item_errbuf         --エラーバッファ
                                              ,lv_item_retcode        --エラーコード
                                              ,lv_item_errmsg);       --エラーメッセージ
          --第3支払条件型・桁数チェックエラー時
          IF (lv_item_retcode <> cv_status_normal) THEN
            lv_check_status := cv_status_error;
            lv_retcode      := cv_status_error;
            --第3支払条件エラーメッセージ取得
            gv_out_msg := xxccp_common_pkg.get_msg(
                             iv_application  => gv_xxcmm_msg_kbn
                            ,iv_name         => cv_val_form_err_msg
                            ,iv_token_name1  => cv_cust_code
                            ,iv_token_value1 => lv_customer_code
                            ,iv_token_name2  => cv_col_name
                            ,iv_token_value2 => cv_payment_term_third
                            ,iv_token_name3  => cv_input_val
                            ,iv_token_value3 => lv_payment_term_third
                           );
            FND_FILE.PUT_LINE(
               which  => FND_FILE.LOG
              ,buff   => gv_out_msg
            );
            FND_FILE.PUT_LINE(
               which  => FND_FILE.LOG
              ,buff   => lv_item_errmsg
            );
          END IF;
        END IF;
--
        --チェーン店コード（販売先）取得
        lv_sales_chain_code := xxccp_common_pkg.char_delim_partition(  lv_temp
                                                                      ,cv_comma
                                                                      ,23);
        --チェーン店コード（販売先）の必須チェック
        IF (lv_sales_chain_code = cv_null_bar) THEN
          lv_check_status := cv_status_error;
          lv_retcode      := cv_status_error;
          --チェーン店コード（販売先）必須エラーメッセージ取得
          gv_out_msg := xxccp_common_pkg.get_msg(
                           iv_application  => gv_xxcmm_msg_kbn
                          ,iv_name         => cv_required_err_msg
                          ,iv_token_name1  => cv_cust_code
                          ,iv_token_value1 => lv_customer_code
                          ,iv_token_name2  => cv_col_name
                          ,iv_token_value2 => cv_sales_chain_code
                         );
          FND_FILE.PUT_LINE(
             which  => FND_FILE.LOG
            ,buff   => gv_out_msg);
        END IF;
        --チェーン店コード（販売先）が-でない場合
        IF (lv_sales_chain_code <> cv_null_bar) THEN
          --チェーン店コード（販売先）存在チェック
          << check_chain_code_loop >>
          FOR check_chain_code_rec IN check_chain_code_cur( lv_sales_chain_code )
          LOOP
            lv_sales_chain_code_mst := check_chain_code_rec.chain_code;
          END LOOP check_chain_code_loop;
          IF (lv_sales_chain_code_mst IS NULL) THEN
            lv_check_status   := cv_status_error;
            lv_retcode        := cv_status_error;
            --チェーン店コード（販売先）チェックエラーメッセージ取得
            gv_out_msg := xxccp_common_pkg.get_msg(
                             iv_application  => gv_xxcmm_msg_kbn
                            ,iv_name         => cv_lookup_err_msg
                            ,iv_token_name1  => cv_cust_code
                            ,iv_token_value1 => lv_customer_code
                            ,iv_token_name2  => cv_col_name
                            ,iv_token_value2 => cv_sales_chain_code
                            ,iv_token_name3  => cv_input_val
                            ,iv_token_value3 => lv_sales_chain_code
                           );
            FND_FILE.PUT_LINE(
               which  => FND_FILE.LOG
              ,buff   => gv_out_msg);
          END IF;
          --チェーン店コード（販売先）型・桁数チェック
          xxccp_common_pkg2.upload_item_check( cv_sales_chain_code  --チェーン店コード（販売先）
                                              ,lv_sales_chain_code  --チェーン店コード（販売先）
                                              ,9                    --項目長
                                              ,NULL                 --項目長（小数点以下）
                                              ,cv_null_ok           --必須フラグ
                                              ,cv_element_vc2       --属性（0・検証なし、1、数値、2、日付）
                                              ,lv_item_errbuf       --エラーバッファ
                                              ,lv_item_retcode      --エラーコード
                                              ,lv_item_errmsg);     --エラーメッセージ
          --チェーン店コード（販売先）型・桁数チェックエラー時
          IF (lv_item_retcode <> cv_status_normal) THEN
            lv_check_status := cv_status_error;
            lv_retcode      := cv_status_error;
            --チェーン店コード（販売先）エラーメッセージ取得
            gv_out_msg := xxccp_common_pkg.get_msg(
                             iv_application  => gv_xxcmm_msg_kbn
                            ,iv_name         => cv_val_form_err_msg
                            ,iv_token_name1  => cv_cust_code
                            ,iv_token_value1 => lv_customer_code
                            ,iv_token_name2  => cv_col_name
                            ,iv_token_value2 => cv_sales_chain_code
                            ,iv_token_name3  => cv_input_val
                            ,iv_token_value3 => lv_sales_chain_code
                           );
            FND_FILE.PUT_LINE(
               which  => FND_FILE.LOG
              ,buff   => gv_out_msg
            );
            FND_FILE.PUT_LINE(
               which  => FND_FILE.LOG
              ,buff   => lv_item_errmsg
            );
          END IF;
        END IF;
--
        --チェーン店コード（納品先）取得
        lv_delivery_chain_code := xxccp_common_pkg.char_delim_partition(  lv_temp
                                                                         ,cv_comma
                                                                         ,25);
        --チェーン店コード（納品先）の必須チェック
        IF (lv_delivery_chain_code = cv_null_bar) THEN
          lv_check_status := cv_status_error;
          lv_retcode      := cv_status_error;
          --チェーン店コード（納品先）必須エラーメッセージ取得
          gv_out_msg := xxccp_common_pkg.get_msg(
                           iv_application  => gv_xxcmm_msg_kbn
                          ,iv_name         => cv_required_err_msg
                          ,iv_token_name1  => cv_cust_code
                          ,iv_token_value1 => lv_customer_code
                          ,iv_token_name2  => cv_col_name
                          ,iv_token_value2 => cv_delivery_chain_code
                         );
          FND_FILE.PUT_LINE(
             which  => FND_FILE.LOG
            ,buff   => gv_out_msg);
        END IF;
        --チェーン店コード（納品先）が-でない場合
        IF (lv_delivery_chain_code <> cv_null_bar) THEN
          --チェーン店コード（納品先）存在チェック
          << check_chain_code_loop >>
          FOR check_chain_code_rec IN check_chain_code_cur( lv_delivery_chain_code )
          LOOP
            lv_deliv_chain_code_mst := check_chain_code_rec.chain_code;
          END LOOP check_chain_code_loop;
          IF (lv_deliv_chain_code_mst IS NULL) THEN
            lv_check_status   := cv_status_error;
            lv_retcode        := cv_status_error;
            --チェーン店コード（納品先）チェックエラーメッセージ取得
            gv_out_msg := xxccp_common_pkg.get_msg(
                             iv_application  => gv_xxcmm_msg_kbn
                            ,iv_name         => cv_lookup_err_msg
                            ,iv_token_name1  => cv_cust_code
                            ,iv_token_value1 => lv_customer_code
                            ,iv_token_name2  => cv_col_name
                            ,iv_token_value2 => cv_delivery_chain_code
                            ,iv_token_name3  => cv_input_val
                            ,iv_token_value3 => lv_delivery_chain_code
                           );
            FND_FILE.PUT_LINE(
               which  => FND_FILE.LOG
              ,buff   => gv_out_msg);
          END IF;
          --チェーン店コード（納品先）型・桁数チェック
          xxccp_common_pkg2.upload_item_check( cv_delivery_chain_code  --チェーン店コード（納品先）
                                              ,lv_delivery_chain_code  --チェーン店コード（納品先）
                                              ,9                       --項目長
                                              ,NULL                    --項目長（小数点以下）
                                              ,cv_null_ok              --必須フラグ
                                              ,cv_element_vc2          --属性（0・検証なし、1、数値、2、日付）
                                              ,lv_item_errbuf          --エラーバッファ
                                              ,lv_item_retcode         --エラーコード
                                              ,lv_item_errmsg);        --エラーメッセージ
          --チェーン店コード（納品先）型・桁数チェックエラー時
          IF (lv_item_retcode <> cv_status_normal) THEN
            lv_check_status := cv_status_error;
            lv_retcode      := cv_status_error;
            --チェーン店コード（納品先）エラーメッセージ取得
            gv_out_msg := xxccp_common_pkg.get_msg(
                             iv_application  => gv_xxcmm_msg_kbn
                            ,iv_name         => cv_val_form_err_msg
                            ,iv_token_name1  => cv_cust_code
                            ,iv_token_value1 => lv_customer_code
                            ,iv_token_name2  => cv_col_name
                            ,iv_token_value2 => cv_delivery_chain_code
                            ,iv_token_name3  => cv_input_val
                            ,iv_token_value3 => lv_delivery_chain_code
                           );
            FND_FILE.PUT_LINE(
               which  => FND_FILE.LOG
              ,buff   => gv_out_msg
            );
            FND_FILE.PUT_LINE(
               which  => FND_FILE.LOG
              ,buff   => lv_item_errmsg
            );
          END IF;
        END IF;
--
        --チェーン店コード（政策用）取得
        lv_policy_chain_code := xxccp_common_pkg.char_delim_partition(  lv_temp
                                                                       ,cv_comma
                                                                       ,27);
        --チェーン店コード（政策用）が-でない場合
        IF (lv_policy_chain_code <> cv_null_bar) THEN
          --チェーン店コード（政策用）型・桁数チェック
          xxccp_common_pkg2.upload_item_check( cv_policy_chain_code  --チェーン店コード（政策用）
                                              ,lv_policy_chain_code  --チェーン店コード（政策用）
                                              ,30                    --項目長
                                              ,NULL                  --項目長（小数点以下）
                                              ,cv_null_ok            --必須フラグ
                                              ,cv_element_vc2        --属性（0・検証なし、1、数値、2、日付）
                                              ,lv_item_errbuf        --エラーバッファ
                                              ,lv_item_retcode       --エラーコード
                                              ,lv_item_errmsg);      --エラーメッセージ
          --チェーン店コード（政策用）型・桁数チェックエラー時
          IF (lv_item_retcode <> cv_status_normal) THEN
            lv_check_status := cv_status_error;
            lv_retcode      := cv_status_error;
            --チェーン店コード（政策用）エラーメッセージ取得
            gv_out_msg := xxccp_common_pkg.get_msg(
                             iv_application  => gv_xxcmm_msg_kbn
                            ,iv_name         => cv_val_form_err_msg
                            ,iv_token_name1  => cv_cust_code
                            ,iv_token_value1 => lv_customer_code
                            ,iv_token_name2  => cv_col_name
                            ,iv_token_value2 => cv_policy_chain_code
                            ,iv_token_name3  => cv_input_val
                            ,iv_token_value3 => lv_policy_chain_code
                           );
            FND_FILE.PUT_LINE(
               which  => FND_FILE.LOG
              ,buff   => gv_out_msg
            );
            FND_FILE.PUT_LINE(
               which  => FND_FILE.LOG
              ,buff   => lv_item_errmsg
            );
          END IF;
        END IF;
--
        --チェーン店コード（ＥＤＩ）取得
        lv_edi_chain_code := xxccp_common_pkg.char_delim_partition(  lv_temp
                                                                    ,cv_comma
                                                                    ,28);
        --チェーン店コード（ＥＤＩ）が-でない場合
        IF (lv_edi_chain_code <> cv_null_bar) THEN
          --チェーン店コード（ＥＤＩ）存在チェック
          << check_edi_chain_loop >>
          FOR check_edi_chain_rec IN check_edi_chain_cur( lv_edi_chain_code )
          LOOP
            lv_edi_chain_mst := check_edi_chain_rec.edi_chain_code;
          END LOOP check_edi_chain_loop;
          IF (lv_edi_chain_mst IS NULL) THEN
            lv_check_status   := cv_status_error;
            lv_retcode        := cv_status_error;
            --チェーン店コード（ＥＤＩ）存在チェックエラーメッセージ取得
            gv_out_msg := xxccp_common_pkg.get_msg(
                             iv_application  => gv_xxcmm_msg_kbn
                            ,iv_name         => cv_mst_err_msg
                            ,iv_token_name1  => cv_cust_code
                            ,iv_token_value1 => lv_customer_code
                            ,iv_token_name2  => cv_col_name
                            ,iv_token_value2 => cv_edi_chain
                            ,iv_token_name3  => cv_input_val
                            ,iv_token_value3 => lv_edi_chain_code
                            ,iv_token_name4  => cv_table
                            ,iv_token_value4 => cv_addon_cust_mst
                           );
            FND_FILE.PUT_LINE(
               which  => FND_FILE.LOG
              ,buff   => gv_out_msg);
          END IF;
          --チェーン店コード（ＥＤＩ）型・桁数チェック
          xxccp_common_pkg2.upload_item_check( cv_edi_chain       --チェーン店コード（ＥＤＩ）
                                              ,lv_edi_chain_code  --チェーン店コード（ＥＤＩ）
                                              ,4                  --項目長
                                              ,NULL               --項目長（小数点以下）
                                              ,cv_null_ok         --必須フラグ
                                              ,cv_element_vc2     --属性（0・検証なし、1、数値、2、日付）
                                              ,lv_item_errbuf     --エラーバッファ
                                              ,lv_item_retcode    --エラーコード
                                              ,lv_item_errmsg);   --エラーメッセージ
          --チェーン店コード（ＥＤＩ）型・桁数チェックエラー時
          IF (lv_item_retcode <> cv_status_normal) THEN
            lv_check_status := cv_status_error;
            lv_retcode      := cv_status_error;
            --チェーン店コード（ＥＤＩ）エラーメッセージ取得
            gv_out_msg := xxccp_common_pkg.get_msg(
                             iv_application  => gv_xxcmm_msg_kbn
                            ,iv_name         => cv_val_form_err_msg
                            ,iv_token_name1  => cv_cust_code
                            ,iv_token_value1 => lv_customer_code
                            ,iv_token_name2  => cv_col_name
                            ,iv_token_value2 => cv_edi_chain
                            ,iv_token_name3  => cv_input_val
                            ,iv_token_value3 => lv_edi_chain_code
                           );
            FND_FILE.PUT_LINE(
               which  => FND_FILE.LOG
              ,buff   => gv_out_msg
            );
            FND_FILE.PUT_LINE(
               which  => FND_FILE.LOG
              ,buff   => lv_item_errmsg
            );
          END IF;
        END IF;
--
        --店舗コード取得
        lv_store_code := xxccp_common_pkg.char_delim_partition(  lv_temp
                                                                ,cv_comma
                                                                ,29);
        --店舗コードが-でない場合
        IF (lv_store_code <> cv_null_bar) THEN
          --店舗コード型・桁数チェック
          xxccp_common_pkg2.upload_item_check( cv_store_code     --店舗コード
                                              ,lv_store_code     --店舗コード
                                              ,10                --項目長
                                              ,NULL              --項目長（小数点以下）
                                              ,cv_null_ok        --必須フラグ
                                              ,cv_element_vc2    --属性（0・検証なし、1、数値、2、日付）
                                              ,lv_item_errbuf    --エラーバッファ
                                              ,lv_item_retcode   --エラーコード
                                              ,lv_item_errmsg);  --エラーメッセージ
          --店舗コード型・桁数チェックエラー時
          IF (lv_item_retcode <> cv_status_normal) THEN
            lv_check_status := cv_status_error;
            lv_retcode      := cv_status_error;
            --店舗コードエラーメッセージ取得
            gv_out_msg := xxccp_common_pkg.get_msg(
                             iv_application  => gv_xxcmm_msg_kbn
                            ,iv_name         => cv_val_form_err_msg
                            ,iv_token_name1  => cv_cust_code
                            ,iv_token_value1 => lv_customer_code
                            ,iv_token_name2  => cv_col_name
                            ,iv_token_value2 => cv_store_code
                            ,iv_token_name3  => cv_input_val
                            ,iv_token_value3 => lv_store_code
                           );
            FND_FILE.PUT_LINE(
               which  => FND_FILE.LOG
              ,buff   => gv_out_msg
            );
            FND_FILE.PUT_LINE(
               which  => FND_FILE.LOG
              ,buff   => lv_item_errmsg
            );
          END IF;
        END IF;
--
        --郵便番号取得
        lv_postal_code := xxccp_common_pkg.char_delim_partition(  lv_temp
                                                                 ,cv_comma
                                                                 ,31);
        --郵便番号の必須チェック
        IF (lv_postal_code = cv_null_bar) THEN
          lv_check_status := cv_status_error;
          lv_retcode      := cv_status_error;
          --郵便番号必須エラーメッセージ取得
          gv_out_msg := xxccp_common_pkg.get_msg(
                           iv_application  => gv_xxcmm_msg_kbn
                          ,iv_name         => cv_required_err_msg
                          ,iv_token_name1  => cv_cust_code
                          ,iv_token_value1 => lv_customer_code
                          ,iv_token_name2  => cv_col_name
                          ,iv_token_value2 => cv_postal_code
                         );
          FND_FILE.PUT_LINE(
             which  => FND_FILE.LOG
            ,buff   => gv_out_msg);
        END IF;
        --郵便番号取得が-でない場合
        IF (lv_postal_code <> cv_null_bar) THEN
          --郵便番号型・桁数チェック
          xxccp_common_pkg2.upload_item_check( cv_postal_code    --郵便番号
                                              ,lv_postal_code    --郵便番号
                                              ,7                 --項目長
                                              ,NULL              --項目長（小数点以下）
                                              ,cv_null_ok        --必須フラグ
                                              ,cv_element_vc2    --属性（0・検証なし、1、数値、2、日付）
                                              ,lv_item_errbuf    --エラーバッファ
                                              ,lv_item_retcode   --エラーコード
                                              ,lv_item_errmsg);  --エラーメッセージ
          --郵便番号型・桁数チェックエラー時
          IF (lv_item_retcode <> cv_status_normal) THEN
            lv_check_status := cv_status_error;
            lv_retcode      := cv_status_error;
            --郵便番号エラーメッセージ取得
            gv_out_msg := xxccp_common_pkg.get_msg(
                             iv_application  => gv_xxcmm_msg_kbn
                            ,iv_name         => cv_val_form_err_msg
                            ,iv_token_name1  => cv_cust_code
                            ,iv_token_value1 => lv_customer_code
                            ,iv_token_name2  => cv_col_name
                            ,iv_token_value2 => cv_postal_code
                            ,iv_token_name3  => cv_input_val
                            ,iv_token_value3 => lv_postal_code
                           );
            FND_FILE.PUT_LINE(
               which  => FND_FILE.LOG
              ,buff   => gv_out_msg
            );
            FND_FILE.PUT_LINE(
               which  => FND_FILE.LOG
              ,buff   => lv_item_errmsg
            );
          END IF;
        END IF;
--
        --都道府県取得
        lv_state := xxccp_common_pkg.char_delim_partition(  lv_temp
                                                           ,cv_comma
                                                           ,32);
        --都道府県の必須チェック
        IF (lv_state = cv_null_bar) THEN
          lv_check_status := cv_status_error;
          lv_retcode      := cv_status_error;
          --都道府県必須エラーメッセージ取得
          gv_out_msg := xxccp_common_pkg.get_msg(
                           iv_application  => gv_xxcmm_msg_kbn
                          ,iv_name         => cv_required_err_msg
                          ,iv_token_name1  => cv_cust_code
                          ,iv_token_value1 => lv_customer_code
                          ,iv_token_name2  => cv_col_name
                          ,iv_token_value2 => cv_state
                         );
          FND_FILE.PUT_LINE(
             which  => FND_FILE.LOG
            ,buff   => gv_out_msg);
        END IF;
        --都道府県取得が-でない場合
        IF (lv_state <> cv_null_bar) THEN
          --都道府県型・桁数チェック
          xxccp_common_pkg2.upload_item_check( cv_state          --都道府県
                                              ,lv_state          --都道府県
                                              ,30                --項目長
                                              ,NULL              --項目長（小数点以下）
                                              ,cv_null_ok        --必須フラグ
                                              ,cv_element_vc2    --属性（0・検証なし、1、数値、2、日付）
                                              ,lv_item_errbuf    --エラーバッファ
                                              ,lv_item_retcode   --エラーコード
                                              ,lv_item_errmsg);  --エラーメッセージ
          --都道府県型・桁数チェックエラー時
          IF (lv_item_retcode <> cv_status_normal) THEN
            lv_check_status := cv_status_error;
            lv_retcode      := cv_status_error;
            --都道府県エラーメッセージ取得
            gv_out_msg := xxccp_common_pkg.get_msg(
                             iv_application  => gv_xxcmm_msg_kbn
                            ,iv_name         => cv_val_form_err_msg
                            ,iv_token_name1  => cv_cust_code
                            ,iv_token_value1 => lv_customer_code
                            ,iv_token_name2  => cv_col_name
                            ,iv_token_value2 => cv_state
                            ,iv_token_name3  => cv_input_val
                            ,iv_token_value3 => lv_state
                           );
            FND_FILE.PUT_LINE(
               which  => FND_FILE.LOG
              ,buff   => gv_out_msg
            );
            FND_FILE.PUT_LINE(
               which  => FND_FILE.LOG
              ,buff   => lv_item_errmsg
            );
          END IF;
        END IF;
--
        --市・区取得
        lv_city := xxccp_common_pkg.char_delim_partition(  lv_temp
                                                          ,cv_comma
                                                          ,33);
        --市・区の必須チェック
        IF (lv_city = cv_null_bar) THEN
          lv_check_status := cv_status_error;
          lv_retcode      := cv_status_error;
          --市・区必須エラーメッセージ取得
          gv_out_msg := xxccp_common_pkg.get_msg(
                           iv_application  => gv_xxcmm_msg_kbn
                          ,iv_name         => cv_required_err_msg
                          ,iv_token_name1  => cv_cust_code
                          ,iv_token_value1 => lv_customer_code
                          ,iv_token_name2  => cv_col_name
                          ,iv_token_value2 => cv_city
                         );
          FND_FILE.PUT_LINE(
             which  => FND_FILE.LOG
            ,buff   => gv_out_msg);
        END IF;
        --市・区取得が-でない場合
        IF (lv_city <> cv_null_bar) THEN
          --市・区型・桁数チェック
          xxccp_common_pkg2.upload_item_check( cv_city           --市・区
                                              ,lv_city           --市・区
                                              ,30                --項目長
                                              ,NULL              --項目長（小数点以下）
                                              ,cv_null_ok        --必須フラグ
                                              ,cv_element_vc2    --属性（0・検証なし、1、数値、2、日付）
                                              ,lv_item_errbuf    --エラーバッファ
                                              ,lv_item_retcode   --エラーコード
                                              ,lv_item_errmsg);  --エラーメッセージ
          --市・区型・桁数チェックエラー時
          IF (lv_item_retcode <> cv_status_normal) THEN
            lv_check_status := cv_status_error;
            lv_retcode      := cv_status_error;
            --市・区エラーメッセージ取得
            gv_out_msg := xxccp_common_pkg.get_msg(
                             iv_application  => gv_xxcmm_msg_kbn
                            ,iv_name         => cv_val_form_err_msg
                            ,iv_token_name1  => cv_cust_code
                            ,iv_token_value1 => lv_customer_code
                            ,iv_token_name2  => cv_col_name
                            ,iv_token_value2 => cv_city
                            ,iv_token_name3  => cv_input_val
                            ,iv_token_value3 => lv_city
                           );
            FND_FILE.PUT_LINE(
               which  => FND_FILE.LOG
              ,buff   => gv_out_msg
            );
            FND_FILE.PUT_LINE(
               which  => FND_FILE.LOG
              ,buff   => lv_item_errmsg
            );
          END IF;
        END IF;
--
        --住所1取得
        lv_address1 := xxccp_common_pkg.char_delim_partition(  lv_temp
                                                              ,cv_comma
                                                              ,34);
        --住所1の必須チェック
        IF (lv_address1 = cv_null_bar) THEN
          lv_check_status := cv_status_error;
          lv_retcode      := cv_status_error;
          --住所1必須エラーメッセージ取得
          gv_out_msg := xxccp_common_pkg.get_msg(
                           iv_application  => gv_xxcmm_msg_kbn
                          ,iv_name         => cv_required_err_msg
                          ,iv_token_name1  => cv_cust_code
                          ,iv_token_value1 => lv_customer_code
                          ,iv_token_name2  => cv_col_name
                          ,iv_token_value2 => cv_address1
                         );
          FND_FILE.PUT_LINE(
             which  => FND_FILE.LOG
            ,buff   => gv_out_msg);
        END IF;
        --住所1取得が-でない場合
        IF (lv_address1 <> cv_null_bar) THEN
          --住所1型・桁数チェック
          xxccp_common_pkg2.upload_item_check( cv_address1       --住所1
                                              ,lv_address1       --住所1
                                              ,240               --項目長
                                              ,NULL              --項目長（小数点以下）
                                              ,cv_null_ok        --必須フラグ
                                              ,cv_element_vc2    --属性（0・検証なし、1、数値、2、日付）
                                              ,lv_item_errbuf    --エラーバッファ
                                              ,lv_item_retcode   --エラーコード
                                              ,lv_item_errmsg);  --エラーメッセージ
          --住所1型・桁数チェックエラー時
          IF (lv_item_retcode <> cv_status_normal) THEN
            lv_check_status := cv_status_error;
            lv_retcode      := cv_status_error;
            --住所1エラーメッセージ取得
            gv_out_msg := xxccp_common_pkg.get_msg(
                             iv_application  => gv_xxcmm_msg_kbn
                            ,iv_name         => cv_val_form_err_msg
                            ,iv_token_name1  => cv_cust_code
                            ,iv_token_value1 => lv_customer_code
                            ,iv_token_name2  => cv_col_name
                            ,iv_token_value2 => cv_address1
                            ,iv_token_name3  => cv_input_val
                            ,iv_token_value3 => lv_address1
                           );
            FND_FILE.PUT_LINE(
               which  => FND_FILE.LOG
              ,buff   => gv_out_msg
            );
            FND_FILE.PUT_LINE(
               which  => FND_FILE.LOG
              ,buff   => lv_item_errmsg
            );
          END IF;
        END IF;
--
        --住所2取得
        lv_address2 := xxccp_common_pkg.char_delim_partition(  lv_temp
                                                              ,cv_comma
                                                              ,35);
        --住所2取得が-でない場合
        IF (lv_address2 <> cv_null_bar) THEN
          --住所2型・桁数チェック
          xxccp_common_pkg2.upload_item_check( cv_address2       --住所2
                                              ,lv_address2       --住所2
                                              ,240               --項目長
                                              ,NULL              --項目長（小数点以下）
                                              ,cv_null_ok        --必須フラグ
                                              ,cv_element_vc2    --属性（0・検証なし、1、数値、2、日付）
                                              ,lv_item_errbuf    --エラーバッファ
                                              ,lv_item_retcode   --エラーコード
                                              ,lv_item_errmsg);  --エラーメッセージ
          --住所2型・桁数チェックエラー時
          IF (lv_item_retcode <> cv_status_normal) THEN
            lv_check_status := cv_status_error;
            lv_retcode      := cv_status_error;
            --住所2エラーメッセージ取得
            gv_out_msg := xxccp_common_pkg.get_msg(
                             iv_application  => gv_xxcmm_msg_kbn
                            ,iv_name         => cv_val_form_err_msg
                            ,iv_token_name1  => cv_cust_code
                            ,iv_token_value1 => lv_customer_code
                            ,iv_token_name2  => cv_col_name
                            ,iv_token_value2 => cv_address2
                            ,iv_token_name3  => cv_input_val
                            ,iv_token_value3 => lv_address2
                           );
            FND_FILE.PUT_LINE(
               which  => FND_FILE.LOG
              ,buff   => gv_out_msg
            );
            FND_FILE.PUT_LINE(
               which  => FND_FILE.LOG
              ,buff   => lv_item_errmsg
            );
          END IF;
        END IF;
--
        --地区コード取得
        lv_address3 := xxccp_common_pkg.char_delim_partition(  lv_temp
                                                              ,cv_comma
                                                              ,36);
        --地区コードの必須チェック
        IF (lv_address3 = cv_null_bar) THEN
          lv_check_status := cv_status_error;
          lv_retcode      := cv_status_error;
          --地区コード必須エラーメッセージ取得
          gv_out_msg := xxccp_common_pkg.get_msg(
                           iv_application  => gv_xxcmm_msg_kbn
                          ,iv_name         => cv_required_err_msg
                          ,iv_token_name1  => cv_cust_code
                          ,iv_token_value1 => lv_customer_code
                          ,iv_token_name2  => cv_col_name
                          ,iv_token_value2 => cv_address3
                         );
          FND_FILE.PUT_LINE(
             which  => FND_FILE.LOG
            ,buff   => gv_out_msg);
        END IF;
        --地区コードが-でない場合
        IF (lv_address3 <> cv_null_bar) THEN
          --地区コード存在チェック
          << check_cust_chiku_code_loop >>
          FOR check_cust_chiku_code_rec IN check_cust_chiku_code_cur( lv_address3 )
          LOOP
            lv_cust_chiku_code_mst := check_cust_chiku_code_rec.cust_chiku_code;
          END LOOP check_cust_chiku_code_loop;
          IF (lv_cust_chiku_code_mst IS NULL) THEN
            lv_check_status   := cv_status_error;
            lv_retcode        := cv_status_error;
            --地区コード存在チェックエラーメッセージ取得
            gv_out_msg := xxccp_common_pkg.get_msg(
                             iv_application  => gv_xxcmm_msg_kbn
                            ,iv_name         => cv_lookup_err_msg
                            ,iv_token_name1  => cv_cust_code
                            ,iv_token_value1 => lv_customer_code
                            ,iv_token_name2  => cv_col_name
                            ,iv_token_value2 => cv_address3
                            ,iv_token_name3  => cv_input_val
                            ,iv_token_value3 => lv_address3
                           );
            FND_FILE.PUT_LINE(
               which  => FND_FILE.LOG
              ,buff   => gv_out_msg);
          END IF;
          --地区コード型・桁数チェック
          xxccp_common_pkg2.upload_item_check( cv_address3       --地区コード
                                              ,lv_address3       --地区コード
                                              ,5                 --項目長
                                              ,NULL              --項目長（小数点以下）
                                              ,cv_null_ok        --必須フラグ
                                              ,cv_element_vc2    --属性（0・検証なし、1、数値、2、日付）
                                              ,lv_item_errbuf    --エラーバッファ
                                              ,lv_item_retcode   --エラーコード
                                              ,lv_item_errmsg);  --エラーメッセージ
          --地区コード型・桁数チェックエラー時
          IF (lv_item_retcode <> cv_status_normal) THEN
            lv_check_status := cv_status_error;
            lv_retcode      := cv_status_error;
            --地区コードエラーメッセージ取得
            gv_out_msg := xxccp_common_pkg.get_msg(
                             iv_application  => gv_xxcmm_msg_kbn
                            ,iv_name         => cv_val_form_err_msg
                            ,iv_token_name1  => cv_cust_code
                            ,iv_token_value1 => lv_customer_code
                            ,iv_token_name2  => cv_col_name
                            ,iv_token_value2 => cv_address3
                            ,iv_token_name3  => cv_input_val
                            ,iv_token_value3 => lv_address3
                           );
            FND_FILE.PUT_LINE(
               which  => FND_FILE.LOG
              ,buff   => gv_out_msg
            );
            FND_FILE.PUT_LINE(
               which  => FND_FILE.LOG
              ,buff   => lv_item_errmsg
            );
          END IF;
        END IF;
--
        IF (lv_customer_class = cv_trust_corp) THEN
          --顧客法人情報マスタ存在チェック
          IF (ln_cust_id IS NOT NULL) THEN
            --顧客法人情報マスタ存在チェック
            << check_cust_corp_loop >>
            FOR check_cust_corp_rec IN check_cust_corp_cur( ln_cust_id )
            LOOP
              ln_cust_corp_mst := check_cust_corp_rec.customer_id;
            END LOOP check_cust_corp_loop;
          END IF;
          IF (ln_cust_corp_mst IS NULL)THEN
              --顧客法人情報マスタ情報エラー
              lv_check_status := cv_status_error;
              lv_retcode      := cv_status_error;
              --顧客法人情報マスタ存在チェックエラーメッセージ取得
              gv_out_msg := xxccp_common_pkg.get_msg(
                               iv_application  => gv_xxcmm_msg_kbn
                              ,iv_name         => cv_corp_err_msg
                              ,iv_token_name1  => cv_cust_code
                              ,iv_token_value1 => lv_customer_code
                             );
              FND_FILE.PUT_LINE(
                 which  => FND_FILE.LOG
                ,buff   => gv_out_msg);
          END IF;
          --与信限度額取得（法人顧客のみ）
          lv_credit_limit := xxccp_common_pkg.char_delim_partition(  lv_temp
                                                                    ,cv_comma
                                                                    ,12);
          --与信限度額の必須チェック
          IF (lv_credit_limit = cv_null_bar) THEN
            lv_check_status := cv_status_error;
            lv_retcode      := cv_status_error;
            --与信限度額必須エラーメッセージ取得
            gv_out_msg := xxccp_common_pkg.get_msg(
                             iv_application  => gv_xxcmm_msg_kbn
                            ,iv_name         => cv_required_err_msg
                            ,iv_token_name1  => cv_cust_code
                            ,iv_token_value1 => lv_customer_code
                            ,iv_token_name2  => cv_col_name
                            ,iv_token_value2 => cv_credit_limit
                           );
            FND_FILE.PUT_LINE(
               which  => FND_FILE.LOG
              ,buff   => gv_out_msg);
          ELSE
            --与信限度額型・桁数チェック
            xxccp_common_pkg2.upload_item_check( cv_credit_limit   --与信限度額
                                                ,lv_credit_limit   --与信限度額
                                                ,11                --項目長
                                                ,0                 --項目長（小数点以下）
                                                ,cv_null_ok        --必須フラグ
                                                ,cv_element_num    --属性（0・検証なし、1、数値、2、日付）
                                                ,lv_item_errbuf    --エラーバッファ
                                                ,lv_item_retcode   --エラーコード
                                                ,lv_item_errmsg);  --エラーメッセージ
            --与信限度額型・桁数チェックエラー時
            IF (lv_item_retcode <> cv_status_normal) THEN
              lv_check_status := cv_status_error;
              lv_retcode      := cv_status_error;
              --与信限度額エラーメッセージ取得
              gv_out_msg := xxccp_common_pkg.get_msg(
                               iv_application  => gv_xxcmm_msg_kbn
                              ,iv_name         => cv_val_form_err_msg
                              ,iv_token_name1  => cv_cust_code
                              ,iv_token_value1 => lv_customer_code
                              ,iv_token_name2  => cv_col_name
                              ,iv_token_value2 => cv_credit_limit
                              ,iv_token_name3  => cv_input_val
                              ,iv_token_value3 => lv_credit_limit
                             );
              FND_FILE.PUT_LINE(
                 which  => FND_FILE.LOG
                ,buff   => gv_out_msg
              );
              FND_FILE.PUT_LINE(
                 which  => FND_FILE.LOG
                ,buff   => lv_item_errmsg
              );
            ELSE
              --型・桁数正常時のみ数値として扱い、与信限度額数値範囲チェック
              ln_credit_limit := TO_NUMBER(lv_credit_limit);
              IF  ((ln_credit_limit < 0)
                OR (ln_credit_limit > 99999999999)) THEN
                --与信限度額エラーメッセージ取得
                gv_out_msg := xxccp_common_pkg.get_msg(
                                 iv_application  => gv_xxcmm_msg_kbn
                                ,iv_name         => cv_trust_val_invalid
                                ,iv_token_name1  => cv_cust_code
                                ,iv_token_value1 => lv_customer_code
                                ,iv_token_name2  => cv_col_name
                                ,iv_token_value2 => cv_credit_limit
                                ,iv_token_name3  => cv_input_val
                                ,iv_token_value3 => lv_credit_limit
                               );
                FND_FILE.PUT_LINE(
                   which  => FND_FILE.LOG
                  ,buff   => gv_out_msg
                );
              END IF;
            END IF;
          END IF;
          --判定区分取得（法人顧客のみ）
          lv_decide_div := xxccp_common_pkg.char_delim_partition(  lv_temp
                                                                  ,cv_comma
                                                                  ,13);
          --判定区分の必須チェック
          IF (lv_decide_div = cv_null_bar) THEN
            lv_check_status := cv_status_error;
            lv_retcode      := cv_status_error;
            --判定区分必須エラーメッセージ取得
            gv_out_msg := xxccp_common_pkg.get_msg(
                             iv_application  => gv_xxcmm_msg_kbn
                            ,iv_name         => cv_required_err_msg
                            ,iv_token_name1  => cv_cust_code
                            ,iv_token_value1 => lv_customer_code
                            ,iv_token_name2  => cv_col_name
                            ,iv_token_value2 => cv_decide
                           );
            FND_FILE.PUT_LINE(
               which  => FND_FILE.LOG
              ,buff   => gv_out_msg);
          END IF;
          --判定区分が-でない場合
          IF (lv_decide_div <> cv_null_bar) THEN
            --判定区分存在チェック
            << check_decide_div_loop >>
            FOR check_decide_div_rec IN check_decide_div_cur( lv_decide_div )
            LOOP
              lv_decide_div_mst := check_decide_div_rec.decide_div;
            END LOOP check_decide_div_loop;
            IF (lv_decide_div_mst IS NULL) THEN
              lv_check_status   := cv_status_error;
              lv_retcode        := cv_status_error;
              --判定区分存在チェックエラーメッセージ取得
              gv_out_msg := xxccp_common_pkg.get_msg(
                               iv_application  => gv_xxcmm_msg_kbn
                              ,iv_name         => cv_lookup_err_msg
                              ,iv_token_name1  => cv_cust_code
                              ,iv_token_value1 => lv_customer_code
                              ,iv_token_name2  => cv_col_name
                              ,iv_token_value2 => cv_decide
                              ,iv_token_name3  => cv_input_val
                              ,iv_token_value3 => lv_decide_div
                             );
              FND_FILE.PUT_LINE(
                 which  => FND_FILE.LOG
                ,buff   => gv_out_msg);
            END IF;
            --判定区分型・桁数チェック
            xxccp_common_pkg2.upload_item_check( cv_decide         --判定区分
                                                ,lv_decide_div     --判定区分
                                                ,1                 --項目長
                                                ,NULL              --項目長（小数点以下）
                                                ,cv_null_ok        --必須フラグ
                                                ,cv_element_vc2    --属性（0・検証なし、1、数値、2、日付）
                                                ,lv_item_errbuf    --エラーバッファ
                                                ,lv_item_retcode   --エラーコード
                                                ,lv_item_errmsg);  --エラーメッセージ
            --判定区分型・桁数チェックエラー時
            IF (lv_item_retcode <> cv_status_normal) THEN
              lv_check_status := cv_status_error;
              lv_retcode      := cv_status_error;
              --判定区分エラーメッセージ取得
              gv_out_msg := xxccp_common_pkg.get_msg(
                               iv_application  => gv_xxcmm_msg_kbn
                              ,iv_name         => cv_val_form_err_msg
                              ,iv_token_name1  => cv_cust_code
                              ,iv_token_value1 => lv_customer_code
                              ,iv_token_name2  => cv_col_name
                              ,iv_token_value2 => cv_decide
                              ,iv_token_name3  => cv_input_val
                              ,iv_token_value3 => lv_decide_div
                             );
              FND_FILE.PUT_LINE(
                 which  => FND_FILE.LOG
                ,buff   => gv_out_msg
              );
              FND_FILE.PUT_LINE(
                 which  => FND_FILE.LOG
                ,buff   => lv_item_errmsg
              );
            END IF;
          END IF;
        END IF;
--
        IF (lv_check_status = cv_status_normal) THEN
          BEGIN
            INSERT INTO xxcmm_wk_cust_batch_regist(
               file_id
              ,customer_code
              ,customer_class_code
              ,customer_name
              ,customer_name_kana
              ,customer_name_ryaku
              ,customer_status
              ,approval_reason
              ,approval_date
              ,credit_limit
              ,decide_div
              ,ar_invoice_code
              ,ar_location_code
              ,ar_others_code
              ,invoice_class
              ,invoice_cycle
              ,invoice_form
              ,payment_term_id
              ,payment_term_second
              ,payment_term_third
              ,sales_chain_code
              ,delivery_chain_code
              ,policy_chain_code
              ,chain_store_code
              ,store_code
              ,business_low_type
              ,postal_code
              ,state
              ,city
              ,address1
              ,address2
              ,address3
              ,created_by
              ,creation_date
              ,last_updated_by
              ,last_update_date
              ,request_id
              ,program_application_id
              ,program_id
              ,program_update_date
            )
            VALUES(
               in_file_id
              ,lv_customer_code
              ,lv_customer_class
              ,lv_customer_name
              ,lv_cust_name_kana
              ,lv_cust_name_ryaku
              ,lv_customer_status
              ,lv_approval_reason
              ,lv_approval_date
              ,ln_credit_limit
              ,lv_decide_div
              ,lv_ar_invoice_code
              ,lv_ar_location_code
              ,lv_ar_others_code
              ,lv_invoice_class
              ,lv_invoice_cycle
              ,lv_invoice_form
              ,lv_payment_term_id
              ,lv_payment_term_second
              ,lv_payment_term_third
              ,lv_sales_chain_code
              ,lv_delivery_chain_code
              ,lv_policy_chain_code
              ,lv_edi_chain_code
              ,lv_store_code
              ,lv_business_low_type
              ,lv_postal_code
              ,lv_state
              ,lv_city
              ,lv_address1
              ,lv_address2
              ,lv_address3
              ,fnd_global.user_id
              ,sysdate
              ,fnd_global.user_id
              ,sysdate
              ,fnd_profile.value(cv_conc_request_id)
              ,fnd_profile.value(cv_prog_appl_id)
              ,fnd_profile.value(cv_conc_program_id)
              ,sysdate
            );
          EXCEPTION
            WHEN OTHERS THEN
              lv_errbuf  := cv_pkg_name||cv_msg_cont||cv_prg_name||cv_msg_part||SQLERRM;
              lv_retcode := cv_status_error;
              RAISE invalid_data_expt;
          END;
        END IF;
        --件数カウント
        gn_target_cnt    := gn_target_cnt + 1;  -- 対象件数
        IF (lv_check_status = cv_status_normal) THEN
          gn_normal_cnt  := gn_normal_cnt + 1;  -- 正常件数
        ELSE
          gn_error_cnt   := gn_error_cnt +1;    -- エラー件数
        END IF;
      END IF;
      --各格納用変数初期化
      lv_temp                  := NULL;
      lv_item_retcode          := NULL;
      lv_item_errmsg           := NULL;
      lv_customer_code         := NULL;
      lv_cust_code_mst         := NULL;
      ln_cust_id               := NULL;
      ln_party_id              := NULL;
      ln_cust_addon_mst        := NULL;
      lv_business_low_mst      := NULL;
      lv_get_cust_status       := NULL;
      lv_appr_reason_mst       := NULL;
      ln_cust_corp_mst         := NULL;
      lv_customer_class        := NULL;
      lv_cust_class_mst        := NULL;
      lv_cust_status_mst       := NULL;
      lr_cust_wk_table         := NULL;
      lv_ar_invoice_code_mst   := NULL;
      lv_invoice_class_mst     := NULL;
      lv_invoice_cycle_mst     := NULL;
      lv_invoice_form_mst      := NULL;
      lv_payment_term_id_mst   := NULL;
      lv_payment_second_mst    := NULL;
      lv_payment_third_mst     := NULL;
      lv_sales_chain_code_mst  := NULL;
      lv_deliv_chain_code_mst  := NULL;
      lv_edi_chain_mst         := NULL;
      lv_cust_chiku_code_mst   := NULL;
      lv_credit_limit          := NULL;
      ln_credit_limit          := NULL;
      lv_decide_div_mst        := NULL;
    END LOOP cust_data_wk_loop;
--
    --データエラー時メッセージ設定（コンカレント出力）
    IF (lv_retcode <> cv_status_normal) THEN
      --データエラー時メッセージ取得
      gv_out_msg := xxccp_common_pkg.get_msg(
                       iv_application  => gv_xxcmm_msg_kbn
                      ,iv_name         => cv_invalid_data_msg
                     );
      lv_errmsg := gv_out_msg;
      lv_errbuf := gv_out_msg;
      RAISE invalid_data_expt;
    END IF;
--
    COMMIT;
--
  EXCEPTION
    WHEN get_csv_err_expt THEN                         --*** 顧客一括更新用CSV取得失敗例外 ***
      ov_errmsg  := lv_errmsg;
      ov_errbuf  := SUBSTRB(cv_pkg_name||cv_msg_cont||cv_prg_name||cv_msg_part||lv_errbuf,1,5000);
      ov_retcode := cv_status_error;
    WHEN invalid_data_expt THEN                        --*** 顧客一括更新情報不正例外 ***
      ov_errmsg  := lv_errmsg;
      ov_errbuf  := SUBSTRB(cv_pkg_name||cv_msg_cont||cv_prg_name||cv_msg_part||lv_errbuf,1,5000);
      ov_retcode := cv_status_error;
--
--#################################  固定例外処理部 START   ####################################
--
    -- *** 処理部共通例外ハンドラ ***
    WHEN global_process_expt THEN
      ov_errmsg  := lv_errmsg;
      ov_errbuf  := SUBSTRB(cv_pkg_name||cv_msg_cont||cv_prg_name||cv_msg_part||lv_errbuf,1,5000);
      ov_retcode := cv_status_error;
    -- *** 共通関数OTHERS例外ハンドラ ***
    WHEN global_api_others_expt THEN
      ov_errbuf  := cv_pkg_name||cv_msg_cont||cv_prg_name||cv_msg_part||SQLERRM;
      ov_retcode := cv_status_error;
    -- *** OTHERS例外ハンドラ ***
    WHEN OTHERS THEN
      ov_errbuf  := cv_pkg_name||cv_msg_cont||cv_prg_name||cv_msg_part||SQLERRM;
      ov_retcode := cv_status_error;
--
--#####################################  固定部 END   ##########################################
--
  END cust_data_make_wk;
--
  /**********************************************************************************
   * Procedure Name   : rock_and_update_cust
   * Description      : テーブルロック処理(A-3)・顧客一括更新処理(A-4)
   ***********************************************************************************/
  PROCEDURE rock_and_update_cust(
    in_file_id              IN  NUMBER,              --   ファイルID
    ov_errbuf               OUT VARCHAR2,            --   エラー・メッセージ                  --# 固定 #
    ov_retcode              OUT VARCHAR2,            --   リターン・コード                    --# 固定 #
    ov_errmsg               OUT VARCHAR2)            --   ユーザー・エラー・メッセージ        --# 固定 #
  IS
    -- ===============================
    -- 固定ローカル定数
    -- ===============================
    cv_prg_name    CONSTANT VARCHAR2(100) := 'rock_and_update_cust'; -- プログラム名
--
--#######################  固定ローカル変数宣言部 START   ######################
--
    lv_errbuf  VARCHAR2(5000);  -- エラー・メッセージ
    lv_retcode VARCHAR2(1);     -- リターン・コード
    lv_errmsg  VARCHAR2(5000);  -- ユーザー・エラー・メッセージ
--
--###########################  固定部 END   ####################################
--
    -- ===============================
    -- ユーザー宣言部
    -- ===============================
    -- *** ローカル定数 ***
    cv_bill_to               CONSTANT VARCHAR2(7)     := 'BILL_TO';               --使用目的・請求先
    cv_other_to              CONSTANT VARCHAR2(8)     := 'OTHER_TO';              --使用目的・その他
    cv_aff_dept              CONSTANT VARCHAR2(15)    := 'XX03_DEPARTMENT';       --AFF部門マスタ参照タイプ
    cv_chain_code            CONSTANT VARCHAR2(16)    := 'XXCMM_CHAIN_CODE';      --参照コード：チェーン店参照タイプ
    cv_null_x                CONSTANT VARCHAR2(1)     := 'X';                     --NVL用ダミー文字列
    cn_zero                  CONSTANT NUMBER(1)       := 0;                       --NVL用ダミー数値
    cv_customer              CONSTANT VARCHAR2(2)     := '10';                    --顧客区分・顧客
    cv_su_customer           CONSTANT VARCHAR2(2)     := '12';                    --顧客区分・上様顧客
    cv_trust_corp            CONSTANT VARCHAR2(2)     := '13';                    --顧客区分・法人管理先
    cv_ar_manage             CONSTANT VARCHAR2(2)     := '14';                    --顧客区分・売掛管理先顧客
    cv_yes_output            CONSTANT VARCHAR2(1)     := 'Y';                     --出力有無・有
    cv_no_output             CONSTANT VARCHAR2(1)     := 'N';                     --出力有無・無
    cv_corp_no_data          CONSTANT VARCHAR2(20)    := '顧客法人情報未登録。';  --顧客法人情報未設定
    cv_addon_cust_no_data    CONSTANT VARCHAR2(20)    := '顧客追加情報未登録。';  --顧客追加情報未設定
    cv_sales_base_class      CONSTANT VARCHAR2(1)     := '1';                     --顧客区分・拠点
    cv_ignore                CONSTANT VARCHAR2(1)     := 'I';                     --顧客マスタ・ステータス無効
    cv_ng_word               CONSTANT VARCHAR2(7)     := 'NG_WORD';               --CSV出力エラートークン・NG_WORD
    cv_err_cust_code_msg     CONSTANT VARCHAR2(16)    := 'エラー顧客コード';      --CSV出力エラー文字列
    cv_ng_data               CONSTANT VARCHAR2(7)     := 'NG_DATA';               --CSV出力エラートークン・NG_DATA
    cv_success_api           CONSTANT VARCHAR2(1)     := 'S';                     --API成功時返却ステータス
    cv_init_list_api         CONSTANT VARCHAR2(1)     := 'T';                     --API起動初期リスト設定値
    cv_user_entered          CONSTANT VARCHAR2(12)    := 'USER_ENTERED';          --パーティマスタ更新ＡＰＩコンテンツソースタイプ
--
    -- *** ローカル変数 ***
    lv_header_str                     VARCHAR2(2000)  := NULL;                    --ヘッダメッセージ格納用変数
    lv_output_str                     VARCHAR2(2047)  := NULL;                    --出力文字列格納用変数
    ln_output_cnt                     NUMBER          := 0;                       --出力件数
    lv_sales_kigyou_code              fnd_flex_values.attribute1%TYPE;            --企業コード（販売先）格納用変数
    lv_delivery_kigyou_code           fnd_flex_values.attribute1%TYPE;            --企業コード（納品先）格納用変数
    lv_output_excute                  VARCHAR2(1)     := 'Y';                     --出力有無
    ln_credit_limit                   xxcmm_mst_corporate.credit_limit%TYPE;      --顧客法人情報.与信限度額
    lv_decide_div                     xxcmm_mst_corporate.decide_div%TYPE;        --顧客法人情報.判定区分
    lv_information                    VARCHAR2(100)   := NULL;
    lv_sales_base_name                VARCHAR2(50)    := NULL;
--
    --顧客更新ＡＰＩ用変数
    p_cust_account_rec                HZ_CUST_ACCOUNT_V2PUB.CUST_ACCOUNT_REC_TYPE;
    ln_cust_object_version_number     NUMBER;
--
    --パーティ更新ＡＰＩ用変数
    ln_party_id                       NUMBER;
    lv_content_source_type            VARCHAR2(12);
    p_party_rec                       HZ_PARTY_V2PUB.PARTY_REC_TYPE;
    p_organization_rec                HZ_PARTY_V2PUB.ORGANIZATION_REC_TYPE;
    ln_party_object_version_number    NUMBER;
    ln_profile_id                     NUMBER;
--
    --顧客使用目的更新ＡＰＩ用変数
    p_cust_site_use_rec               HZ_CUST_ACCOUNT_SITE_V2PUB.CUST_SITE_USE_REC_TYPE;
    ln_csu_object_version_number      NUMBER;
    ln_payment_term_id                NUMBER;
    ln_payment_term_second_id         NUMBER;
    ln_payment_term_third_id          NUMBER;
--
    --顧客事業所更新ＡＰＩ用変数
    p_location_rec                    HZ_LOCATION_V2PUB.LOCATION_REC_TYPE;
    ln_location_object_version_num    NUMBER;
--
    --ＡＰＩ用汎用変数
    lv_return_status                  VARCHAR2(1);
    ln_msg_count                      NUMBER;
    lv_msg_data                       VARCHAR2(2000);
--
    -- ===============================
    -- ローカル・カーソル
    -- ===============================
    -- 顧客一括更新情報カーソル
    CURSOR cust_data_cur(
      in_file_id_wk IN NUMBER )
    IS
      SELECT  hca.cust_account_id         customer_id,                --顧客ID
              hca.account_number          customer_number,            --顧客番号
              hca.object_version_number   cust_ovn,                   --顧客オブジェクト世代番号
              hca.party_id                party_id,                   --パーティID
              hp.object_version_number    party_ovn,                  --パーティオブジェクト世代番号
              hcsu.site_use_id            site_use_id,                --顧客使用目的ID
              hcsu.bill_to_site_use_id    bill_to_site_use_id,        --顧客請求先使用目的ID
              hcsu.object_version_number  site_use_ovn,               --顧客使用目的オブジェクト世代番号
              hl.location_id              location_id,                --ロケーションID
              hl.object_version_number    location_ovn,               --ロケーションオブジェクト世代番号
              xca.stop_approval_reason    addon_approval_reason,      --顧客追加情報・中止理由
              xca.stop_approval_date      addon_approval_date,        --顧客追加情報・中止決済日
              xca.sales_chain_code        addon_sales_chain_code,     --顧客追加情報・チェーン店コード（販売先）
              xca.delivery_chain_code     addon_delivery_chain_code,  --顧客追加情報・チェーン店コード（納品先）
              xca.policy_chain_code       addon_policy_chain_code,    --顧客追加情報・チェーン店コード（営業政策用）
              xca.business_low_type       addon_business_low_type,    --顧客追加情報・業態（小分類）
              xca.chain_store_code        addon_chain_store_code,     --顧客追加情報・チェーン店コード（ＥＤＩ）
              xca.store_code              addon_store_code,           --顧客追加情報・中止決済日
              xmc.credit_limit            addon_credit_limit,         --顧客法人情報・与信限度額
              xmc.decide_div              addon_decide_div,           --顧客法人情報・判定区分
              xwcbr.customer_name         customer_name,              --顧客名称
              xwcbr.customer_name_kana    customer_name_kana,         --顧客名称カナ
              xwcbr.customer_name_ryaku   customer_name_ryaku,        --略称
              xwcbr.customer_status       customer_status,            --顧客ステータス
              xwcbr.ar_invoice_code       ar_invoice_code,            --売掛コード１（請求書）
              xwcbr.ar_location_code      ar_location_code,           --売掛コード２（事業所）
              xwcbr.ar_others_code        ar_others_code,             --売掛コード３（その他）
              xwcbr.invoice_class         invoice_class,              --請求書発行区分
              xwcbr.invoice_cycle         invoice_cycle,              --請求書発行サイクル
              xwcbr.invoice_form          invoice_form,               --請求書出力形式
              xwcbr.payment_term_id       payment_term_id,            --支払条件
              xwcbr.payment_term_second   payment_term_second,        --第2支払条件
              xwcbr.payment_term_third    payment_term_third,         --第3支払条件
              xwcbr.postal_code           postal_code,                --郵便番号
              xwcbr.state                 state,                      --都道府県
              xwcbr.city                  city,                       --市・区
              xwcbr.address1              address1,                   --住所1
              xwcbr.address2              address2,                   --住所2
              xwcbr.address3              address3,                   --地区コード
              xwcbr.approval_reason       approval_reason,            --中止理由
              xwcbr.approval_date         approval_date,              --中止決済日
              xwcbr.sales_chain_code      sales_chain_code,           --チェーン店コード（販売先）
              xwcbr.delivery_chain_code   delivery_chain_code,        --チェーン店コード（納品先）
              xwcbr.policy_chain_code     policy_chain_code,          --チェーン店コード（営業政策用）
              xwcbr.chain_store_code      chain_store_code,           --チェーン店コード（ＥＤＩ）
              xwcbr.store_code            store_code,                 --店舗コード
              xwcbr.business_low_type     business_low_type,          --業態（小分類）
              xwcbr.credit_limit          credit_limit,               --与信限度額
              xwcbr.decide_div            decide_div,                 --判定区分
              xwcbr.customer_class_code   customer_class_code         --顧客区分
      FROM    hz_cust_accounts     hca,
              hz_cust_acct_sites   hcas,
              hz_cust_site_uses    hcsu,
              hz_parties           hp,
              hz_party_sites       hps,
              hz_locations         hl,
              xxcmm_cust_accounts  xca,
              xxcmm_mst_corporate  xmc,
              xxcmm_wk_cust_batch_regist xwcbr
      WHERE   hca.cust_account_id       = hcas.cust_account_id
      AND     hcas.cust_acct_site_id    = hcsu.cust_acct_site_id
      AND     ((hcsu.site_use_code      = cv_bill_to
              AND hca.customer_class_code IN (cv_customer, cv_su_customer, cv_ar_manage))
      OR      (hcsu.site_use_code       = cv_other_to
              AND hca.customer_class_code NOT IN (cv_customer, cv_su_customer, cv_ar_manage)))
      AND     hca.party_id              = hp.party_id
      AND     hp.party_id               = hps.party_id
      AND     hps.location_id           = hl.location_id
      AND     xca.customer_id           = hca.cust_account_id
      AND     xmc.customer_id (+)       = hca.cust_account_id
      AND     hcas.org_id = gv_org_id
      AND     hcsu.org_id = gv_org_id
      AND     hcas.party_site_id        = hps.party_site_id
      AND     hps.location_id           = (SELECT MIN(hpsiv.location_id)
                                           FROM   hz_cust_acct_sites hcasiv,
                                                  hz_party_sites     hpsiv
                                           WHERE  hcasiv.cust_account_id = hca.cust_account_id
                                           AND    hcasiv.party_site_id   = hpsiv.party_site_id)
      AND     hca.account_number        = xwcbr.customer_code
      AND     xwcbr.file_id             = in_file_id_wk
      FOR UPDATE NOWAIT
      ;
    -- 支払条件取得カーソル
    CURSOR get_payment_term_cur(
      iv_payment_term IN VARCHAR2)
    IS
      SELECT rt.term_id  payment_term_id
      FROM   ra_terms    rt
      WHERE  rt.name   = iv_payment_term
      AND    ROWNUM    = 1
      ;
    -- 支払条件チェックカーソルレコード型
    get_payment_term_rec  get_payment_term_cur%ROWTYPE;
--
  BEGIN
--
--##################  固定ステータス初期化部 START   ###################
--
    ov_retcode := cv_status_normal;
--
--###########################  固定部 END   ############################
--
--
    --顧客一括更新情報カーソルオープン
    << cust_data_loop >>
    FOR cust_data_rec IN cust_data_cur( in_file_id )
    LOOP
      -- ===============================
      -- 顧客マスタ更新
      -- ===============================
      --顧客マスタ更新値設定
      p_cust_account_rec.cust_account_id  := cust_data_rec.customer_id;
      IF (cust_data_rec.customer_name_ryaku = cv_null_bar) THEN
        p_cust_account_rec.account_name   := CHR(0);                             --略称(NULL)
      ELSE
        p_cust_account_rec.account_name   := cust_data_rec.customer_name_ryaku;  --略称
      END IF;
      --顧客ステータスが「中止決裁済」のとき、顧客マスタの有効フラグを無効にする
      IF (cust_data_rec.customer_status = cv_stop_approved) THEN
        p_cust_account_rec.status         := cv_ignore;                          --顧客ステータス無効
      END IF;
      ln_cust_object_version_number       := cust_data_rec.cust_ovn;
      --顧客マスタ更新API呼び出し
      hz_cust_account_v2pub.update_cust_account(
                                          cv_init_list_api,
                                          p_cust_account_rec,
                                          ln_cust_object_version_number,
                                          lv_return_status,
                                          ln_msg_count,
                                          lv_msg_data);
      --顧客マスタ更新エラー時、RAISE
      IF lv_return_status <> cv_success_api THEN
        gv_out_msg  := xxccp_common_pkg.get_msg(
                          iv_application  => gv_xxcmm_msg_kbn
                         ,iv_name         => cv_update_cust_err_msg
                         ,iv_token_name1  => cv_cust_code
                         ,iv_token_value1 => cust_data_rec.customer_number
                        );
        lv_errmsg := gv_out_msg;
        lv_errbuf := lv_msg_data;
        RAISE update_cust_err_expt;
      END IF;
      --変数初期化
      p_cust_account_rec.account_name  := NULL;
      p_cust_account_rec.status        := NULL;
      ln_cust_object_version_number    := NULL;
--
      -- ===============================
      -- パーティマスタ更新
      -- ===============================
      --パーティマスタ更新値設定
      ln_party_id            := cust_data_rec.party_id;
      lv_content_source_type := cv_user_entered;
      ln_party_object_version_number := cust_data_rec.party_ovn;
      --組織情報取得API
      hz_party_v2pub.get_organization_rec(
                                         cv_init_list_api,
                                         ln_party_id,
                                         lv_content_source_type,
                                         p_organization_rec,
                                         lv_return_status,
                                         ln_msg_count,
                                         lv_msg_data);
      --パーティ情報取得API
      hz_party_v2pub.get_party_rec(
                                         cv_init_list_api,
                                         ln_party_id,
                                         p_party_rec,
                                         lv_return_status,
                                         ln_msg_count,
                                         lv_msg_data);
      --パーティ情報更新値設定
      p_organization_rec.organization_name            := cust_data_rec.customer_name;       --顧客名称
      IF (cust_data_rec.customer_name_kana = cv_null_bar) THEN
        p_organization_rec.organization_name_phonetic := CHR(0);                            --顧客名称カナ(NULL)
      ELSE
        p_organization_rec.organization_name_phonetic := cust_data_rec.customer_name_kana;  --顧客名称カナ
      END IF;
      p_organization_rec.duns_number_c                := cust_data_rec.customer_status;     --顧客ステータス
      p_organization_rec.party_rec                    := p_party_rec;
      --パーティマスタ更新API呼び出し
      hz_party_v2pub.update_organization(
                                         cv_init_list_api,
                                         p_organization_rec,
                                         ln_party_object_version_number,
                                         ln_profile_id,
                                         lv_return_status,
                                         ln_msg_count,
                                         lv_msg_data);
      --パーティマスタ更新エラー時、RAISE
      IF lv_return_status <> cv_success_api THEN
        gv_out_msg  := xxccp_common_pkg.get_msg(
                          iv_application  => gv_xxcmm_msg_kbn
                         ,iv_name         => cv_update_party_err_msg
                         ,iv_token_name1  => cv_cust_code
                         ,iv_token_value1 => cust_data_rec.customer_number
                        );
        lv_errmsg := gv_out_msg;
        lv_errbuf := lv_msg_data;
        RAISE update_party_err_expt;
      END IF;
      --変数初期化
      p_organization_rec.organization_name           := NULL;
      p_organization_rec.organization_name_phonetic  := NULL;
      p_organization_rec.duns_number_c               := NULL;
      p_organization_rec.party_rec                   := NULL;
      ln_party_object_version_number                 := NULL;
--
      -- ===============================
      -- 顧客使用目的更新
      -- ===============================
      --顧客区分'10'(顧客)、'12'(上様顧客)、'14'(売掛管理先顧客)のときのみ、顧客使用目的更新
      IF (cust_data_rec.customer_class_code   = cv_customer)
        OR (cust_data_rec.customer_class_code = cv_su_customer)
        OR (cust_data_rec.customer_class_code = cv_ar_manage) THEN
        --支払条件取得
        << get_payment_term_loop >>
        FOR get_payment_term_rec IN get_payment_term_cur( cust_data_rec.payment_term_id )
        LOOP
          ln_payment_term_id := get_payment_term_rec.payment_term_id;
        END LOOP get_payment_term_loop;
        --第2支払条件取得
        << get_payment_term_loop >>
        FOR get_payment_term_rec IN get_payment_term_cur( cust_data_rec.payment_term_second )
        LOOP
          ln_payment_term_second_id := get_payment_term_rec.payment_term_id;
        END LOOP get_payment_term_loop;
        --第3支払条件取得
        << get_payment_term_loop >>
        FOR get_payment_term_rec IN get_payment_term_cur( cust_data_rec.payment_term_third )
        LOOP
          ln_payment_term_third_id := get_payment_term_rec.payment_term_id;
        END LOOP get_payment_term_loop;
        --顧客使用目的更新値設定
        p_cust_site_use_rec.site_use_id          := cust_data_rec.site_use_id;
        p_cust_site_use_rec.bill_to_site_use_id  := cust_data_rec.bill_to_site_use_id;
        IF (cust_data_rec.ar_invoice_code = cv_null_bar) THEN
          p_cust_site_use_rec.attribute4 := CHR(0);                          --売掛コード１（請求書）(NULL)
        ELSE
          p_cust_site_use_rec.attribute4 := cust_data_rec.ar_invoice_code;   --売掛コード１（請求書）
        END IF;
        IF (cust_data_rec.ar_location_code = cv_null_bar) THEN
          p_cust_site_use_rec.attribute5 := CHR(0);                          --売掛コード２（事業所）(NULL)
        ELSE
          p_cust_site_use_rec.attribute5 := cust_data_rec.ar_location_code;  --売掛コード２（事業所）
        END IF;
        IF (cust_data_rec.ar_others_code = cv_null_bar) THEN
          p_cust_site_use_rec.attribute6 := CHR(0);                          --売掛コード３（その他）(NULL)
        ELSE
          p_cust_site_use_rec.attribute6 := cust_data_rec.ar_others_code;    --売掛コード３（その他）
        END IF;
        p_cust_site_use_rec.attribute1   := cust_data_rec.invoice_class;     --請求書発行区分
        IF (cust_data_rec.invoice_cycle = cv_null_bar) THEN
          p_cust_site_use_rec.attribute8 := CHR(0);                          --請求書発行サイクル(NULL)
        ELSE
          p_cust_site_use_rec.attribute8 := cust_data_rec.invoice_cycle;     --請求書発行サイクル
        END IF;
        IF (cust_data_rec.invoice_form = cv_null_bar) THEN
          p_cust_site_use_rec.attribute7 := CHR(0);                          --請求書出力形式(NULL)
        ELSE
          p_cust_site_use_rec.attribute7 := cust_data_rec.invoice_form;      --請求書出力形式
        END IF;
        p_cust_site_use_rec.payment_term_id := ln_payment_term_id;           --支払条件
        IF (cust_data_rec.payment_term_second = cv_null_bar) THEN
          p_cust_site_use_rec.attribute2 := CHR(0);                          --第2支払条件(NULL)
        ELSE
          p_cust_site_use_rec.attribute2 := ln_payment_term_second_id;       --第2支払条件
        END IF;
        IF (cust_data_rec.payment_term_third = cv_null_bar) THEN
          p_cust_site_use_rec.attribute3 := CHR(0);                          --第3支払条件(NULL)
        ELSE
          p_cust_site_use_rec.attribute3 := ln_payment_term_third_id;        --第3支払条件
        END IF;
        ln_csu_object_version_number     := cust_data_rec.site_use_ovn;      --顧客使用目的オブジェクト世代番号
        --顧客使用目的マスタ更新API呼び出し
        hz_cust_account_site_v2pub.update_cust_site_use(
                                            cv_init_list_api,
                                            p_cust_site_use_rec,
                                            ln_csu_object_version_number,
                                            lv_return_status,
                                            ln_msg_count,
                                            lv_msg_data);
        --顧客使用目的マスタ更新エラー時、RAISE
        IF lv_return_status <> cv_success_api THEN
          gv_out_msg  := xxccp_common_pkg.get_msg(
                            iv_application  => gv_xxcmm_msg_kbn
                           ,iv_name         => cv_update_csu_err_msg
                           ,iv_token_name1  => cv_cust_code
                           ,iv_token_value1 => cust_data_rec.customer_number
                          );
          lv_errmsg := gv_out_msg;
          lv_errbuf := lv_msg_data;
          RAISE update_csu_err_expt;
        END IF;
        --変数初期化
        p_cust_site_use_rec.site_use_id          := NULL;
        p_cust_site_use_rec.bill_to_site_use_id  := NULL;
        p_cust_site_use_rec.attribute4           := NULL;
        p_cust_site_use_rec.attribute5           := NULL;
        p_cust_site_use_rec.attribute6           := NULL;
        p_cust_site_use_rec.attribute1           := NULL;
        p_cust_site_use_rec.attribute8           := NULL;
        p_cust_site_use_rec.attribute7           := NULL;
        p_cust_site_use_rec.payment_term_id      := NULL;
        p_cust_site_use_rec.attribute2           := NULL;
        p_cust_site_use_rec.attribute3           := NULL;
        ln_csu_object_version_number             := NULL;
        ln_payment_term_id                       := NULL;
        ln_payment_term_second_id                := NULL;
        ln_payment_term_third_id                 := NULL;
      END IF;
--
      -- ===============================
      -- 顧客事業所更新
      -- ===============================
      p_location_rec.location_id        := cust_data_rec.location_id;
      p_location_rec.postal_code        := cust_data_rec.postal_code;   --郵便番号
      p_location_rec.state              := cust_data_rec.state;         --都道府県
      p_location_rec.city               := cust_data_rec.city;          --市・区
      p_location_rec.address1           := cust_data_rec.address1;      --住所1
      IF (cust_data_rec.address2 = cv_null_bar) THEN
        p_location_rec.address2         := CHR(0);                      --住所2(NULL)
      ELSE
        p_location_rec.address2         := cust_data_rec.address2;      --住所2
      END IF;
      p_location_rec.address3           := cust_data_rec.address3;      --地区コード
      ln_location_object_version_num    := cust_data_rec.location_ovn;
      --顧客事業所マスタ更新API呼び出し
      hz_location_v2pub.update_location(
                                          cv_init_list_api,
                                          p_location_rec,
                                          ln_location_object_version_num,
                                          lv_return_status,
                                          ln_msg_count,
                                          lv_msg_data);
      --顧客事業所マスタ更新エラー時、RAISE
      IF lv_return_status <> cv_success_api THEN
        gv_out_msg  := xxccp_common_pkg.get_msg(
                          iv_application  => gv_xxcmm_msg_kbn
                         ,iv_name         => cv_update_location_err_msg
                         ,iv_token_name1  => cv_cust_code
                         ,iv_token_value1 => cust_data_rec.customer_number
                        );
        lv_errmsg := gv_out_msg;
        lv_errbuf := lv_msg_data;
        RAISE update_location_err_expt;
      END IF;
      --変数初期化
      p_location_rec.location_id        := NULL;
      p_location_rec.postal_code        := NULL;
      p_location_rec.state              := NULL;
      p_location_rec.city               := NULL;
      p_location_rec.address1           := NULL;
      p_location_rec.address2           := NULL;
      p_location_rec.address3           := NULL;
      ln_location_object_version_num    := NULL;
--
    -- ===============================
    -- 顧客追加情報更新
    -- ===============================
    --顧客区分が'10'(顧客)、'14'(売掛管理先顧客)のときのみ、チェーン店コード（販売先）・チェーン店コード（納品先）・
    --チェーン店コード（営業政策用）・チェーン店コード（ＥＤＩ）・店舗コードを更新
    IF   (cust_data_rec.customer_class_code = cv_customer)
      OR (cust_data_rec.customer_class_code = cv_ar_manage) THEN
      UPDATE xxcmm_cust_accounts xca
      SET    xca.stop_approval_reason   = DECODE(cust_data_rec.approval_reason,            --中止理由
                                                 NULL,
                                                 cust_data_rec.addon_approval_reason,
                                                 cv_null_bar,
                                                 NULL,
                                                 cust_data_rec.approval_reason),
             xca.stop_approval_date     = DECODE(cust_data_rec.approval_date,              --中止決済日
                                                 NULL,
                                                 cust_data_rec.addon_approval_date,
                                                 cv_null_bar,
                                                 NULL,
                                                 TO_DATE(cust_data_rec.approval_date,
                                                         cv_date_format)),
             xca.sales_chain_code       = DECODE(cust_data_rec.sales_chain_code,           --チェーン店コード（販売先）
                                                 NULL,
                                                 cust_data_rec.addon_sales_chain_code,
                                                 cust_data_rec.sales_chain_code),
             xca.delivery_chain_code    = DECODE(cust_data_rec.delivery_chain_code,        --チェーン店コード（納品先）
                                                 NULL,
                                                 cust_data_rec.addon_delivery_chain_code,
                                                 cust_data_rec.delivery_chain_code),
             xca.policy_chain_code      = DECODE(cust_data_rec.policy_chain_code,          --チェーン店コード（営業政策用）
                                                 NULL,
                                                 cust_data_rec.addon_policy_chain_code,
                                                 cv_null_bar,
                                                 NULL,
                                                 cust_data_rec.policy_chain_code),
             xca.chain_store_code       = DECODE(cust_data_rec.chain_store_code,           --チェーン店コード（ＥＤＩ）
                                                 NULL,
                                                 cust_data_rec.addon_chain_store_code,
                                                 cv_null_bar,
                                                 NULL,
                                                 cust_data_rec.chain_store_code),
             xca.store_code             = DECODE(cust_data_rec.store_code,                 --店舗コード
                                                 NULL,
                                                 cust_data_rec.addon_store_code,
                                                 cv_null_bar,
                                                 NULL,
                                                 cust_data_rec.store_code),
             xca.business_low_type      = DECODE(cust_data_rec.business_low_type,          --業態（小分類）
                                                 NULL,
                                                 cust_data_rec.addon_business_low_type,
                                                 cust_data_rec.business_low_type),
             xca.last_updated_by        = fnd_global.user_id,                              --最終更新者
             xca.last_update_date       = sysdate,                                         --最終更新日
             xca.request_id             = fnd_profile.value(cv_conc_request_id),           --要求ID
             xca.program_application_id = fnd_profile.value(cv_prog_appl_id),              --コンカレント・プログラム･アプリケーションID
             xca.program_id             = fnd_profile.value(cv_conc_program_id),           --コンカレント・プログラムID
             xca.program_update_date    = sysdate                                          --プログラム更新日
      WHERE  xca.customer_id = cust_data_rec.customer_id
      ;
    --それ以外の場合、チェーン店コード（販売先）・チェーン店コード（納品先）・チェーン店コード（営業政策用）・
    --チェーン店コード（ＥＤＩ）・店舗コードは更新しない
    ELSE
      UPDATE xxcmm_cust_accounts xca
      SET    xca.stop_approval_reason   = DECODE(cust_data_rec.approval_reason,            --中止理由
                                                 NULL,
                                                 cust_data_rec.addon_approval_reason,
                                                 cv_null_bar,
                                                 NULL,
                                                 cust_data_rec.approval_reason),
             xca.stop_approval_date     = DECODE(cust_data_rec.approval_date,              --中止決済日
                                                 NULL,
                                                 cust_data_rec.addon_approval_date,
                                                 cv_null_bar,
                                                 NULL,
                                                 TO_DATE(cust_data_rec.approval_date,
                                                         cv_date_format)),
             xca.business_low_type      = DECODE(cust_data_rec.business_low_type,          --業態（小分類）
                                                 NULL,
                                                 cust_data_rec.addon_business_low_type,
                                                 cust_data_rec.business_low_type),
             xca.last_updated_by        = fnd_global.user_id,                              --最終更新者
             xca.last_update_date       = sysdate,                                         --最終更新日
             xca.request_id             = fnd_profile.value(cv_conc_request_id),           --要求ID
             xca.program_application_id = fnd_profile.value(cv_prog_appl_id),              --コンカレント・プログラム･アプリケーションID
             xca.program_id             = fnd_profile.value(cv_conc_program_id),           --コンカレント・プログラムID
             xca.program_update_date    = sysdate                                          --プログラム更新日
      WHERE  xca.customer_id = cust_data_rec.customer_id
      ;
    END IF;
--
    -- ===============================
    -- 顧客法人情報更新
    -- ===============================
    --顧客区分が'13'（法人顧客（与信管理先））のときのみ、顧客法人情報更新
    IF (cust_data_rec.customer_class_code = cv_trust_corp) THEN
      UPDATE xxcmm_mst_corporate xmc
      SET    xmc.credit_limit           = DECODE(cust_data_rec.credit_limit,        --与信限度額
                                                 NULL,
                                                 cust_data_rec.addon_credit_limit,
                                                 cust_data_rec.credit_limit),
             xmc.decide_div             = DECODE(cust_data_rec.decide_div,          --判定区分
                                                 NULL,
                                                 cust_data_rec.addon_decide_div,
                                                 cust_data_rec.decide_div),
             xmc.last_updated_by        = fnd_global.user_id,                       --最終更新者
             xmc.last_update_date       = sysdate,                                  --最終更新日
             xmc.request_id             = fnd_profile.value(cv_conc_request_id),    --要求ID
             xmc.program_application_id = fnd_profile.value(cv_prog_appl_id),       --コンカレント・プログラム･アプリケーションID
             xmc.program_id             = fnd_profile.value(cv_conc_program_id),    --コンカレント・プログラムID
             xmc.program_update_date    = sysdate                                   --プログラム更新日
      WHERE  xmc.customer_id  = cust_data_rec.customer_id
      ;
    END IF;
--
  END LOOP cust_data_loop;
--
  EXCEPTION
    WHEN cust_rock_err_expt THEN                       --*** ロック取得失敗例外 ***
      --ロックエラー時メッセージ取得
      gv_out_msg    := xxccp_common_pkg.get_msg(
                          iv_application  => gv_xxcmm_msg_kbn
                         ,iv_name         => cv_rock_err_msg
                        );
      lv_errmsg     := gv_out_msg;
      lv_errbuf     := gv_out_msg;
      ov_errmsg     := lv_errmsg;
      ov_errbuf     := SUBSTRB(cv_pkg_name||cv_msg_cont||cv_prg_name||cv_msg_part||lv_errbuf,1,5000);
      ov_retcode    := cv_status_error;
      --ロック取得失敗例外時、対象件数、エラー件数は全件とする
      gn_normal_cnt := 0;
      gn_error_cnt  := gn_target_cnt;
    WHEN update_cust_err_expt THEN                       --*** 顧客マスタ更新エラー ***
      ov_errmsg     := lv_errmsg;
      ov_errbuf     := SUBSTRB(cv_pkg_name||cv_msg_cont||cv_prg_name||cv_msg_part||lv_errbuf,1,5000);
      ov_retcode    := cv_status_error;
      --顧客マスタ更新エラー時、対象件数、エラー件数は全件とする
      gn_normal_cnt := 0;
      gn_error_cnt  := gn_target_cnt;
    WHEN update_party_err_expt THEN                      --*** パーティマスタ更新エラー ***
      ov_errmsg     := lv_errmsg;
      ov_errbuf     := SUBSTRB(cv_pkg_name||cv_msg_cont||cv_prg_name||cv_msg_part||lv_errbuf,1,5000);
      ov_retcode    := cv_status_error;
      --パーティマスタ更新エラー時、対象件数、エラー件数は全件とする
      gn_normal_cnt := 0;
      gn_error_cnt  := gn_target_cnt;
    WHEN update_csu_err_expt THEN                        --*** 顧客使用目的マスタ更新エラー ***
      ov_errmsg     := lv_errmsg;
      ov_errbuf     := SUBSTRB(cv_pkg_name||cv_msg_cont||cv_prg_name||cv_msg_part||lv_errbuf,1,5000);
      ov_retcode    := cv_status_error;
      --顧客使用目的マスタ更新エラー時、対象件数、エラー件数は全件とする
      gn_normal_cnt := 0;
      gn_error_cnt  := gn_target_cnt;
    WHEN update_location_err_expt THEN                   --*** 顧客事業所マスタ更新エラー ***
      ov_errmsg     := lv_errmsg;
      ov_errbuf     := SUBSTRB(cv_pkg_name||cv_msg_cont||cv_prg_name||cv_msg_part||lv_errbuf,1,5000);
      ov_retcode    := cv_status_error;
      --顧客事業所マスタ更新エラー時、対象件数、エラー件数は全件とする
      gn_normal_cnt := 0;
      gn_error_cnt  := gn_target_cnt;
--
--#################################  固定例外処理部 START   ####################################
--
    -- *** 処理部共通例外ハンドラ ***
    WHEN global_process_expt THEN
      ov_errmsg  := lv_errmsg;
      ov_errbuf  := SUBSTRB(cv_pkg_name||cv_msg_cont||cv_prg_name||cv_msg_part||lv_errbuf,1,5000);
      ov_retcode := cv_status_error;
    -- *** 共通関数例外ハンドラ ***
    WHEN global_api_expt THEN
      ov_errmsg  := lv_errmsg;
      ov_errbuf  := SUBSTRB(cv_pkg_name||cv_msg_cont||cv_prg_name||cv_msg_part||lv_errbuf,1,5000);
      ov_retcode := cv_status_error;
    -- *** 共通関数OTHERS例外ハンドラ ***
    WHEN global_api_others_expt THEN
      ov_errbuf  := cv_pkg_name||cv_msg_cont||cv_prg_name||cv_msg_part||SQLERRM;
      ov_retcode := cv_status_error;
    -- *** OTHERS例外ハンドラ ***
    WHEN OTHERS THEN
      ov_errbuf  := cv_pkg_name||cv_msg_cont||cv_prg_name||cv_msg_part||SQLERRM;
      ov_retcode := cv_status_error;
--
--#####################################  固定部 END   ##########################################
--
  END rock_and_update_cust;
--
  /**********************************************************************************
   * Procedure Name   : close_process
   * Description      : 終了処理(A-5)
   ***********************************************************************************/
  PROCEDURE close_process(
    in_file_id      IN  NUMBER,              --   ファイルID
    ov_errbuf       OUT VARCHAR2,            --   エラー・メッセージ                  --# 固定 #
    ov_retcode      OUT VARCHAR2,            --   リターン・コード                    --# 固定 #
    ov_errmsg       OUT VARCHAR2)            --   ユーザー・エラー・メッセージ        --# 固定 #
  IS
    -- ===============================
    -- 固定ローカル定数
    -- ===============================
    cv_prg_name   CONSTANT VARCHAR2(100) := 'close_process'; -- プログラム名
--
--#######################  固定ローカル変数宣言部 START   ######################
--
    lv_errbuf  VARCHAR2(5000);  -- エラー・メッセージ
    lv_retcode VARCHAR2(1);     -- リターン・コード
    lv_errmsg  VARCHAR2(5000);  -- ユーザー・エラー・メッセージ
--
--###########################  固定部 END   ####################################
--
    -- ===============================
    -- ユーザー宣言部
    -- ===============================
    -- *** ローカル定数 ***
--
    -- *** ローカル変数 ***
--
  BEGIN
--
--##################  固定ステータス初期化部 START   ###################
--
    ov_retcode := cv_status_normal;
--
--###########################  固定部 END   ############################
--
    DELETE xxcmm_wk_cust_batch_regist;
    DELETE xxccp_mrp_file_ul_interface xmf
    WHERE  xmf.file_id = in_file_id;
    COMMIT;
--
  EXCEPTION
--
--#################################  固定例外処理部 START   ####################################
--
    -- *** 処理部共通例外ハンドラ ***
    WHEN global_process_expt THEN
      ov_errmsg  := lv_errmsg;
      ov_errbuf  := SUBSTRB(cv_pkg_name||cv_msg_cont||cv_prg_name||cv_msg_part||lv_errbuf,1,5000);
      ov_retcode := cv_status_error;
    -- *** 共通関数例外ハンドラ ***
    WHEN global_api_expt THEN
      ov_errmsg  := lv_errmsg;
      ov_errbuf  := SUBSTRB(cv_pkg_name||cv_msg_cont||cv_prg_name||cv_msg_part||lv_errbuf,1,5000);
      ov_retcode := cv_status_error;
    -- *** 共通関数OTHERS例外ハンドラ ***
    WHEN global_api_others_expt THEN
      ov_errbuf  := cv_pkg_name||cv_msg_cont||cv_prg_name||cv_msg_part||SQLERRM;
      ov_retcode := cv_status_error;
    -- *** OTHERS例外ハンドラ ***
    WHEN OTHERS THEN
      ov_errbuf  := cv_pkg_name||cv_msg_cont||cv_prg_name||cv_msg_part||SQLERRM;
      ov_retcode := cv_status_error;
--
--#####################################  固定部 END   ##########################################
--
  END close_process;
--
  /**********************************************************************************
   * Procedure Name   : submain
   * Description      : メイン処理プロシージャ
   **********************************************************************************/
  PROCEDURE submain(
    in_file_id                IN  NUMBER,       --ファイルID
    iv_format_pattern         IN  VARCHAR2,     --ファイルフォーマット
    ov_errbuf                 OUT VARCHAR2,     --エラー・メッセージ           --# 固定 #
    ov_retcode                OUT VARCHAR2,     --リターン・コード             --# 固定 #
    ov_errmsg                 OUT VARCHAR2)     --ユーザー・エラー・メッセージ --# 固定 #
  IS
--
--#####################  固定ローカル定数変数宣言部 START   ####################
--
    -- ===============================
    -- 固定ローカル定数
    -- ===============================
    cv_prg_name   CONSTANT VARCHAR2(100) := 'submain'; -- プログラム名
    -- ===============================
    -- ローカル変数
    -- ===============================
    lv_errbuf   VARCHAR2(5000);  -- エラー・メッセージ
    lv_retcode  VARCHAR2(1);     -- リターン・コード
    lv_errmsg   VARCHAR2(5000);  -- ユーザー・エラー・メッセージ
--
--###########################  固定部 END   ####################################
--
    -- ===============================
    -- ユーザー宣言部
    -- ===============================
    -- *** ローカル定数 ***
--
    -- *** ローカル変数 ***
    lv_real_errbuf   VARCHAR2(5000);  --A-3・A-4時のエラー・メッセージ
    lv_real_retcode  VARCHAR2(1);     --A-3・A-4時のリターン・コード
    lv_real_errmsg   VARCHAR2(5000);  --A-3・A-4時のユーザー・エラー・メッセージ
--
  BEGIN
--
--##################  固定ステータス初期化部 START   ###################
--
    ov_retcode := cv_status_normal;
--
--###########################  固定部 END   ############################
--
--
    -- グローバル変数の初期化
    gn_target_cnt := 0;
    gn_normal_cnt := 0;
    gn_error_cnt  := 0;
    gn_warn_cnt   := 0;
--
    --パラメータ出力
    --ファイルID
    gv_out_msg := xxccp_common_pkg.get_msg(
                     iv_application  => gv_xxcmm_msg_kbn
                    ,iv_name         => cv_parameter_msg
                    ,iv_token_name1  => cv_param
                    ,iv_token_value1 => cv_file_id
                    ,iv_token_name2  => cv_value
                    ,iv_token_value2 => TO_CHAR(in_file_id)
                   );
    FND_FILE.PUT_LINE(
       which  => FND_FILE.OUTPUT
      ,buff   => gv_out_msg
    );
--
    --ファイルタイプ
    gv_out_msg := xxccp_common_pkg.get_msg(
                     iv_application  => gv_xxcmm_msg_kbn
                    ,iv_name         => cv_parameter_msg
                    ,iv_token_name1  => cv_param
                    ,iv_token_value1 => cv_file_content_type
                    ,iv_token_name2  => cv_value
                    ,iv_token_value2 => iv_format_pattern
                   );
    FND_FILE.PUT_LINE(
       which  => FND_FILE.OUTPUT
      ,buff   => gv_out_msg
    );
--
    --空行挿入
    FND_FILE.PUT_LINE(
       which  => FND_FILE.OUTPUT
      ,buff   => ''
    );
--
    -- ===============================
    -- ファイルアップロードI/Fテーブル取得処理(A-1)・顧客一括更新用ワークテーブル登録処理(A-2)
    -- ===============================
    cust_data_make_wk(
       in_file_id            -- ファイルID
      ,iv_format_pattern     -- ファイルフォーマット
      ,lv_errbuf             -- エラー・メッセージ           --# 固定 #
      ,lv_retcode            -- リターン・コード             --# 固定 #
      ,lv_errmsg);           -- ユーザー・エラー・メッセージ --# 固定 #
--
    --ファイルアップロードI/Fテーブル取得処理エラー時、
    --又は顧客一括更新用ワークテーブル登録処理エラー時は処理をスキップ
    IF (lv_retcode = cv_status_error) THEN
      NULL;
    ELSE
      -- ===============================
      -- テーブルロック処理(A-3)・顧客一括更新処理(A-4)
      -- ===============================
      rock_and_update_cust(
         in_file_id              -- ファイルID
        ,lv_errbuf               -- エラー・メッセージ           --# 固定 #
        ,lv_retcode              -- リターン・コード             --# 固定 #
        ,lv_errmsg);             -- ユーザー・エラー・メッセージ --# 固定 #
      --テーブルロック処理(A-3)・顧客一括更新処理(A-4)エラー時、ロールバック
      IF (lv_retcode = cv_status_error) THEN
        --ROLLBACK
        ROLLBACK;
      END IF;
    END IF;
--
    lv_real_errbuf  := lv_errbuf;
    lv_real_retcode := lv_retcode;
    lv_real_errmsg  := lv_errmsg;
--
    -- ===============================
    -- 終了処理(A-5)
    -- ===============================
    --ステータスに関わらず、アップロードテーブルとワークテーブルは削除する
    close_process(
       in_file_id              -- ファイルID
      ,lv_errbuf               -- エラー・メッセージ           --# 固定 #
      ,lv_retcode              -- リターン・コード             --# 固定 #
      ,lv_errmsg);             -- ユーザー・エラー・メッセージ --# 固定 #
--
    --ファイルアップロードI/Fテーブル取得処理エラー時、
    --又は顧客一括更新用ワークテーブル登録処理エラー時、もしくは
    --テーブルロック処理エラー時、
    --顧客一括更新処理エラー時、RAISE
    IF (lv_real_retcode = cv_status_error) THEN
      --エラー処理
      lv_errmsg := lv_real_errmsg;
      lv_errbuf := lv_real_errbuf;
      RAISE global_process_expt;
    END IF;
--
    --終了処理処理エラー時
    IF (lv_retcode = cv_status_error) THEN
      RAISE global_process_expt;
    END IF;
--
  EXCEPTION
--
--#################################  固定例外処理部 START   ###################################
--
    -- *** 処理部共通例外ハンドラ ***
    WHEN global_process_expt THEN
      ov_errmsg  := lv_errmsg;
      ov_errbuf  := SUBSTRB(cv_pkg_name||cv_msg_cont||cv_prg_name||cv_msg_part||lv_errbuf,1,5000);
      ov_retcode := cv_status_error;
    -- *** 共通関数OTHERS例外ハンドラ ***
    WHEN global_api_others_expt THEN
      ov_errbuf  := cv_pkg_name||cv_msg_cont||cv_prg_name||cv_msg_part||SQLERRM;
      ov_retcode := cv_status_error;
    -- *** OTHERS例外ハンドラ ***
    WHEN OTHERS THEN
      ov_errbuf  := cv_pkg_name||cv_msg_cont||cv_prg_name||cv_msg_part||SQLERRM;
      ov_retcode := cv_status_error;
--
--####################################  固定部 END   ##########################################
--
  END submain;
--
  /**********************************************************************************
   * Procedure Name   : main
   * Description      : コンカレント実行ファイル登録プロシージャ
   **********************************************************************************/
--
  PROCEDURE main(
    errbuf                    OUT    VARCHAR2,  --エラーメッセージ #固定#
    retcode                   OUT    VARCHAR2,  --エラーコード     #固定#
    iv_file_id                IN     VARCHAR2,  --ファイルID
    iv_format_pattern         IN     VARCHAR2   --ファイルフォーマット
  )
--
--
--###########################  固定部 START   ###########################
--
  IS
--
    -- ===============================
    -- 固定ローカル定数
    -- ===============================
    cv_prg_name        CONSTANT VARCHAR2(100) := 'main';             -- プログラム名
--
    cv_appl_short_name CONSTANT VARCHAR2(10)  := 'XXCCP';            -- アドオン：共通・IF領域
    cv_target_rec_msg  CONSTANT VARCHAR2(100) := 'APP-XXCCP1-90000'; -- 対象件数メッセージ
    cv_success_rec_msg CONSTANT VARCHAR2(100) := 'APP-XXCCP1-90001'; -- 成功件数メッセージ
    cv_error_rec_msg   CONSTANT VARCHAR2(100) := 'APP-XXCCP1-90002'; -- エラー件数メッセージ
    cv_skip_rec_msg    CONSTANT VARCHAR2(100) := 'APP-XXCCP1-90003'; -- スキップ件数メッセージ
    cv_cnt_token       CONSTANT VARCHAR2(10)  := 'COUNT';            -- 件数メッセージ用トークン名
    cv_normal_msg      CONSTANT VARCHAR2(100) := 'APP-XXCCP1-90004'; -- 正常終了メッセージ
    cv_warn_msg        CONSTANT VARCHAR2(100) := 'APP-XXCCP1-90005'; -- 警告終了メッセージ
    cv_error_msg       CONSTANT VARCHAR2(100) := 'APP-XXCCP1-90006'; -- エラー終了全ロールバック
    -- ===============================
    -- ローカル変数
    -- ===============================
    lv_errbuf          VARCHAR2(5000);  -- エラー・メッセージ
    lv_retcode         VARCHAR2(1);     -- リターン・コード
    lv_errmsg          VARCHAR2(5000);  -- ユーザー・エラー・メッセージ
    lv_message_code    VARCHAR2(100);   -- 終了メッセージコード
    --
  BEGIN
--
--###########################  固定部 START   #####################################################
--
    -- 固定出力
    -- コンカレントヘッダメッセージ出力関数の呼び出し
    xxccp_common_pkg.put_log_header(
       ov_retcode => lv_retcode
      ,ov_errbuf  => lv_errbuf
      ,ov_errmsg  => lv_errmsg
    );
    --
    IF (lv_retcode = cv_status_error) THEN
      RAISE global_api_others_expt;
    END IF;
    --
--###########################  固定部 END   #############################
--
    -- ===============================================
    -- submainの呼び出し（実際の処理はsubmainで行う）
    -- ===============================================
    submain(
       TO_NUMBER(iv_file_id)     --ファイルID
      ,iv_format_pattern         --ファイルフォーマット
      ,lv_errbuf                 --エラー・メッセージ           --# 固定 #
      ,lv_retcode                --リターン・コード             --# 固定 #
      ,lv_errmsg                 --ユーザー・エラー・メッセージ --# 固定 #
    );
--
    --エラー出力
    IF (lv_retcode = cv_status_error) THEN
      FND_FILE.PUT_LINE(
         which  => FND_FILE.OUTPUT
        ,buff   => lv_errmsg --ユーザー・エラーメッセージ
      );
      FND_FILE.PUT_LINE(
         which  => FND_FILE.LOG
        ,buff   => lv_errbuf --エラーメッセージ
      );
    END IF;
    --空行挿入
    FND_FILE.PUT_LINE(
       which  => FND_FILE.OUTPUT
      ,buff   => ''
    );
    --対象件数出力
    gv_out_msg := xxccp_common_pkg.get_msg(
                     iv_application  => cv_appl_short_name
                    ,iv_name         => cv_target_rec_msg
                    ,iv_token_name1  => cv_cnt_token
                    ,iv_token_value1 => TO_CHAR(gn_target_cnt)
                   );
    FND_FILE.PUT_LINE(
       which  => FND_FILE.OUTPUT
      ,buff   => gv_out_msg
    );
    --
    --成功件数出力
    gv_out_msg := xxccp_common_pkg.get_msg(
                     iv_application  => cv_appl_short_name
                    ,iv_name         => cv_success_rec_msg
                    ,iv_token_name1  => cv_cnt_token
                    ,iv_token_value1 => TO_CHAR(gn_normal_cnt)
                   );
    FND_FILE.PUT_LINE(
       which  => FND_FILE.OUTPUT
      ,buff   => gv_out_msg
    );
    --
    --エラー件数出力
    gv_out_msg := xxccp_common_pkg.get_msg(
                     iv_application  => cv_appl_short_name
                    ,iv_name         => cv_error_rec_msg
                    ,iv_token_name1  => cv_cnt_token
                    ,iv_token_value1 => TO_CHAR(gn_error_cnt)
                   );
    FND_FILE.PUT_LINE(
       which  => FND_FILE.OUTPUT
      ,buff   => gv_out_msg
    );
    --
    --終了メッセージ
    IF (lv_retcode = cv_status_normal) THEN
      lv_message_code := cv_normal_msg;
    ELSIF(lv_retcode = cv_status_warn) THEN
      lv_message_code := cv_warn_msg;
    ELSIF(lv_retcode = cv_status_error) THEN
      lv_message_code := cv_error_msg;
    END IF;
    --
    gv_out_msg := xxccp_common_pkg.get_msg(
                     iv_application  => cv_appl_short_name
                    ,iv_name         => lv_message_code
                   );
    FND_FILE.PUT_LINE(
       which  => FND_FILE.OUTPUT
      ,buff   => gv_out_msg
    );
    --ステータスセット
    retcode := lv_retcode;
    --終了ステータスがエラーの場合はROLLBACKする
    IF (retcode = cv_status_error) THEN
      ROLLBACK;
    END IF;
--
  EXCEPTION
    -- *** 共通関数OTHERS例外ハンドラ ***
    WHEN global_api_others_expt THEN
      errbuf  := cv_pkg_name||cv_msg_cont||cv_prg_name||cv_msg_part||SQLERRM;
      retcode := cv_status_error;
      ROLLBACK;
    -- *** OTHERS例外ハンドラ ***
    WHEN OTHERS THEN
      errbuf  := cv_pkg_name||cv_msg_cont||cv_prg_name||cv_msg_part||SQLERRM;
      retcode := cv_status_error;
      ROLLBACK;
  END main;
--
--###########################  固定部 END   #######################################################
--
END XXCMM003A29C;
/
